
Yusuf_Otopilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  08009798  08009798  00019798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d40  08009d40  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009d40  08009d40  00019d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d48  08009d48  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d48  08009d48  00019d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d4c  08009d4c  00019d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000430  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000610  20000610  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000264fa  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ccb  00000000  00000000  0004670a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00023765  00000000  00000000  0004a3d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fa8  00000000  00000000  0006db40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003f38  00000000  00000000  0006eae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003e5a  00000000  00000000  00072a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000287e8  00000000  00000000  0007687a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d019c  00000000  00000000  0009f062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0016f1fe  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004e64  00000000  00000000  0016f250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800977c 	.word	0x0800977c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800977c 	.word	0x0800977c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9dd 	b.w	8001074 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f86b 	bl	8000da4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f85e 	bl	8000da4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f84d 	bl	8000da4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f83f 	bl	8000da4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_d2lz>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	460d      	mov	r5, r1
 8000d42:	f7ff fed3 	bl	8000aec <__aeabi_dcmplt>
 8000d46:	b928      	cbnz	r0, 8000d54 <__aeabi_d2lz+0x1c>
 8000d48:	4620      	mov	r0, r4
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d50:	f000 b80a 	b.w	8000d68 <__aeabi_d2ulz>
 8000d54:	4620      	mov	r0, r4
 8000d56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d5a:	f000 f805 	bl	8000d68 <__aeabi_d2ulz>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	bd38      	pop	{r3, r4, r5, pc}
 8000d66:	bf00      	nop

08000d68 <__aeabi_d2ulz>:
 8000d68:	b5d0      	push	{r4, r6, r7, lr}
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__aeabi_d2ulz+0x34>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4606      	mov	r6, r0
 8000d70:	460f      	mov	r7, r1
 8000d72:	f7ff fc49 	bl	8000608 <__aeabi_dmul>
 8000d76:	f7ff ff1f 	bl	8000bb8 <__aeabi_d2uiz>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	f7ff fbca 	bl	8000514 <__aeabi_ui2d>
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <__aeabi_d2ulz+0x38>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f7ff fc40 	bl	8000608 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	4639      	mov	r1, r7
 8000d90:	f7ff fa82 	bl	8000298 <__aeabi_dsub>
 8000d94:	f7ff ff10 	bl	8000bb8 <__aeabi_d2uiz>
 8000d98:	4621      	mov	r1, r4
 8000d9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d9c:	3df00000 	.word	0x3df00000
 8000da0:	41f00000 	.word	0x41f00000

08000da4 <__udivmoddi4>:
 8000da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da8:	9d08      	ldr	r5, [sp, #32]
 8000daa:	4604      	mov	r4, r0
 8000dac:	468e      	mov	lr, r1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d14d      	bne.n	8000e4e <__udivmoddi4+0xaa>
 8000db2:	428a      	cmp	r2, r1
 8000db4:	4694      	mov	ip, r2
 8000db6:	d969      	bls.n	8000e8c <__udivmoddi4+0xe8>
 8000db8:	fab2 f282 	clz	r2, r2
 8000dbc:	b152      	cbz	r2, 8000dd4 <__udivmoddi4+0x30>
 8000dbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000dc2:	f1c2 0120 	rsb	r1, r2, #32
 8000dc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dce:	ea41 0e03 	orr.w	lr, r1, r3
 8000dd2:	4094      	lsls	r4, r2
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	0c21      	lsrs	r1, r4, #16
 8000dda:	fbbe f6f8 	udiv	r6, lr, r8
 8000dde:	fa1f f78c 	uxth.w	r7, ip
 8000de2:	fb08 e316 	mls	r3, r8, r6, lr
 8000de6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dea:	fb06 f107 	mul.w	r1, r6, r7
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x64>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dfa:	f080 811f 	bcs.w	800103c <__udivmoddi4+0x298>
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	f240 811c 	bls.w	800103c <__udivmoddi4+0x298>
 8000e04:	3e02      	subs	r6, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1a5b      	subs	r3, r3, r1
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e18:	fb00 f707 	mul.w	r7, r0, r7
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	d90a      	bls.n	8000e36 <__udivmoddi4+0x92>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	f080 810a 	bcs.w	8001040 <__udivmoddi4+0x29c>
 8000e2c:	42a7      	cmp	r7, r4
 8000e2e:	f240 8107 	bls.w	8001040 <__udivmoddi4+0x29c>
 8000e32:	4464      	add	r4, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3a:	1be4      	subs	r4, r4, r7
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	b11d      	cbz	r5, 8000e48 <__udivmoddi4+0xa4>
 8000e40:	40d4      	lsrs	r4, r2
 8000e42:	2300      	movs	r3, #0
 8000e44:	e9c5 4300 	strd	r4, r3, [r5]
 8000e48:	4631      	mov	r1, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0xc2>
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	f000 80ef 	beq.w	8001036 <__udivmoddi4+0x292>
 8000e58:	2600      	movs	r6, #0
 8000e5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5e:	4630      	mov	r0, r6
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	fab3 f683 	clz	r6, r3
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d14a      	bne.n	8000f04 <__udivmoddi4+0x160>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0xd4>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 80f9 	bhi.w	800106a <__udivmoddi4+0x2c6>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	469e      	mov	lr, r3
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0e0      	beq.n	8000e48 <__udivmoddi4+0xa4>
 8000e86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e8a:	e7dd      	b.n	8000e48 <__udivmoddi4+0xa4>
 8000e8c:	b902      	cbnz	r2, 8000e90 <__udivmoddi4+0xec>
 8000e8e:	deff      	udf	#255	; 0xff
 8000e90:	fab2 f282 	clz	r2, r2
 8000e94:	2a00      	cmp	r2, #0
 8000e96:	f040 8092 	bne.w	8000fbe <__udivmoddi4+0x21a>
 8000e9a:	eba1 010c 	sub.w	r1, r1, ip
 8000e9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea2:	fa1f fe8c 	uxth.w	lr, ip
 8000ea6:	2601      	movs	r6, #1
 8000ea8:	0c20      	lsrs	r0, r4, #16
 8000eaa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000eae:	fb07 1113 	mls	r1, r7, r3, r1
 8000eb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb6:	fb0e f003 	mul.w	r0, lr, r3
 8000eba:	4288      	cmp	r0, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x12c>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ec6:	d202      	bcs.n	8000ece <__udivmoddi4+0x12a>
 8000ec8:	4288      	cmp	r0, r1
 8000eca:	f200 80cb 	bhi.w	8001064 <__udivmoddi4+0x2c0>
 8000ece:	4643      	mov	r3, r8
 8000ed0:	1a09      	subs	r1, r1, r0
 8000ed2:	b2a4      	uxth	r4, r4
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1110 	mls	r1, r7, r0, r1
 8000edc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ee0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ee4:	45a6      	cmp	lr, r4
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x156>
 8000ee8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef0:	d202      	bcs.n	8000ef8 <__udivmoddi4+0x154>
 8000ef2:	45a6      	cmp	lr, r4
 8000ef4:	f200 80bb 	bhi.w	800106e <__udivmoddi4+0x2ca>
 8000ef8:	4608      	mov	r0, r1
 8000efa:	eba4 040e 	sub.w	r4, r4, lr
 8000efe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f02:	e79c      	b.n	8000e3e <__udivmoddi4+0x9a>
 8000f04:	f1c6 0720 	rsb	r7, r6, #32
 8000f08:	40b3      	lsls	r3, r6
 8000f0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f12:	fa20 f407 	lsr.w	r4, r0, r7
 8000f16:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1a:	431c      	orrs	r4, r3
 8000f1c:	40f9      	lsrs	r1, r7
 8000f1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f22:	fa00 f306 	lsl.w	r3, r0, r6
 8000f26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f2a:	0c20      	lsrs	r0, r4, #16
 8000f2c:	fa1f fe8c 	uxth.w	lr, ip
 8000f30:	fb09 1118 	mls	r1, r9, r8, r1
 8000f34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f38:	fb08 f00e 	mul.w	r0, r8, lr
 8000f3c:	4288      	cmp	r0, r1
 8000f3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f42:	d90b      	bls.n	8000f5c <__udivmoddi4+0x1b8>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f4c:	f080 8088 	bcs.w	8001060 <__udivmoddi4+0x2bc>
 8000f50:	4288      	cmp	r0, r1
 8000f52:	f240 8085 	bls.w	8001060 <__udivmoddi4+0x2bc>
 8000f56:	f1a8 0802 	sub.w	r8, r8, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	1a09      	subs	r1, r1, r0
 8000f5e:	b2a4      	uxth	r4, r4
 8000f60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f64:	fb09 1110 	mls	r1, r9, r0, r1
 8000f68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f70:	458e      	cmp	lr, r1
 8000f72:	d908      	bls.n	8000f86 <__udivmoddi4+0x1e2>
 8000f74:	eb1c 0101 	adds.w	r1, ip, r1
 8000f78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f7c:	d26c      	bcs.n	8001058 <__udivmoddi4+0x2b4>
 8000f7e:	458e      	cmp	lr, r1
 8000f80:	d96a      	bls.n	8001058 <__udivmoddi4+0x2b4>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4461      	add	r1, ip
 8000f86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f8e:	eba1 010e 	sub.w	r1, r1, lr
 8000f92:	42a1      	cmp	r1, r4
 8000f94:	46c8      	mov	r8, r9
 8000f96:	46a6      	mov	lr, r4
 8000f98:	d356      	bcc.n	8001048 <__udivmoddi4+0x2a4>
 8000f9a:	d053      	beq.n	8001044 <__udivmoddi4+0x2a0>
 8000f9c:	b15d      	cbz	r5, 8000fb6 <__udivmoddi4+0x212>
 8000f9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000fa2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fa6:	fa01 f707 	lsl.w	r7, r1, r7
 8000faa:	fa22 f306 	lsr.w	r3, r2, r6
 8000fae:	40f1      	lsrs	r1, r6
 8000fb0:	431f      	orrs	r7, r3
 8000fb2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fb6:	2600      	movs	r6, #0
 8000fb8:	4631      	mov	r1, r6
 8000fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fbe:	f1c2 0320 	rsb	r3, r2, #32
 8000fc2:	40d8      	lsrs	r0, r3
 8000fc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	4301      	orrs	r1, r0
 8000fd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd4:	fa1f fe8c 	uxth.w	lr, ip
 8000fd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fdc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fe0:	0c0b      	lsrs	r3, r1, #16
 8000fe2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fe6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fea:	429e      	cmp	r6, r3
 8000fec:	fa04 f402 	lsl.w	r4, r4, r2
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x260>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ffa:	d22f      	bcs.n	800105c <__udivmoddi4+0x2b8>
 8000ffc:	429e      	cmp	r6, r3
 8000ffe:	d92d      	bls.n	800105c <__udivmoddi4+0x2b8>
 8001000:	3802      	subs	r0, #2
 8001002:	4463      	add	r3, ip
 8001004:	1b9b      	subs	r3, r3, r6
 8001006:	b289      	uxth	r1, r1
 8001008:	fbb3 f6f7 	udiv	r6, r3, r7
 800100c:	fb07 3316 	mls	r3, r7, r6, r3
 8001010:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001014:	fb06 f30e 	mul.w	r3, r6, lr
 8001018:	428b      	cmp	r3, r1
 800101a:	d908      	bls.n	800102e <__udivmoddi4+0x28a>
 800101c:	eb1c 0101 	adds.w	r1, ip, r1
 8001020:	f106 38ff 	add.w	r8, r6, #4294967295
 8001024:	d216      	bcs.n	8001054 <__udivmoddi4+0x2b0>
 8001026:	428b      	cmp	r3, r1
 8001028:	d914      	bls.n	8001054 <__udivmoddi4+0x2b0>
 800102a:	3e02      	subs	r6, #2
 800102c:	4461      	add	r1, ip
 800102e:	1ac9      	subs	r1, r1, r3
 8001030:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001034:	e738      	b.n	8000ea8 <__udivmoddi4+0x104>
 8001036:	462e      	mov	r6, r5
 8001038:	4628      	mov	r0, r5
 800103a:	e705      	b.n	8000e48 <__udivmoddi4+0xa4>
 800103c:	4606      	mov	r6, r0
 800103e:	e6e3      	b.n	8000e08 <__udivmoddi4+0x64>
 8001040:	4618      	mov	r0, r3
 8001042:	e6f8      	b.n	8000e36 <__udivmoddi4+0x92>
 8001044:	454b      	cmp	r3, r9
 8001046:	d2a9      	bcs.n	8000f9c <__udivmoddi4+0x1f8>
 8001048:	ebb9 0802 	subs.w	r8, r9, r2
 800104c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001050:	3801      	subs	r0, #1
 8001052:	e7a3      	b.n	8000f9c <__udivmoddi4+0x1f8>
 8001054:	4646      	mov	r6, r8
 8001056:	e7ea      	b.n	800102e <__udivmoddi4+0x28a>
 8001058:	4620      	mov	r0, r4
 800105a:	e794      	b.n	8000f86 <__udivmoddi4+0x1e2>
 800105c:	4640      	mov	r0, r8
 800105e:	e7d1      	b.n	8001004 <__udivmoddi4+0x260>
 8001060:	46d0      	mov	r8, sl
 8001062:	e77b      	b.n	8000f5c <__udivmoddi4+0x1b8>
 8001064:	3b02      	subs	r3, #2
 8001066:	4461      	add	r1, ip
 8001068:	e732      	b.n	8000ed0 <__udivmoddi4+0x12c>
 800106a:	4630      	mov	r0, r6
 800106c:	e709      	b.n	8000e82 <__udivmoddi4+0xde>
 800106e:	4464      	add	r4, ip
 8001070:	3802      	subs	r0, #2
 8001072:	e742      	b.n	8000efa <__udivmoddi4+0x156>

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8001078:	b530      	push	{r4, r5, lr}
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 800107a:	4c3b      	ldr	r4, [pc, #236]	; (8001168 <TrimRead+0xf0>)
{
 800107c:	b08d      	sub	sp, #52	; 0x34
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 800107e:	f04f 35ff 	mov.w	r5, #4294967295
 8001082:	aa04      	add	r2, sp, #16
 8001084:	2119      	movs	r1, #25
 8001086:	e9cd 1501 	strd	r1, r5, [sp, #4]
 800108a:	9200      	str	r2, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2288      	movs	r2, #136	; 0x88
 8001090:	21ec      	movs	r1, #236	; 0xec
 8001092:	4620      	mov	r0, r4
 8001094:	f002 f948 	bl	8003328 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8001098:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 800109c:	2207      	movs	r2, #7
 800109e:	e9cd 2501 	strd	r2, r5, [sp, #4]
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	22e1      	movs	r2, #225	; 0xe1
 80010a6:	2301      	movs	r3, #1
 80010a8:	21ec      	movs	r1, #236	; 0xec
 80010aa:	4620      	mov	r0, r4
 80010ac:	f002 f93c 	bl	8003328 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 80010b0:	f89d 4017 	ldrb.w	r4, [sp, #23]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80010b4:	f89d 3015 	ldrb.w	r3, [sp, #21]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 80010b8:	f89d 0019 	ldrb.w	r0, [sp, #25]
 80010bc:	f89d 2016 	ldrb.w	r2, [sp, #22]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 80010c0:	f8bd 501a 	ldrh.w	r5, [sp, #26]
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010c4:	4929      	ldr	r1, [pc, #164]	; (800116c <TrimRead+0xf4>)
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 80010c6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 80010ca:	4c29      	ldr	r4, [pc, #164]	; (8001170 <TrimRead+0xf8>)
 80010cc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 80010d0:	4828      	ldr	r0, [pc, #160]	; (8001174 <TrimRead+0xfc>)
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 80010d2:	8022      	strh	r2, [r4, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 80010d4:	4a28      	ldr	r2, [pc, #160]	; (8001178 <TrimRead+0x100>)
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 80010d6:	8005      	strh	r5, [r0, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80010d8:	4c28      	ldr	r4, [pc, #160]	; (800117c <TrimRead+0x104>)
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 80010da:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 80010de:	8010      	strh	r0, [r2, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80010e0:	f8bd 501e 	ldrh.w	r5, [sp, #30]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80010e4:	4a26      	ldr	r2, [pc, #152]	; (8001180 <TrimRead+0x108>)
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80010e6:	8025      	strh	r5, [r4, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010e8:	4826      	ldr	r0, [pc, #152]	; (8001184 <TrimRead+0x10c>)
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80010ea:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80010ee:	8014      	strh	r4, [r2, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010f0:	f8bd 5022 	ldrh.w	r5, [sp, #34]	; 0x22
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010f4:	4a24      	ldr	r2, [pc, #144]	; (8001188 <TrimRead+0x110>)
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010f6:	8005      	strh	r5, [r0, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80010f8:	4c24      	ldr	r4, [pc, #144]	; (800118c <TrimRead+0x114>)
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010fa:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 80010fe:	8010      	strh	r0, [r2, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8001100:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
	dig_H1 = trimdata[24];
 8001104:	4a22      	ldr	r2, [pc, #136]	; (8001190 <TrimRead+0x118>)
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8001106:	8025      	strh	r5, [r4, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001108:	4822      	ldr	r0, [pc, #136]	; (8001194 <TrimRead+0x11c>)
	dig_H1 = trimdata[24];
 800110a:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 800110e:	8014      	strh	r4, [r2, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001110:	f8bd 4029 	ldrh.w	r4, [sp, #41]	; 0x29
	dig_H3 = (trimdata[27]);
 8001114:	4a20      	ldr	r2, [pc, #128]	; (8001198 <TrimRead+0x120>)
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001116:	8004      	strh	r4, [r0, #0]
	dig_H3 = (trimdata[27]);
 8001118:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 800111c:	8010      	strh	r0, [r2, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 800111e:	4a1f      	ldr	r2, [pc, #124]	; (800119c <TrimRead+0x124>)
 8001120:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 8001124:	8010      	strh	r0, [r2, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <TrimRead+0x128>)
 8001128:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800112c:	8010      	strh	r0, [r2, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800112e:	4a1d      	ldr	r2, [pc, #116]	; (80011a4 <TrimRead+0x12c>)
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8001130:	481d      	ldr	r0, [pc, #116]	; (80011a8 <TrimRead+0x130>)
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001132:	8013      	strh	r3, [r2, #0]
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001134:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8001138:	800b      	strh	r3, [r1, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 800113a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800113e:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001142:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 8001146:	4c19      	ldr	r4, [pc, #100]	; (80011ac <TrimRead+0x134>)
 8001148:	f003 020f 	and.w	r2, r3, #15
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001152:	8003      	strh	r3, [r0, #0]
	dig_H6 = (trimdata[31]);
 8001154:	4916      	ldr	r1, [pc, #88]	; (80011b0 <TrimRead+0x138>)
 8001156:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800115a:	800b      	strh	r3, [r1, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 800115c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8001160:	8022      	strh	r2, [r4, #0]
}
 8001162:	b00d      	add	sp, #52	; 0x34
 8001164:	bd30      	pop	{r4, r5, pc}
 8001166:	bf00      	nop
 8001168:	2000031c 	.word	0x2000031c
 800116c:	2000021c 	.word	0x2000021c
 8001170:	2000020c 	.word	0x2000020c
 8001174:	2000020e 	.word	0x2000020e
 8001178:	20000210 	.word	0x20000210
 800117c:	20000212 	.word	0x20000212
 8001180:	20000214 	.word	0x20000214
 8001184:	20000216 	.word	0x20000216
 8001188:	20000218 	.word	0x20000218
 800118c:	2000021a 	.word	0x2000021a
 8001190:	200001fe 	.word	0x200001fe
 8001194:	20000200 	.word	0x20000200
 8001198:	20000202 	.word	0x20000202
 800119c:	2000021e 	.word	0x2000021e
 80011a0:	20000220 	.word	0x20000220
 80011a4:	2000020a 	.word	0x2000020a
 80011a8:	20000206 	.word	0x20000206
 80011ac:	20000204 	.word	0x20000204
 80011b0:	20000208 	.word	0x20000208

080011b4 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80011b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011b8:	b089      	sub	sp, #36	; 0x24
 80011ba:	468a      	mov	sl, r1
 80011bc:	9005      	str	r0, [sp, #20]
 80011be:	4617      	mov	r7, r2
 80011c0:	461e      	mov	r6, r3
 80011c2:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
 80011c6:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
	// Read the Trimming parameters
	TrimRead();
 80011ca:	f7ff ff55 	bl	8001078 <TrimRead>


	uint8_t datatowrite = 0;
	uint8_t datacheck = 0;
 80011ce:	2300      	movs	r3, #0

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011d0:	2401      	movs	r4, #1
 80011d2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80011d6:	f10d 091e 	add.w	r9, sp, #30
	uint8_t datacheck = 0;
 80011da:	f88d 301f 	strb.w	r3, [sp, #31]
	datatowrite = 0xB6;  // reset sequence
 80011de:	23b6      	movs	r3, #182	; 0xb6
 80011e0:	f88d 301e 	strb.w	r3, [sp, #30]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011e4:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80011e8:	4840      	ldr	r0, [pc, #256]	; (80012ec <BME280_Config+0x138>)
 80011ea:	f8cd 9000 	str.w	r9, [sp]
 80011ee:	4623      	mov	r3, r4
 80011f0:	22e0      	movs	r2, #224	; 0xe0
 80011f2:	21ec      	movs	r1, #236	; 0xec
 80011f4:	f001 ff5c 	bl	80030b0 <HAL_I2C_Mem_Write>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d171      	bne.n	80012e0 <BME280_Config+0x12c>
	{
		return -1;
	}

	HAL_Delay (100);
 80011fc:	2064      	movs	r0, #100	; 0x64
 80011fe:	f001 fbc7 	bl	8002990 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001202:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001206:	4839      	ldr	r0, [pc, #228]	; (80012ec <BME280_Config+0x138>)
 8001208:	f8cd 9000 	str.w	r9, [sp]
 800120c:	4623      	mov	r3, r4
 800120e:	22f2      	movs	r2, #242	; 0xf2
 8001210:	21ec      	movs	r1, #236	; 0xec
	datatowrite = osrs_h;
 8001212:	f88d 701e 	strb.w	r7, [sp, #30]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001216:	f001 ff4b 	bl	80030b0 <HAL_I2C_Mem_Write>
 800121a:	2800      	cmp	r0, #0
 800121c:	d160      	bne.n	80012e0 <BME280_Config+0x12c>
	{
		return -1;
	}
	HAL_Delay (100);
 800121e:	2064      	movs	r0, #100	; 0x64
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8001220:	f10d 071f 	add.w	r7, sp, #31
	HAL_Delay (100);
 8001224:	f001 fbb4 	bl	8002990 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8001228:	4623      	mov	r3, r4
 800122a:	22f2      	movs	r2, #242	; 0xf2
 800122c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001230:	482e      	ldr	r0, [pc, #184]	; (80012ec <BME280_Config+0x138>)
 8001232:	9700      	str	r7, [sp, #0]
 8001234:	21ec      	movs	r1, #236	; 0xec
 8001236:	f002 f877 	bl	8003328 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800123a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800123e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8001242:	429a      	cmp	r2, r3
 8001244:	d14c      	bne.n	80012e0 <BME280_Config+0x12c>
		return -1;
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001246:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800124a:	ea48 1b4b 	orr.w	fp, r8, fp, lsl #5
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800124e:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001252:	4826      	ldr	r0, [pc, #152]	; (80012ec <BME280_Config+0x138>)
 8001254:	f8cd 9000 	str.w	r9, [sp]
 8001258:	4623      	mov	r3, r4
 800125a:	22f5      	movs	r2, #245	; 0xf5
 800125c:	21ec      	movs	r1, #236	; 0xec
	datatowrite = (t_sb <<5) |(filter << 2);
 800125e:	f88d b01e 	strb.w	fp, [sp, #30]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001262:	f001 ff25 	bl	80030b0 <HAL_I2C_Mem_Write>
 8001266:	2800      	cmp	r0, #0
 8001268:	d13a      	bne.n	80012e0 <BME280_Config+0x12c>
	{
		return -1;
	}
	HAL_Delay (100);
 800126a:	2064      	movs	r0, #100	; 0x64
 800126c:	f001 fb90 	bl	8002990 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001270:	4623      	mov	r3, r4
 8001272:	22f5      	movs	r2, #245	; 0xf5
 8001274:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001278:	481c      	ldr	r0, [pc, #112]	; (80012ec <BME280_Config+0x138>)
 800127a:	9700      	str	r7, [sp, #0]
 800127c:	21ec      	movs	r1, #236	; 0xec
 800127e:	f002 f853 	bl	8003328 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001282:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8001286:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800128a:	429a      	cmp	r2, r3
 800128c:	d128      	bne.n	80012e0 <BME280_Config+0x12c>
		return -1;
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 800128e:	9b05      	ldr	r3, [sp, #20]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001290:	f8cd 9000 	str.w	r9, [sp]
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001294:	ea46 068a 	orr.w	r6, r6, sl, lsl #2
 8001298:	ea46 1043 	orr.w	r0, r6, r3, lsl #5
 800129c:	f88d 001e 	strb.w	r0, [sp, #30]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012a0:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80012a4:	4811      	ldr	r0, [pc, #68]	; (80012ec <BME280_Config+0x138>)
 80012a6:	4623      	mov	r3, r4
 80012a8:	22f4      	movs	r2, #244	; 0xf4
 80012aa:	21ec      	movs	r1, #236	; 0xec
 80012ac:	f001 ff00 	bl	80030b0 <HAL_I2C_Mem_Write>
 80012b0:	b9b0      	cbnz	r0, 80012e0 <BME280_Config+0x12c>
	{
		return -1;
	}
	HAL_Delay (100);
 80012b2:	2064      	movs	r0, #100	; 0x64
 80012b4:	f001 fb6c 	bl	8002990 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80012b8:	4623      	mov	r3, r4
 80012ba:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80012be:	9700      	str	r7, [sp, #0]
 80012c0:	22f4      	movs	r2, #244	; 0xf4
 80012c2:	21ec      	movs	r1, #236	; 0xec
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <BME280_Config+0x138>)
 80012c6:	f002 f82f 	bl	8003328 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012ca:	f89d 001f 	ldrb.w	r0, [sp, #31]
 80012ce:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80012d2:	1ac0      	subs	r0, r0, r3
 80012d4:	bf18      	it	ne
 80012d6:	f04f 30ff 	movne.w	r0, #4294967295
	{
		return -1;
	}

	return 0;
}
 80012da:	b009      	add	sp, #36	; 0x24
 80012dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80012e4:	b009      	add	sp, #36	; 0x24
 80012e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012ea:	bf00      	nop
 80012ec:	2000031c 	.word	0x2000031c

080012f0 <BMEReadRaw>:


int BMEReadRaw(void)
{
 80012f0:	b530      	push	{r4, r5, lr}
 80012f2:	b087      	sub	sp, #28
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80012f4:	4d21      	ldr	r5, [pc, #132]	; (800137c <BMEReadRaw+0x8c>)
 80012f6:	4822      	ldr	r0, [pc, #136]	; (8001380 <BMEReadRaw+0x90>)
 80012f8:	9500      	str	r5, [sp, #0]
 80012fa:	2401      	movs	r4, #1
 80012fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001300:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8001304:	22d0      	movs	r2, #208	; 0xd0
 8001306:	4623      	mov	r3, r4
 8001308:	21ec      	movs	r1, #236	; 0xec
 800130a:	f002 f80d 	bl	8003328 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 800130e:	782b      	ldrb	r3, [r5, #0]
 8001310:	2b60      	cmp	r3, #96	; 0x60
 8001312:	d12f      	bne.n	8001374 <BMEReadRaw+0x84>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	2208      	movs	r2, #8
 800131a:	ab04      	add	r3, sp, #16
 800131c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	22f7      	movs	r2, #247	; 0xf7
 8001324:	4623      	mov	r3, r4
 8001326:	21ec      	movs	r1, #236	; 0xec
 8001328:	4815      	ldr	r0, [pc, #84]	; (8001380 <BMEReadRaw+0x90>)
 800132a:	f001 fffd 	bl	8003328 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800132e:	f89d 2011 	ldrb.w	r2, [sp, #17]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001332:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001336:	f89d 4013 	ldrb.w	r4, [sp, #19]
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800133a:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800133e:	f89d 0012 	ldrb.w	r0, [sp, #18]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001342:	f8bd 1016 	ldrh.w	r1, [sp, #22]
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001346:	0112      	lsls	r2, r2, #4
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800134e:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8001352:	4c0c      	ldr	r4, [pc, #48]	; (8001384 <BMEReadRaw+0x94>)
 8001354:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
 8001358:	6022      	str	r2, [r4, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 800135a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800135e:	480a      	ldr	r0, [pc, #40]	; (8001388 <BMEReadRaw+0x98>)
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001360:	4c0a      	ldr	r4, [pc, #40]	; (800138c <BMEReadRaw+0x9c>)
 8001362:	ba49      	rev16	r1, r1
 8001364:	b289      	uxth	r1, r1
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001366:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 800136a:	6003      	str	r3, [r0, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 800136c:	6021      	str	r1, [r4, #0]

		return 0;
 800136e:	2000      	movs	r0, #0
	}

	else return -1;
}
 8001370:	b007      	add	sp, #28
 8001372:	bd30      	pop	{r4, r5, pc}
	else return -1;
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	e7fa      	b.n	8001370 <BMEReadRaw+0x80>
 800137a:	bf00      	nop
 800137c:	200001fc 	.word	0x200001fc
 8001380:	2000031c 	.word	0x2000031c
 8001384:	20000228 	.word	0x20000228
 8001388:	2000022c 	.word	0x2000022c
 800138c:	20000224 	.word	0x20000224

08001390 <BME280_compensate_P_int64>:
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001390:	4b68      	ldr	r3, [pc, #416]	; (8001534 <BME280_compensate_P_int64+0x1a4>)
 8001392:	681b      	ldr	r3, [r3, #0]
{
 8001394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	var1 = ((int64_t)t_fine) - 128000;
 8001398:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 800139c:	f5b3 34fa 	subs.w	r4, r3, #128000	; 0x1f400
	var2 = var1 * var1 * (int64_t)dig_P6;
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
	var2 = var2 + (((int64_t)dig_P4)<<35);
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80013a0:	4b65      	ldr	r3, [pc, #404]	; (8001538 <BME280_compensate_P_int64+0x1a8>)
 80013a2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80013a6:	4b65      	ldr	r3, [pc, #404]	; (800153c <BME280_compensate_P_int64+0x1ac>)
	var1 = ((int64_t)t_fine) - 128000;
 80013a8:	f14c 3cff 	adc.w	ip, ip, #4294967295
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
	var2 = var1 * var1 * (int64_t)dig_P6;
 80013b0:	fba4 6704 	umull	r6, r7, r4, r4
 80013b4:	fb04 f20c 	mul.w	r2, r4, ip
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80013b8:	17cd      	asrs	r5, r1, #31
	var2 = var1 * var1 * (int64_t)dig_P6;
 80013ba:	eb07 0742 	add.w	r7, r7, r2, lsl #1
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80013be:	fb01 f20c 	mul.w	r2, r1, ip
 80013c2:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 80013c6:	fb04 2205 	mla	r2, r4, r5, r2
 80013ca:	fb03 f507 	mul.w	r5, r3, r7
 80013ce:	fb06 550e 	mla	r5, r6, lr, r5
 80013d2:	fba1 1e04 	umull	r1, lr, r1, r4
 80013d6:	4472      	add	r2, lr
 80013d8:	fba3 3e06 	umull	r3, lr, r3, r6
 80013dc:	4475      	add	r5, lr
 80013de:	0312      	lsls	r2, r2, #12
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	ea42 5211 	orr.w	r2, r2, r1, lsr #20
 80013e6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80013ea:	0309      	lsls	r1, r1, #12
 80013ec:	185b      	adds	r3, r3, r1
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80013ee:	4954      	ldr	r1, [pc, #336]	; (8001540 <BME280_compensate_P_int64+0x1b0>)
 80013f0:	8809      	ldrh	r1, [r1, #0]
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80013f2:	eb42 2225 	adc.w	r2, r2, r5, asr #8
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80013f6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80013fa:	fba3 3501 	umull	r3, r5, r3, r1
 80013fe:	fb01 5502 	mla	r5, r1, r2, r5
 8001402:	17eb      	asrs	r3, r5, #31
 8001404:	106a      	asrs	r2, r5, #1
	if (var1 == 0)
 8001406:	ea53 0565 	orrs.w	r5, r3, r5, asr #1
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800140a:	f04f 0100 	mov.w	r1, #0
	if (var1 == 0)
 800140e:	f000 808e 	beq.w	800152e <BME280_compensate_P_int64+0x19e>
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001412:	4d4c      	ldr	r5, [pc, #304]	; (8001544 <BME280_compensate_P_int64+0x1b4>)
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001414:	f8df e140 	ldr.w	lr, [pc, #320]	; 8001558 <BME280_compensate_P_int64+0x1c8>
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001418:	f9b5 5000 	ldrsh.w	r5, [r5]
	var2 = var1 * var1 * (int64_t)dig_P6;
 800141c:	f9be e000 	ldrsh.w	lr, [lr]
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001420:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8001424:	fb05 fc0c 	mul.w	ip, r5, ip
 8001428:	fb04 cc08 	mla	ip, r4, r8, ip
 800142c:	fba5 5404 	umull	r5, r4, r5, r4
 8001430:	4464      	add	r4, ip
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001432:	fb0e f707 	mul.w	r7, lr, r7
 8001436:	ea4f 7cee 	mov.w	ip, lr, asr #31
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 800143a:	0464      	lsls	r4, r4, #17
	var2 = var1 * var1 * (int64_t)dig_P6;
 800143c:	fb06 770c 	mla	r7, r6, ip, r7
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001440:	ea44 34d5 	orr.w	r4, r4, r5, lsr #15
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001444:	fbae e606 	umull	lr, r6, lr, r6
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001448:	046d      	lsls	r5, r5, #17
 800144a:	eb15 050e 	adds.w	r5, r5, lr
	var2 = var1 * var1 * (int64_t)dig_P6;
 800144e:	443e      	add	r6, r7
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001450:	eb46 0404 	adc.w	r4, r6, r4
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001454:	1949      	adds	r1, r1, r5
 8001456:	4d3c      	ldr	r5, [pc, #240]	; (8001548 <BME280_compensate_P_int64+0x1b8>)
	{
		return 0; // avoid exception caused by division by zero
	}
	p = 1048576-adc_P;
 8001458:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
	var2 = var2 + (((int64_t)dig_P4)<<35);
 800145c:	f9b5 6000 	ldrsh.w	r6, [r5]
	p = (((p<<31)-var2)*3125)/var1;
 8001460:	f000 4500 	and.w	r5, r0, #2147483648	; 0x80000000
 8001464:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
 8001468:	07c0      	lsls	r0, r0, #31
 800146a:	ebb0 0e01 	subs.w	lr, r0, r1
	var2 = var2 + (((int64_t)dig_P4)<<35);
 800146e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
	p = (((p<<31)-var2)*3125)/var1;
 8001472:	eb65 0404 	sbc.w	r4, r5, r4
 8001476:	eb1e 0c0e 	adds.w	ip, lr, lr
 800147a:	eb44 0004 	adc.w	r0, r4, r4
 800147e:	eb1c 0c0e 	adds.w	ip, ip, lr
 8001482:	eb44 0000 	adc.w	r0, r4, r0
 8001486:	0181      	lsls	r1, r0, #6
 8001488:	ea4f 158c 	mov.w	r5, ip, lsl #6
 800148c:	ea41 619c 	orr.w	r1, r1, ip, lsr #26
 8001490:	eb1c 0c05 	adds.w	ip, ip, r5
 8001494:	eb40 0001 	adc.w	r0, r0, r1
 8001498:	0080      	lsls	r0, r0, #2
 800149a:	ea40 709c 	orr.w	r0, r0, ip, lsr #30
 800149e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80014a2:	eb1c 0c0e 	adds.w	ip, ip, lr
 80014a6:	eb44 0100 	adc.w	r1, r4, r0
 80014aa:	0089      	lsls	r1, r1, #2
 80014ac:	ea4f 008c 	mov.w	r0, ip, lsl #2
 80014b0:	eb10 000e 	adds.w	r0, r0, lr
 80014b4:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 80014b8:	eb44 0101 	adc.w	r1, r4, r1
 80014bc:	f7ff fbec 	bl	8000c98 <__aeabi_ldivmod>
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <BME280_compensate_P_int64+0x1bc>)
 80014c2:	f9b3 2000 	ldrsh.w	r2, [r3]
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80014c6:	4b22      	ldr	r3, [pc, #136]	; (8001550 <BME280_compensate_P_int64+0x1c0>)
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80014c8:	134e      	asrs	r6, r1, #13
 80014ca:	0b45      	lsrs	r5, r0, #13
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80014cc:	f9b3 7000 	ldrsh.w	r7, [r3]
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80014d0:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
 80014d4:	fb02 f306 	mul.w	r3, r2, r6
 80014d8:	17d4      	asrs	r4, r2, #31
 80014da:	fb05 3304 	mla	r3, r5, r4, r3
 80014de:	fba2 2405 	umull	r2, r4, r2, r5
 80014e2:	4423      	add	r3, r4
 80014e4:	fb02 f606 	mul.w	r6, r2, r6
 80014e8:	fb05 6603 	mla	r6, r5, r3, r6
 80014ec:	fba2 2505 	umull	r2, r5, r2, r5
 80014f0:	4435      	add	r5, r6
 80014f2:	0e53      	lsrs	r3, r2, #25
 80014f4:	ea43 13c5 	orr.w	r3, r3, r5, lsl #7
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 80014f8:	181b      	adds	r3, r3, r0
 80014fa:	eb41 6565 	adc.w	r5, r1, r5, asr #25
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80014fe:	fb07 f401 	mul.w	r4, r7, r1
 8001502:	17f9      	asrs	r1, r7, #31
 8001504:	fb01 4400 	mla	r4, r1, r0, r4
 8001508:	fba7 0700 	umull	r0, r7, r7, r0
 800150c:	443c      	add	r4, r7
 800150e:	0cc0      	lsrs	r0, r0, #19
 8001510:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001514:	4a0f      	ldr	r2, [pc, #60]	; (8001554 <BME280_compensate_P_int64+0x1c4>)
 8001516:	181b      	adds	r3, r3, r0
 8001518:	f9b2 1000 	ldrsh.w	r1, [r2]
 800151c:	eb45 44e4 	adc.w	r4, r5, r4, asr #19
 8001520:	0a18      	lsrs	r0, r3, #8
 8001522:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
	return (uint32_t)p;
 8001526:	eb00 1001 	add.w	r0, r0, r1, lsl #4
}
 800152a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0; // avoid exception caused by division by zero
 800152e:	4608      	mov	r0, r1
}
 8001530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001534:	20000230 	.word	0x20000230
 8001538:	2000020c 	.word	0x2000020c
 800153c:	2000020e 	.word	0x2000020e
 8001540:	2000020a 	.word	0x2000020a
 8001544:	20000212 	.word	0x20000212
 8001548:	20000210 	.word	0x20000210
 800154c:	2000021a 	.word	0x2000021a
 8001550:	20000218 	.word	0x20000218
 8001554:	20000216 	.word	0x20000216
 8001558:	20000214 	.word	0x20000214

0800155c <bme280_compensate_H_int32>:
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <bme280_compensate_H_int32+0x8c>)
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800155e:	4a23      	ldr	r2, [pc, #140]	; (80015ec <bme280_compensate_H_int32+0x90>)
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001560:	6819      	ldr	r1, [r3, #0]
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001562:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <bme280_compensate_H_int32+0x94>)
 8001564:	8812      	ldrh	r2, [r2, #0]
 8001566:	f9b3 c000 	ldrsh.w	ip, [r3]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 800156a:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <bme280_compensate_H_int32+0x98>)
	v_x1_u32r = (t_fine - ((int32_t)76800));
 800156c:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001570:	f9b3 3000 	ldrsh.w	r3, [r3]
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001574:	fb01 f202 	mul.w	r2, r1, r2
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001578:	051b      	lsls	r3, r3, #20
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800157a:	12d2      	asrs	r2, r2, #11
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 800157c:	fb01 fc0c 	mul.w	ip, r1, ip
{
 8001580:	b410      	push	{r4}
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001582:	ea4f 2cac 	mov.w	ip, ip, asr #10
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001586:	4c1c      	ldr	r4, [pc, #112]	; (80015f8 <bme280_compensate_H_int32+0x9c>)
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001588:	ebc3 3080 	rsb	r0, r3, r0, lsl #14
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800158c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <bme280_compensate_H_int32+0xa0>)
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001592:	fb0c f202 	mul.w	r2, ip, r2
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 800159a:	f9b4 c000 	ldrsh.w	ip, [r4]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
			((int32_t)dig_H1)) >> 4));
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
	return (uint32_t)(v_x1_u32r>>12);
}
 800159e:	f85d 4b04 	ldr.w	r4, [sp], #4
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 80015a2:	1292      	asrs	r2, r2, #10
 80015a4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80015a8:	fb01 0013 	mls	r0, r1, r3, r0
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 80015ac:	fb0c f202 	mul.w	r2, ip, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80015b0:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 80015b4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 80015b8:	1392      	asrs	r2, r2, #14
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80015ba:	13c0      	asrs	r0, r0, #15
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80015bc:	fb02 f000 	mul.w	r0, r2, r0
			((int32_t)dig_H1)) >> 4));
 80015c0:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <bme280_compensate_H_int32+0xa4>)
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 80015c2:	13c3      	asrs	r3, r0, #15
			((int32_t)dig_H1)) >> 4));
 80015c4:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 80015c6:	fb03 f303 	mul.w	r3, r3, r3
 80015ca:	11db      	asrs	r3, r3, #7
 80015cc:	fb02 f303 	mul.w	r3, r2, r3
 80015d0:	eba0 1023 	sub.w	r0, r0, r3, asr #4
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 80015d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 80015d8:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 80015dc:	bfa8      	it	ge
 80015de:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
}
 80015e2:	1300      	asrs	r0, r0, #12
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000230 	.word	0x20000230
 80015ec:	20000202 	.word	0x20000202
 80015f0:	20000208 	.word	0x20000208
 80015f4:	20000204 	.word	0x20000204
 80015f8:	20000200 	.word	0x20000200
 80015fc:	20000206 	.word	0x20000206
 8001600:	200001fe 	.word	0x200001fe

08001604 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001604:	b510      	push	{r4, lr}
	if (BMEReadRaw() == 0)
 8001606:	f7ff fe73 	bl	80012f0 <BMEReadRaw>
 800160a:	bb58      	cbnz	r0, 8001664 <BME280_Measure+0x60>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <BME280_Measure+0xcc>)
 800160e:	6819      	ldr	r1, [r3, #0]
 8001610:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001614:	d12e      	bne.n	8001674 <BME280_Measure+0x70>
 8001616:	2300      	movs	r3, #0
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001618:	492e      	ldr	r1, [pc, #184]	; (80016d4 <BME280_Measure+0xd0>)
 800161a:	4a2f      	ldr	r2, [pc, #188]	; (80016d8 <BME280_Measure+0xd4>)
 800161c:	6808      	ldr	r0, [r1, #0]
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8001624:	d04d      	beq.n	80016c2 <BME280_Measure+0xbe>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001626:	f7ff feb3 	bl	8001390 <BME280_compensate_P_int64>
 800162a:	f7fe ff73 	bl	8000514 <__aeabi_ui2d>
 800162e:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <BME280_Measure+0xd8>)
 8001630:	2200      	movs	r2, #0
 8001632:	f7fe ffe9 	bl	8000608 <__aeabi_dmul>
 8001636:	f7ff fadf 	bl	8000bf8 <__aeabi_d2f>
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 800163a:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <BME280_Measure+0xdc>)
 800163c:	4a29      	ldr	r2, [pc, #164]	; (80016e4 <BME280_Measure+0xe0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6010      	str	r0, [r2, #0]
 8001642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001646:	d03e      	beq.n	80016c6 <BME280_Measure+0xc2>
		  else
		  {
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff87 	bl	800155c <bme280_compensate_H_int32>
 800164e:	f7fe ff61 	bl	8000514 <__aeabi_ui2d>
 8001652:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <BME280_Measure+0xe4>)
 8001654:	2200      	movs	r2, #0
 8001656:	f7fe ffd7 	bl	8000608 <__aeabi_dmul>
 800165a:	f7ff facd 	bl	8000bf8 <__aeabi_d2f>
 800165e:	4b23      	ldr	r3, [pc, #140]	; (80016ec <BME280_Measure+0xe8>)
 8001660:	6018      	str	r0, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001662:	bd10      	pop	{r4, pc}
		Temperature = Pressure = Humidity = 0;
 8001664:	4821      	ldr	r0, [pc, #132]	; (80016ec <BME280_Measure+0xe8>)
 8001666:	491f      	ldr	r1, [pc, #124]	; (80016e4 <BME280_Measure+0xe0>)
 8001668:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <BME280_Measure+0xd4>)
 800166a:	2300      	movs	r3, #0
 800166c:	6003      	str	r3, [r0, #0]
 800166e:	600b      	str	r3, [r1, #0]
 8001670:	6013      	str	r3, [r2, #0]
}
 8001672:	bd10      	pop	{r4, pc}
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001674:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <BME280_Measure+0xec>)
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001676:	4c1f      	ldr	r4, [pc, #124]	; (80016f4 <BME280_Measure+0xf0>)
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001678:	881a      	ldrh	r2, [r3, #0]
 800167a:	481f      	ldr	r0, [pc, #124]	; (80016f8 <BME280_Measure+0xf4>)
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800167c:	f9b4 c000 	ldrsh.w	ip, [r4]
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001680:	f9b0 0000 	ldrsh.w	r0, [r0]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001684:	ebc2 1321 	rsb	r3, r2, r1, asr #4
 8001688:	fb03 f303 	mul.w	r3, r3, r3
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800168c:	0052      	lsls	r2, r2, #1
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800168e:	131b      	asrs	r3, r3, #12
 8001690:	fb0c f303 	mul.w	r3, ip, r3
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001694:	ebc2 02e1 	rsb	r2, r2, r1, asr #3
 8001698:	fb00 f202 	mul.w	r2, r0, r2
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800169c:	139b      	asrs	r3, r3, #14
	t_fine = var1 + var2;
 800169e:	eb03 23e2 	add.w	r3, r3, r2, asr #11
	T = (t_fine * 5 + 128) >> 8;
 80016a2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
	t_fine = var1 + var2;
 80016a6:	4a15      	ldr	r2, [pc, #84]	; (80016fc <BME280_Measure+0xf8>)
	T = (t_fine * 5 + 128) >> 8;
 80016a8:	3080      	adds	r0, #128	; 0x80
	t_fine = var1 + var2;
 80016aa:	6013      	str	r3, [r2, #0]
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80016ac:	1200      	asrs	r0, r0, #8
 80016ae:	f7fe ff41 	bl	8000534 <__aeabi_i2d>
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <BME280_Measure+0xfc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	f7ff f8d1 	bl	800085c <__aeabi_ddiv>
 80016ba:	f7ff fa9d 	bl	8000bf8 <__aeabi_d2f>
 80016be:	4603      	mov	r3, r0
 80016c0:	e7aa      	b.n	8001618 <BME280_Measure+0x14>
		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 80016c2:	2000      	movs	r0, #0
 80016c4:	e7b9      	b.n	800163a <BME280_Measure+0x36>
		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <BME280_Measure+0xe8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
}
 80016cc:	bd10      	pop	{r4, pc}
 80016ce:	bf00      	nop
 80016d0:	2000022c 	.word	0x2000022c
 80016d4:	20000228 	.word	0x20000228
 80016d8:	20000318 	.word	0x20000318
 80016dc:	3f700000 	.word	0x3f700000
 80016e0:	20000224 	.word	0x20000224
 80016e4:	20000314 	.word	0x20000314
 80016e8:	3f500000 	.word	0x3f500000
 80016ec:	20000310 	.word	0x20000310
 80016f0:	2000021c 	.word	0x2000021c
 80016f4:	20000220 	.word	0x20000220
 80016f8:	2000021e 	.word	0x2000021e
 80016fc:	20000230 	.word	0x20000230
 8001700:	40590000 	.word	0x40590000

08001704 <GPS_Init>:
}
#endif

void GPS_Init()
{
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001704:	4902      	ldr	r1, [pc, #8]	; (8001710 <GPS_Init+0xc>)
 8001706:	4803      	ldr	r0, [pc, #12]	; (8001714 <GPS_Init+0x10>)
 8001708:	2201      	movs	r2, #1
 800170a:	f004 b895 	b.w	8005838 <HAL_UART_Receive_IT>
 800170e:	bf00      	nop
 8001710:	2000030c 	.word	0x2000030c
 8001714:	200004c0 	.word	0x200004c0

08001718 <GPS_parse>:
    sprintf(checkcalcstr,"%02X",calculated_check);
    return((checkcalcstr[0] == check[0])
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
}

void GPS_parse(char *GPSstrParse){
 8001718:	b530      	push	{r4, r5, lr}
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 800171a:	4968      	ldr	r1, [pc, #416]	; (80018bc <GPS_parse+0x1a4>)
void GPS_parse(char *GPSstrParse){
 800171c:	b089      	sub	sp, #36	; 0x24
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 800171e:	2206      	movs	r2, #6
void GPS_parse(char *GPSstrParse){
 8001720:	4604      	mov	r4, r0
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001722:	f004 fb8e 	bl	8005e42 <strncmp>
 8001726:	b380      	cbz	r0, 800178a <GPS_parse+0x72>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
    		return;
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001728:	4965      	ldr	r1, [pc, #404]	; (80018c0 <GPS_parse+0x1a8>)
 800172a:	2206      	movs	r2, #6
 800172c:	4620      	mov	r0, r4
 800172e:	f004 fb88 	bl	8005e42 <strncmp>
 8001732:	b188      	cbz	r0, 8001758 <GPS_parse+0x40>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001734:	4963      	ldr	r1, [pc, #396]	; (80018c4 <GPS_parse+0x1ac>)
 8001736:	2206      	movs	r2, #6
 8001738:	4620      	mov	r0, r4
 800173a:	f004 fb82 	bl	8005e42 <strncmp>
 800173e:	2800      	cmp	r0, #0
 8001740:	f000 8091 	beq.w	8001866 <GPS_parse+0x14e>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001744:	4960      	ldr	r1, [pc, #384]	; (80018c8 <GPS_parse+0x1b0>)
 8001746:	2206      	movs	r2, #6
 8001748:	4620      	mov	r0, r4
 800174a:	f004 fb7a 	bl	8005e42 <strncmp>
 800174e:	2800      	cmp	r0, #0
 8001750:	f000 809d 	beq.w	800188e <GPS_parse+0x176>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
            return;
    }
}
 8001754:	b009      	add	sp, #36	; 0x24
 8001756:	bd30      	pop	{r4, r5, pc}
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001758:	4a5c      	ldr	r2, [pc, #368]	; (80018cc <GPS_parse+0x1b4>)
 800175a:	495d      	ldr	r1, [pc, #372]	; (80018d0 <GPS_parse+0x1b8>)
 800175c:	1f10      	subs	r0, r2, #4
 800175e:	f1a2 0308 	sub.w	r3, r2, #8
 8001762:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8001766:	9303      	str	r3, [sp, #12]
 8001768:	f1a2 001f 	sub.w	r0, r2, #31
 800176c:	f1a2 032c 	sub.w	r3, r2, #44	; 0x2c
 8001770:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8001774:	f1a2 0320 	sub.w	r3, r2, #32
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	4620      	mov	r0, r4
 800177c:	f1a2 0328 	sub.w	r3, r2, #40	; 0x28
 8001780:	3a24      	subs	r2, #36	; 0x24
 8001782:	f004 faed 	bl	8005d60 <siscanf>
}
 8001786:	b009      	add	sp, #36	; 0x24
 8001788:	bd30      	pop	{r4, r5, pc}
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 800178a:	4d52      	ldr	r5, [pc, #328]	; (80018d4 <GPS_parse+0x1bc>)
 800178c:	4952      	ldr	r1, [pc, #328]	; (80018d8 <GPS_parse+0x1c0>)
 800178e:	f105 022c 	add.w	r2, r5, #44	; 0x2c
 8001792:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8001796:	e9cd 3206 	strd	r3, r2, [sp, #24]
 800179a:	f105 0224 	add.w	r2, r5, #36	; 0x24
 800179e:	f105 0320 	add.w	r3, r5, #32
 80017a2:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80017a6:	f105 021c 	add.w	r2, r5, #28
 80017aa:	f105 0319 	add.w	r3, r5, #25
 80017ae:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80017b2:	f105 020c 	add.w	r2, r5, #12
 80017b6:	f105 0318 	add.w	r3, r5, #24
 80017ba:	e9cd 3200 	strd	r3, r2, [sp]
 80017be:	4620      	mov	r0, r4
 80017c0:	f105 0310 	add.w	r3, r5, #16
 80017c4:	f105 0214 	add.w	r2, r5, #20
 80017c8:	f004 faca 	bl	8005d60 <siscanf>
 80017cc:	2800      	cmp	r0, #0
 80017ce:	ddc1      	ble.n	8001754 <GPS_parse+0x3c>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80017d0:	edd5 6a04 	vldr	s13, [r5, #16]

float GPS_nmea_to_dec(float deg_coord, char nsew) {
    int degree = (int)(deg_coord/100);
 80017d4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80018dc <GPS_parse+0x1c4>
    float minutes = deg_coord - degree*100;
    float dec_deg = minutes / 60;
 80017d8:	ed9f 6a41 	vldr	s12, [pc, #260]	; 80018e0 <GPS_parse+0x1c8>
    float decimal = degree + dec_deg;
    if (nsew == 'S' || nsew == 'W') { // return negative
 80017dc:	7e2a      	ldrb	r2, [r5, #24]
    int degree = (int)(deg_coord/100);
 80017de:	eec6 7a87 	vdiv.f32	s15, s13, s14
    float minutes = deg_coord - degree*100;
 80017e2:	2364      	movs	r3, #100	; 0x64
    if (nsew == 'S' || nsew == 'W') { // return negative
 80017e4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 80017e8:	2a53      	cmp	r2, #83	; 0x53
 80017ea:	7e6a      	ldrb	r2, [r5, #25]
 80017ec:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    int degree = (int)(deg_coord/100);
 80017f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    float minutes = deg_coord - degree*100;
 80017f4:	ee17 1a90 	vmov	r1, s15
 80017f8:	fb01 f303 	mul.w	r3, r1, r3
 80017fc:	ee07 3a10 	vmov	s14, r3
 8001800:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    float decimal = degree + dec_deg;
 8001804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float minutes = deg_coord - degree*100;
 8001808:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800180c:	f04f 0364 	mov.w	r3, #100	; 0x64
    float dec_deg = minutes / 60;
 8001810:	ee86 7a86 	vdiv.f32	s14, s13, s12
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001814:	edd5 6a03 	vldr	s13, [r5, #12]
    int degree = (int)(deg_coord/100);
 8001818:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80018dc <GPS_parse+0x1c4>
    float decimal = degree + dec_deg;
 800181c:	ee37 7a27 	vadd.f32	s14, s14, s15
    int degree = (int)(deg_coord/100);
 8001820:	eec6 7a86 	vdiv.f32	s15, s13, s12
        decimal *= -1;
 8001824:	bf08      	it	eq
 8001826:	eeb1 7a47 	vnegeq.f32	s14, s14
    int degree = (int)(deg_coord/100);
 800182a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800182e:	ed85 7a01 	vstr	s14, [r5, #4]
    float minutes = deg_coord - degree*100;
 8001832:	ee17 1a90 	vmov	r1, s15
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	ee07 3a10 	vmov	s14, r3
 800183e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    float dec_deg = minutes / 60;
 8001842:	ed9f 6a27 	vldr	s12, [pc, #156]	; 80018e0 <GPS_parse+0x1c8>
    float minutes = deg_coord - degree*100;
 8001846:	ee36 7ac7 	vsub.f32	s14, s13, s14
    float decimal = degree + dec_deg;
 800184a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float dec_deg = minutes / 60;
 800184e:	eec7 6a06 	vdiv.f32	s13, s14, s12
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001852:	2a53      	cmp	r2, #83	; 0x53
    float decimal = degree + dec_deg;
 8001854:	ee76 7aa7 	vadd.f32	s15, s13, s15
        decimal *= -1;
 8001858:	bf08      	it	eq
 800185a:	eef1 7a67 	vnegeq.f32	s15, s15
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800185e:	edc5 7a00 	vstr	s15, [r5]
}
 8001862:	b009      	add	sp, #36	; 0x24
 8001864:	bd30      	pop	{r4, r5, pc}
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001866:	4a1f      	ldr	r2, [pc, #124]	; (80018e4 <GPS_parse+0x1cc>)
 8001868:	491f      	ldr	r1, [pc, #124]	; (80018e8 <GPS_parse+0x1d0>)
 800186a:	f1a2 0323 	sub.w	r3, r2, #35	; 0x23
 800186e:	f1a2 0028 	sub.w	r0, r2, #40	; 0x28
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001878:	e9cd 0202 	strd	r0, r2, [sp, #8]
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	4620      	mov	r0, r4
 8001880:	f1a2 0324 	sub.w	r3, r2, #36	; 0x24
 8001884:	3a2c      	subs	r2, #44	; 0x2c
 8001886:	f004 fa6b 	bl	8005d60 <siscanf>
}
 800188a:	b009      	add	sp, #36	; 0x24
 800188c:	bd30      	pop	{r4, r5, pc}
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 800188e:	4a17      	ldr	r2, [pc, #92]	; (80018ec <GPS_parse+0x1d4>)
 8001890:	4917      	ldr	r1, [pc, #92]	; (80018f0 <GPS_parse+0x1d8>)
 8001892:	1f10      	subs	r0, r2, #4
 8001894:	1fd3      	subs	r3, r2, #7
 8001896:	e9cd 0204 	strd	r0, r2, [sp, #16]
 800189a:	9303      	str	r3, [sp, #12]
 800189c:	f1a2 0024 	sub.w	r0, r2, #36	; 0x24
 80018a0:	f1a2 0308 	sub.w	r3, r2, #8
 80018a4:	e9cd 3001 	strd	r3, r0, [sp, #4]
 80018a8:	f1a2 030c 	sub.w	r3, r2, #12
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	4620      	mov	r0, r4
 80018b0:	f1a2 0310 	sub.w	r3, r2, #16
 80018b4:	3a14      	subs	r2, #20
 80018b6:	f004 fa53 	bl	8005d60 <siscanf>
 80018ba:	e74b      	b.n	8001754 <GPS_parse+0x3c>
 80018bc:	080097ac 	.word	0x080097ac
 80018c0:	080097dc 	.word	0x080097dc
 80018c4:	08009804 	.word	0x08009804
 80018c8:	08009828 	.word	0x08009828
 80018cc:	2000026c 	.word	0x2000026c
 80018d0:	080097e4 	.word	0x080097e4
 80018d4:	20000234 	.word	0x20000234
 80018d8:	080097b4 	.word	0x080097b4
 80018dc:	42c80000 	.word	0x42c80000
 80018e0:	42700000 	.word	0x42700000
 80018e4:	20000270 	.word	0x20000270
 80018e8:	0800980c 	.word	0x0800980c
 80018ec:	20000288 	.word	0x20000288
 80018f0:	08009830 	.word	0x08009830

080018f4 <GPS_UART_CallBack>:
void GPS_UART_CallBack(){
 80018f4:	b570      	push	{r4, r5, r6, lr}
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80018f6:	4b29      	ldr	r3, [pc, #164]	; (800199c <GPS_UART_CallBack+0xa8>)
 80018f8:	4c29      	ldr	r4, [pc, #164]	; (80019a0 <GPS_UART_CallBack+0xac>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b0a      	cmp	r3, #10
void GPS_UART_CallBack(){
 80018fe:	b082      	sub	sp, #8
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001900:	d009      	beq.n	8001916 <GPS_UART_CallBack+0x22>
 8001902:	f994 1000 	ldrsb.w	r1, [r4]
 8001906:	7822      	ldrb	r2, [r4, #0]
 8001908:	2900      	cmp	r1, #0
 800190a:	db04      	blt.n	8001916 <GPS_UART_CallBack+0x22>
		rx_buffer[rx_index++] = rx_data;
 800190c:	4825      	ldr	r0, [pc, #148]	; (80019a4 <GPS_UART_CallBack+0xb0>)
 800190e:	1c51      	adds	r1, r2, #1
 8001910:	5483      	strb	r3, [r0, r2]
 8001912:	7021      	strb	r1, [r4, #0]
 8001914:	e031      	b.n	800197a <GPS_UART_CallBack+0x86>
    HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
 8001916:	4d23      	ldr	r5, [pc, #140]	; (80019a4 <GPS_UART_CallBack+0xb0>)
 8001918:	4628      	mov	r0, r5
 800191a:	f7fe fc61 	bl	80001e0 <strlen>
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	b282      	uxth	r2, r0
 8001924:	4629      	mov	r1, r5
 8001926:	4820      	ldr	r0, [pc, #128]	; (80019a8 <GPS_UART_CallBack+0xb4>)
 8001928:	f003 f8e8 	bl	8004afc <HAL_UART_Transmit>
    if(nmeastr[i] == '$')
 800192c:	782b      	ldrb	r3, [r5, #0]
 800192e:	2b24      	cmp	r3, #36	; 0x24
 8001930:	d11d      	bne.n	800196e <GPS_UART_CallBack+0x7a>
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001932:	786b      	ldrb	r3, [r5, #1]
 8001934:	b1db      	cbz	r3, 800196e <GPS_UART_CallBack+0x7a>
 8001936:	f105 0c01 	add.w	ip, r5, #1
        i++;
 800193a:	2001      	movs	r0, #1
    calculated_check=0;
 800193c:	2200      	movs	r2, #0
 800193e:	e007      	b.n	8001950 <GPS_UART_CallBack+0x5c>
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001940:	284b      	cmp	r0, #75	; 0x4b
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001942:	ea82 0203 	eor.w	r2, r2, r3
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001946:	d012      	beq.n	800196e <GPS_UART_CallBack+0x7a>
 8001948:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
        i++;
 800194c:	3001      	adds	r0, #1
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800194e:	b173      	cbz	r3, 800196e <GPS_UART_CallBack+0x7a>
 8001950:	2b2a      	cmp	r3, #42	; 0x2a
 8001952:	d1f5      	bne.n	8001940 <GPS_UART_CallBack+0x4c>
    if(i >= 75){
 8001954:	284b      	cmp	r0, #75	; 0x4b
 8001956:	d00a      	beq.n	800196e <GPS_UART_CallBack+0x7a>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8001958:	4428      	add	r0, r5
    sprintf(checkcalcstr,"%02X",calculated_check);
 800195a:	4914      	ldr	r1, [pc, #80]	; (80019ac <GPS_UART_CallBack+0xb8>)
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800195c:	7845      	ldrb	r5, [r0, #1]
        check[1] = nmeastr[i+2];
 800195e:	7886      	ldrb	r6, [r0, #2]
    sprintf(checkcalcstr,"%02X",calculated_check);
 8001960:	a801      	add	r0, sp, #4
 8001962:	f004 f9dd 	bl	8005d20 <siprintf>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001966:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800196a:	42ab      	cmp	r3, r5
 800196c:	d00d      	beq.n	800198a <GPS_UART_CallBack+0x96>
		rx_index = 0;
 800196e:	2100      	movs	r1, #0
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8001970:	480c      	ldr	r0, [pc, #48]	; (80019a4 <GPS_UART_CallBack+0xb0>)
		rx_index = 0;
 8001972:	7021      	strb	r1, [r4, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8001974:	2280      	movs	r2, #128	; 0x80
 8001976:	f003 ffb5 	bl	80058e4 <memset>
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <GPS_UART_CallBack+0xa8>)
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <GPS_UART_CallBack+0xbc>)
 800197e:	2201      	movs	r2, #1
}
 8001980:	b002      	add	sp, #8
 8001982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001986:	f003 bf57 	b.w	8005838 <HAL_UART_Receive_IT>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800198a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800198e:	42b3      	cmp	r3, r6
 8001990:	d1ed      	bne.n	800196e <GPS_UART_CallBack+0x7a>
			GPS_parse((char*) rx_buffer);
 8001992:	4804      	ldr	r0, [pc, #16]	; (80019a4 <GPS_UART_CallBack+0xb0>)
 8001994:	f7ff fec0 	bl	8001718 <GPS_parse>
 8001998:	e7e9      	b.n	800196e <GPS_UART_CallBack+0x7a>
 800199a:	bf00      	nop
 800199c:	2000030c 	.word	0x2000030c
 80019a0:	2000030d 	.word	0x2000030d
 80019a4:	2000028c 	.word	0x2000028c
 80019a8:	20000548 	.word	0x20000548
 80019ac:	080097a4 	.word	0x080097a4
 80019b0:	200004c0 	.word	0x200004c0

080019b4 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
float Temperature, Pressure, Humidity;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart == &huart1) GPS_UART_CallBack();
 80019b4:	4b02      	ldr	r3, [pc, #8]	; (80019c0 <HAL_UART_RxCpltCallback+0xc>)
 80019b6:	4283      	cmp	r3, r0
 80019b8:	d000      	beq.n	80019bc <HAL_UART_RxCpltCallback+0x8>
}
 80019ba:	4770      	bx	lr
	if(huart == &huart1) GPS_UART_CallBack();
 80019bc:	f7ff bf9a 	b.w	80018f4 <GPS_UART_CallBack>
 80019c0:	200004c0 	.word	0x200004c0

080019c4 <uart_control>:

void uart_control(void){
 80019c4:	b500      	push	{lr}
	char hello[] = "Hello, World!\r\n";
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <uart_control+0x24>)
 80019c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void uart_control(void){
 80019ca:	b085      	sub	sp, #20
	char hello[] = "Hello, World!\r\n";
 80019cc:	46ec      	mov	ip, sp
 80019ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_UART_Transmit(&huart2, (uint8_t*)hello, strlen(hello), HAL_MAX_DELAY);
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	220f      	movs	r2, #15
 80019d8:	4661      	mov	r1, ip
 80019da:	4804      	ldr	r0, [pc, #16]	; (80019ec <uart_control+0x28>)
 80019dc:	f003 f88e 	bl	8004afc <HAL_UART_Transmit>
}
 80019e0:	b005      	add	sp, #20
 80019e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80019e6:	bf00      	nop
 80019e8:	08009850 	.word	0x08009850
 80019ec:	20000548 	.word	0x20000548

080019f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f0:	b510      	push	{r4, lr}
 80019f2:	b0a6      	sub	sp, #152	; 0x98
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f4:	2224      	movs	r2, #36	; 0x24
 80019f6:	2100      	movs	r1, #0
 80019f8:	a807      	add	r0, sp, #28
 80019fa:	f003 ff73 	bl	80058e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019fe:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a00:	2258      	movs	r2, #88	; 0x58
 8001a02:	a810      	add	r0, sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a04:	e9cd 1100 	strd	r1, r1, [sp]
 8001a08:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001a0c:	9104      	str	r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a0e:	f003 ff69 	bl	80058e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a12:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a14:	2310      	movs	r3, #16
 8001a16:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a1e:	2202      	movs	r2, #2
 8001a20:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a24:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a26:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a2a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a2c:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a2e:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a30:	f001 fe1a 	bl	8003668 <HAL_RCC_OscConfig>
 8001a34:	b108      	cbz	r0, 8001a3a <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a36:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a42:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a48:	2200      	movs	r2, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a52:	f002 f8f3 	bl	8003c3c <HAL_RCC_ClockConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	b108      	cbz	r0, 8001a5e <SystemClock_Config+0x6e>
 8001a5a:	b672      	cpsid	i
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <SystemClock_Config+0x6c>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001a5e:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8001a88 <SystemClock_Config+0x98>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001a62:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <SystemClock_Config+0xa0>)
 8001a64:	9210      	str	r2, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a66:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001a68:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8001a6c:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001a70:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001a72:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a74:	f002 fa32 	bl	8003edc <HAL_RCCEx_PeriphCLKConfig>
 8001a78:	b108      	cbz	r0, 8001a7e <SystemClock_Config+0x8e>
 8001a7a:	b672      	cpsid	i
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <SystemClock_Config+0x8c>
}
 8001a7e:	b026      	add	sp, #152	; 0x98
 8001a80:	bd10      	pop	{r4, pc}
 8001a82:	bf00      	nop
 8001a84:	f3af 8000 	nop.w
 8001a88:	00000001 	.word	0x00000001
 8001a8c:	00000000 	.word	0x00000000
 8001a90:	00900063 	.word	0x00900063

08001a94 <main>:
{
 8001a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	2400      	movs	r4, #0
{
 8001a9a:	b0a7      	sub	sp, #156	; 0x9c
  HAL_Init();
 8001a9c:	f000 ff54 	bl	8002948 <HAL_Init>
  SystemClock_Config();
 8001aa0:	f7ff ffa6 	bl	80019f0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8001aa8:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aac:	4b90      	ldr	r3, [pc, #576]	; (8001cf0 <main+0x25c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aae:	9410      	str	r4, [sp, #64]	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab0:	6959      	ldr	r1, [r3, #20]
 8001ab2:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8001ab6:	6159      	str	r1, [r3, #20]
 8001ab8:	6959      	ldr	r1, [r3, #20]
 8001aba:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8001abe:	9105      	str	r1, [sp, #20]
 8001ac0:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ac2:	6959      	ldr	r1, [r3, #20]
 8001ac4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001ac8:	6159      	str	r1, [r3, #20]
 8001aca:	6959      	ldr	r1, [r3, #20]
 8001acc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001ad0:	9106      	str	r1, [sp, #24]
 8001ad2:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	6959      	ldr	r1, [r3, #20]
 8001ad6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001ada:	6159      	str	r1, [r3, #20]
 8001adc:	6959      	ldr	r1, [r3, #20]
 8001ade:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 8001ae2:	9107      	str	r1, [sp, #28]
 8001ae4:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	6959      	ldr	r1, [r3, #20]
 8001ae8:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8001aec:	6159      	str	r1, [r3, #20]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001af4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001af8:	2120      	movs	r1, #32
 8001afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afe:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b00:	f001 f90e 	bl	8002d20 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001b04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b08:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	4879      	ldr	r0, [pc, #484]	; (8001cf4 <main+0x260>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b10:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = B1_Pin;
 8001b12:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b16:	f001 f809 	bl	8002b2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b26:	2200      	movs	r2, #0
 8001b28:	2300      	movs	r3, #0
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b2a:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b2c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b30:	f000 fffc 	bl	8002b2c <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8001b34:	4870      	ldr	r0, [pc, #448]	; (8001cf8 <main+0x264>)
  huart2.Init.BaudRate = 115200;
 8001b36:	4a71      	ldr	r2, [pc, #452]	; (8001cfc <main+0x268>)
 8001b38:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b3c:	250c      	movs	r5, #12
  huart2.Init.BaudRate = 115200;
 8001b3e:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b42:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b46:	e9c0 4504 	strd	r4, r5, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b4a:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b4e:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b52:	f003 fcab 	bl	80054ac <HAL_UART_Init>
 8001b56:	b108      	cbz	r0, 8001b5c <main+0xc8>
 8001b58:	b672      	cpsid	i
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <main+0xc6>
  hi2c1.Instance = I2C1;
 8001b5c:	4c68      	ldr	r4, [pc, #416]	; (8001d00 <main+0x26c>)
  hi2c1.Init.Timing = 0x2000090E;
 8001b5e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8001d28 <main+0x294>
 8001b62:	4b68      	ldr	r3, [pc, #416]	; (8001d04 <main+0x270>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b64:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b66:	2601      	movs	r6, #1
 8001b68:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8001b6c:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b70:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b74:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 8001b76:	e9c4 9300 	strd	r9, r3, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b7a:	f001 fa45 	bl	8003008 <HAL_I2C_Init>
 8001b7e:	b108      	cbz	r0, 8001b84 <main+0xf0>
 8001b80:	b672      	cpsid	i
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <main+0xee>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b84:	4601      	mov	r1, r0
 8001b86:	4620      	mov	r0, r4
 8001b88:	f001 fd18 	bl	80035bc <HAL_I2CEx_ConfigAnalogFilter>
 8001b8c:	b108      	cbz	r0, 8001b92 <main+0xfe>
 8001b8e:	b672      	cpsid	i
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <main+0xfc>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b92:	4601      	mov	r1, r0
 8001b94:	4620      	mov	r0, r4
 8001b96:	f001 fd3b 	bl	8003610 <HAL_I2CEx_ConfigDigitalFilter>
 8001b9a:	b9f8      	cbnz	r0, 8001bdc <main+0x148>
  hspi2.Instance = SPI2;
 8001b9c:	4b5a      	ldr	r3, [pc, #360]	; (8001d08 <main+0x274>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b9e:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8001d2c <main+0x298>
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ba2:	6098      	str	r0, [r3, #8]
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ba8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bac:	e9c3 c200 	strd	ip, r2, [r3]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bb0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bb4:	60da      	str	r2, [r3, #12]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001bb6:	f44f 7800 	mov.w	r8, #512	; 0x200
 8001bba:	2230      	movs	r2, #48	; 0x30
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bbc:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc0:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001bc4:	e9c3 8206 	strd	r8, r2, [r3, #24]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc8:	6298      	str	r0, [r3, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bca:	6318      	str	r0, [r3, #48]	; 0x30
  hspi2.Init.CRCPolynomial = 7;
 8001bcc:	2207      	movs	r2, #7
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bce:	4618      	mov	r0, r3
  hspi2.Init.CRCPolynomial = 7;
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bd2:	f002 fad9 	bl	8004188 <HAL_SPI_Init>
 8001bd6:	b118      	cbz	r0, 8001be0 <main+0x14c>
 8001bd8:	b672      	cpsid	i
  while (1)
 8001bda:	e7fe      	b.n	8001bda <main+0x146>
 8001bdc:	b672      	cpsid	i
 8001bde:	e7fe      	b.n	8001bde <main+0x14a>
  htim16.Instance = TIM16;
 8001be0:	4b4a      	ldr	r3, [pc, #296]	; (8001d0c <main+0x278>)
  htim16.Init.Prescaler = 8400-1;
 8001be2:	4f4b      	ldr	r7, [pc, #300]	; (8001d10 <main+0x27c>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be4:	6098      	str	r0, [r3, #8]
  htim16.Init.Prescaler = 8400-1;
 8001be6:	f242 02cf 	movw	r2, #8399	; 0x20cf
  htim16.Init.RepetitionCounter = 0;
 8001bea:	e9c3 0004 	strd	r0, r0, [r3, #16]
  htim16.Init.Prescaler = 8400-1;
 8001bee:	e9c3 7200 	strd	r7, r2, [r3]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf2:	6198      	str	r0, [r3, #24]
  htim16.Init.Period = 40-1;
 8001bf4:	2227      	movs	r2, #39	; 0x27
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001bf6:	4618      	mov	r0, r3
  htim16.Init.Period = 40-1;
 8001bf8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001bfa:	f002 fbd3 	bl	80043a4 <HAL_TIM_Base_Init>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	b108      	cbz	r0, 8001c06 <main+0x172>
 8001c02:	b672      	cpsid	i
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <main+0x170>
  huart1.Instance = USART1;
 8001c06:	4843      	ldr	r0, [pc, #268]	; (8001d14 <main+0x280>)
  huart1.Init.BaudRate = 9600;
 8001c08:	4c43      	ldr	r4, [pc, #268]	; (8001d18 <main+0x284>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c0a:	6102      	str	r2, [r0, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c0c:	e9c0 2202 	strd	r2, r2, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c10:	e9c0 2206 	strd	r2, r2, [r0, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c14:	e9c0 2208 	strd	r2, r2, [r0, #32]
  huart1.Init.BaudRate = 9600;
 8001c18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c1c:	e9c0 4200 	strd	r4, r2, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c20:	6145      	str	r5, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c22:	f003 fc43 	bl	80054ac <HAL_UART_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b108      	cbz	r0, 8001c2e <main+0x19a>
 8001c2a:	b672      	cpsid	i
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <main+0x198>
  hi2c2.Instance = I2C2;
 8001c2e:	4c3b      	ldr	r4, [pc, #236]	; (8001d1c <main+0x288>)
  hi2c2.Init.Timing = 0x0000020B;
 8001c30:	493b      	ldr	r1, [pc, #236]	; (8001d20 <main+0x28c>)
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c32:	6223      	str	r3, [r4, #32]
  hi2c2.Init.Timing = 0x0000020B;
 8001c34:	f240 220b 	movw	r2, #523	; 0x20b
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c38:	4620      	mov	r0, r4
  hi2c2.Init.Timing = 0x0000020B;
 8001c3a:	e9c4 1200 	strd	r1, r2, [r4]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c3e:	e9c4 3602 	strd	r3, r6, [r4, #8]
  hi2c2.Init.OwnAddress2 = 0;
 8001c42:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c46:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c4a:	f001 f9dd 	bl	8003008 <HAL_I2C_Init>
 8001c4e:	4601      	mov	r1, r0
 8001c50:	b108      	cbz	r0, 8001c56 <main+0x1c2>
 8001c52:	b672      	cpsid	i
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <main+0x1c0>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c56:	4620      	mov	r0, r4
 8001c58:	f001 fcb0 	bl	80035bc <HAL_I2CEx_ConfigAnalogFilter>
 8001c5c:	4601      	mov	r1, r0
 8001c5e:	b108      	cbz	r0, 8001c64 <main+0x1d0>
 8001c60:	b672      	cpsid	i
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <main+0x1ce>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c64:	4620      	mov	r0, r4
 8001c66:	f001 fcd3 	bl	8003610 <HAL_I2CEx_ConfigDigitalFilter>
 8001c6a:	b108      	cbz	r0, 8001c70 <main+0x1dc>
 8001c6c:	b672      	cpsid	i
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <main+0x1da>
  htim2.Instance = TIM2;
 8001c70:	4c2c      	ldr	r4, [pc, #176]	; (8001d24 <main+0x290>)
 8001c72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c76:	6022      	str	r2, [r4, #0]
  htim2.Init.Prescaler = 83;
 8001c78:	2253      	movs	r2, #83	; 0x53
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7a:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 83;
 8001c7c:	6062      	str	r2, [r4, #4]
  htim2.Init.Period = 17599;
 8001c7e:	f244 42bf 	movw	r2, #17599	; 0x44bf
 8001c82:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c86:	4620      	mov	r0, r4
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c88:	2280      	movs	r2, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c8e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001c92:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8001c96:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 8001c9a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9e:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ca0:	61a2      	str	r2, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ca2:	f002 fc15 	bl	80044d0 <HAL_TIM_PWM_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	b108      	cbz	r0, 8001cae <main+0x21a>
 8001caa:	b672      	cpsid	i
  while (1)
 8001cac:	e7fe      	b.n	8001cac <main+0x218>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cae:	a909      	add	r1, sp, #36	; 0x24
 8001cb0:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb2:	9309      	str	r3, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb4:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cb6:	f002 fecd 	bl	8004a54 <HAL_TIMEx_MasterConfigSynchronization>
 8001cba:	b108      	cbz	r0, 8001cc0 <main+0x22c>
 8001cbc:	b672      	cpsid	i
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <main+0x22a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cc0:	2260      	movs	r2, #96	; 0x60
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc8:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cca:	4602      	mov	r2, r0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ccc:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cce:	a90c      	add	r1, sp, #48	; 0x30
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f002 fd7f 	bl	80047d4 <HAL_TIM_PWM_ConfigChannel>
 8001cd6:	b108      	cbz	r0, 8001cdc <main+0x248>
 8001cd8:	b672      	cpsid	i
  while (1)
 8001cda:	e7fe      	b.n	8001cda <main+0x246>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cdc:	2204      	movs	r2, #4
 8001cde:	a90c      	add	r1, sp, #48	; 0x30
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f002 fd77 	bl	80047d4 <HAL_TIM_PWM_ConfigChannel>
 8001ce6:	4605      	mov	r5, r0
 8001ce8:	b310      	cbz	r0, 8001d30 <main+0x29c>
 8001cea:	b672      	cpsid	i
  while (1)
 8001cec:	e7fe      	b.n	8001cec <main+0x258>
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	48000800 	.word	0x48000800
 8001cf8:	20000548 	.word	0x20000548
 8001cfc:	40004400 	.word	0x40004400
 8001d00:	2000031c 	.word	0x2000031c
 8001d04:	2000090e 	.word	0x2000090e
 8001d08:	200003c4 	.word	0x200003c4
 8001d0c:	20000428 	.word	0x20000428
 8001d10:	40014400 	.word	0x40014400
 8001d14:	200004c0 	.word	0x200004c0
 8001d18:	40013800 	.word	0x40013800
 8001d1c:	20000370 	.word	0x20000370
 8001d20:	40005800 	.word	0x40005800
 8001d24:	20000474 	.word	0x20000474
 8001d28:	40005400 	.word	0x40005400
 8001d2c:	40003800 	.word	0x40003800
  HAL_TIM_MspPostInit(&htim2);
 8001d30:	4620      	mov	r0, r4
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001d32:	2604      	movs	r6, #4
  HAL_TIM_MspPostInit(&htim2);
 8001d34:	f000 fca4 	bl	8002680 <HAL_TIM_MspPostInit>
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e9cd 5600 	strd	r5, r6, [sp]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	2105      	movs	r1, #5
 8001d42:	2002      	movs	r0, #2
 8001d44:	f7ff fa36 	bl	80011b4 <BME280_Config>
  HAL_GPIO_WritePin(GPS_GPIO_Port, GPS_Pin, GPIO_PIN_SET);
 8001d48:	48d5      	ldr	r0, [pc, #852]	; (80020a0 <main+0x60c>)
 8001d4a:	f8df 9370 	ldr.w	r9, [pc, #880]	; 80020bc <main+0x628>
 8001d4e:	f8df 8370 	ldr.w	r8, [pc, #880]	; 80020c0 <main+0x62c>
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8001d52:	4fd4      	ldr	r7, [pc, #848]	; (80020a4 <main+0x610>)
	  motor_speed(&motor ,50);
 8001d54:	f8df a354 	ldr.w	sl, [pc, #852]	; 80020ac <main+0x618>
  HAL_GPIO_WritePin(GPS_GPIO_Port, GPS_Pin, GPIO_PIN_SET);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	2105      	movs	r1, #5
 8001d5c:	f000 ffe0 	bl	8002d20 <HAL_GPIO_WritePin>
  GPS_Init();
 8001d60:	f7ff fcd0 	bl	8001704 <GPS_Init>
  uart_control();
 8001d64:	f7ff fe2e 	bl	80019c4 <uart_control>
  init_servo(&servo1, GPIOA, GPIO_PIN_1, &htim2, TIM_CHANNEL_2,50);
 8001d68:	2332      	movs	r3, #50	; 0x32
 8001d6a:	48cf      	ldr	r0, [pc, #828]	; (80020a8 <main+0x614>)
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	9600      	str	r6, [sp, #0]
 8001d70:	4623      	mov	r3, r4
 8001d72:	2202      	movs	r2, #2
 8001d74:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001d78:	f000 f9e4 	bl	8002144 <init_servo>
  init_motor(&motor, GPIOA, GPIO_PIN_0, &htim2, TIM_CHANNEL_1,180);
 8001d7c:	23b4      	movs	r3, #180	; 0xb4
 8001d7e:	e9cd 5300 	strd	r5, r3, [sp]
 8001d82:	48ca      	ldr	r0, [pc, #808]	; (80020ac <main+0x618>)
    int humidity_int = (int)(humidity * 10.0);
 8001d84:	4dca      	ldr	r5, [pc, #808]	; (80020b0 <main+0x61c>)
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d86:	4ecb      	ldr	r6, [pc, #812]	; (80020b4 <main+0x620>)
  init_motor(&motor, GPIOA, GPIO_PIN_0, &htim2, TIM_CHANNEL_1,180);
 8001d88:	4623      	mov	r3, r4
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001d90:	f000 fa40 	bl	8002214 <init_motor>
    int humidity_int = (int)(humidity * 10.0);
 8001d94:	2400      	movs	r4, #0
	  BME280_Measure();
 8001d96:	f7ff fc35 	bl	8001604 <BME280_Measure>
    int humidity_int = (int)(humidity * 10.0);
 8001d9a:	f8d9 0000 	ldr.w	r0, [r9]
 8001d9e:	f7fe fbdb 	bl	8000558 <__aeabi_f2d>
 8001da2:	4622      	mov	r2, r4
 8001da4:	462b      	mov	r3, r5
 8001da6:	f7fe fc2f 	bl	8000608 <__aeabi_dmul>
 8001daa:	f7fe fedd 	bl	8000b68 <__aeabi_d2iz>
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8001dae:	9002      	str	r0, [sp, #8]
    int temperature_int = (int)(temperature * 10.0);  // Multiply by 10 to keep one decimal place
 8001db0:	f8d8 0000 	ldr.w	r0, [r8]
 8001db4:	f7fe fbd0 	bl	8000558 <__aeabi_f2d>
 8001db8:	4622      	mov	r2, r4
 8001dba:	462b      	mov	r3, r5
 8001dbc:	f7fe fc24 	bl	8000608 <__aeabi_dmul>
 8001dc0:	f7fe fed2 	bl	8000b68 <__aeabi_d2iz>
    int pressure_int  = (int)(pressure * 10.0);
 8001dc4:	4bbc      	ldr	r3, [pc, #752]	; (80020b8 <main+0x624>)
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8001dc6:	9001      	str	r0, [sp, #4]
    int pressure_int  = (int)(pressure * 10.0);
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	f7fe fbc5 	bl	8000558 <__aeabi_f2d>
 8001dce:	4622      	mov	r2, r4
 8001dd0:	462b      	mov	r3, r5
 8001dd2:	f7fe fc19 	bl	8000608 <__aeabi_dmul>
 8001dd6:	f7fe fec7 	bl	8000b68 <__aeabi_d2iz>
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8001dda:	2300      	movs	r3, #0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4639      	mov	r1, r7
 8001de0:	9000      	str	r0, [sp, #0]
 8001de2:	a80c      	add	r0, sp, #48	; 0x30
 8001de4:	f003 ff9c 	bl	8005d20 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001de8:	a80c      	add	r0, sp, #48	; 0x30
 8001dea:	f7fe f9f9 	bl	80001e0 <strlen>
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295
 8001df2:	b282      	uxth	r2, r0
 8001df4:	a90c      	add	r1, sp, #48	; 0x30
 8001df6:	4630      	mov	r0, r6
 8001df8:	f002 fe80 	bl	8004afc <HAL_UART_Transmit>
	  for (int s = 5; s <=110; s++){
 8001dfc:	f04f 0b05 	mov.w	fp, #5
		  servo_angle(&servo1 , s);
 8001e00:	4659      	mov	r1, fp
 8001e02:	48a9      	ldr	r0, [pc, #676]	; (80020a8 <main+0x614>)
 8001e04:	f000 fa78 	bl	80022f8 <servo_angle>
    int humidity_int = (int)(humidity * 10.0);
 8001e08:	f8d9 0000 	ldr.w	r0, [r9]
 8001e0c:	f7fe fba4 	bl	8000558 <__aeabi_f2d>
 8001e10:	4622      	mov	r2, r4
 8001e12:	462b      	mov	r3, r5
 8001e14:	f7fe fbf8 	bl	8000608 <__aeabi_dmul>
 8001e18:	f7fe fea6 	bl	8000b68 <__aeabi_d2iz>
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8001e1c:	9002      	str	r0, [sp, #8]
    int temperature_int = (int)(temperature * 10.0);  // Multiply by 10 to keep one decimal place
 8001e1e:	f8d8 0000 	ldr.w	r0, [r8]
 8001e22:	f7fe fb99 	bl	8000558 <__aeabi_f2d>
 8001e26:	4622      	mov	r2, r4
 8001e28:	462b      	mov	r3, r5
 8001e2a:	f7fe fbed 	bl	8000608 <__aeabi_dmul>
 8001e2e:	f7fe fe9b 	bl	8000b68 <__aeabi_d2iz>
    int pressure_int  = (int)(pressure * 10.0);
 8001e32:	4ba1      	ldr	r3, [pc, #644]	; (80020b8 <main+0x624>)
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8001e34:	9001      	str	r0, [sp, #4]
    int pressure_int  = (int)(pressure * 10.0);
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	f7fe fb8e 	bl	8000558 <__aeabi_f2d>
 8001e3c:	4622      	mov	r2, r4
 8001e3e:	462b      	mov	r3, r5
 8001e40:	f7fe fbe2 	bl	8000608 <__aeabi_dmul>
 8001e44:	f7fe fe90 	bl	8000b68 <__aeabi_d2iz>
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8001e48:	465b      	mov	r3, fp
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4639      	mov	r1, r7
 8001e4e:	9000      	str	r0, [sp, #0]
 8001e50:	a80c      	add	r0, sp, #48	; 0x30
 8001e52:	f003 ff65 	bl	8005d20 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001e56:	a80c      	add	r0, sp, #48	; 0x30
 8001e58:	f7fe f9c2 	bl	80001e0 <strlen>
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e60:	b282      	uxth	r2, r0
 8001e62:	a90c      	add	r1, sp, #48	; 0x30
 8001e64:	4630      	mov	r0, r6
 8001e66:	f002 fe49 	bl	8004afc <HAL_UART_Transmit>
	  for (int s = 5; s <=110; s++){
 8001e6a:	f10b 0b01 	add.w	fp, fp, #1
		  HAL_Delay(5);
 8001e6e:	2005      	movs	r0, #5
 8001e70:	f000 fd8e 	bl	8002990 <HAL_Delay>
	  for (int s = 5; s <=110; s++){
 8001e74:	f1bb 0f6f 	cmp.w	fp, #111	; 0x6f
 8001e78:	d1c2      	bne.n	8001e00 <main+0x36c>
	  motor_speed(&motor ,50);
 8001e7a:	2132      	movs	r1, #50	; 0x32
 8001e7c:	4650      	mov	r0, sl
 8001e7e:	f000 fa9f 	bl	80023c0 <motor_speed>
	  HAL_Delay(500);
 8001e82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e86:	f000 fd83 	bl	8002990 <HAL_Delay>
	  for (int i = 50; i <= 70; i++) {
 8001e8a:	f04f 0b32 	mov.w	fp, #50	; 0x32
	      motor_speed(&motor, i);
 8001e8e:	4659      	mov	r1, fp
 8001e90:	4650      	mov	r0, sl
 8001e92:	f000 fa95 	bl	80023c0 <motor_speed>
    int humidity_int = (int)(humidity * 10.0);
 8001e96:	f8d9 0000 	ldr.w	r0, [r9]
 8001e9a:	f7fe fb5d 	bl	8000558 <__aeabi_f2d>
 8001e9e:	4622      	mov	r2, r4
 8001ea0:	462b      	mov	r3, r5
 8001ea2:	f7fe fbb1 	bl	8000608 <__aeabi_dmul>
 8001ea6:	f7fe fe5f 	bl	8000b68 <__aeabi_d2iz>
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8001eaa:	9002      	str	r0, [sp, #8]
    int temperature_int = (int)(temperature * 10.0);  // Multiply by 10 to keep one decimal place
 8001eac:	f8d8 0000 	ldr.w	r0, [r8]
 8001eb0:	f7fe fb52 	bl	8000558 <__aeabi_f2d>
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	462b      	mov	r3, r5
 8001eb8:	f7fe fba6 	bl	8000608 <__aeabi_dmul>
 8001ebc:	f7fe fe54 	bl	8000b68 <__aeabi_d2iz>
    int pressure_int  = (int)(pressure * 10.0);
 8001ec0:	4b7d      	ldr	r3, [pc, #500]	; (80020b8 <main+0x624>)
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8001ec2:	9001      	str	r0, [sp, #4]
    int pressure_int  = (int)(pressure * 10.0);
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	f7fe fb47 	bl	8000558 <__aeabi_f2d>
 8001eca:	4622      	mov	r2, r4
 8001ecc:	462b      	mov	r3, r5
 8001ece:	f7fe fb9b 	bl	8000608 <__aeabi_dmul>
 8001ed2:	f7fe fe49 	bl	8000b68 <__aeabi_d2iz>
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8001ed6:	465a      	mov	r2, fp
 8001ed8:	236e      	movs	r3, #110	; 0x6e
 8001eda:	4639      	mov	r1, r7
 8001edc:	9000      	str	r0, [sp, #0]
 8001ede:	a80c      	add	r0, sp, #48	; 0x30
 8001ee0:	f003 ff1e 	bl	8005d20 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001ee4:	a80c      	add	r0, sp, #48	; 0x30
 8001ee6:	f7fe f97b 	bl	80001e0 <strlen>
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	b282      	uxth	r2, r0
 8001ef0:	a90c      	add	r1, sp, #48	; 0x30
 8001ef2:	4630      	mov	r0, r6
 8001ef4:	f002 fe02 	bl	8004afc <HAL_UART_Transmit>
	  for (int i = 50; i <= 70; i++) {
 8001ef8:	f10b 0b01 	add.w	fp, fp, #1
	      HAL_Delay(200); // 100 milisaniye bekleyebilirsiniz
 8001efc:	20c8      	movs	r0, #200	; 0xc8
 8001efe:	f000 fd47 	bl	8002990 <HAL_Delay>
	  for (int i = 50; i <= 70; i++) {
 8001f02:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8001f06:	d1c2      	bne.n	8001e8e <main+0x3fa>
	  for (int s = 110; s >=5; s--){
 8001f08:	f04f 0b6e 	mov.w	fp, #110	; 0x6e
	  		  servo_angle(&servo1 , s);
 8001f0c:	4659      	mov	r1, fp
 8001f0e:	4866      	ldr	r0, [pc, #408]	; (80020a8 <main+0x614>)
 8001f10:	f000 f9f2 	bl	80022f8 <servo_angle>
    int humidity_int = (int)(humidity * 10.0);
 8001f14:	f8d9 0000 	ldr.w	r0, [r9]
 8001f18:	f7fe fb1e 	bl	8000558 <__aeabi_f2d>
 8001f1c:	4622      	mov	r2, r4
 8001f1e:	462b      	mov	r3, r5
 8001f20:	f7fe fb72 	bl	8000608 <__aeabi_dmul>
 8001f24:	f7fe fe20 	bl	8000b68 <__aeabi_d2iz>
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8001f28:	9002      	str	r0, [sp, #8]
    int temperature_int = (int)(temperature * 10.0);  // Multiply by 10 to keep one decimal place
 8001f2a:	f8d8 0000 	ldr.w	r0, [r8]
 8001f2e:	f7fe fb13 	bl	8000558 <__aeabi_f2d>
 8001f32:	4622      	mov	r2, r4
 8001f34:	462b      	mov	r3, r5
 8001f36:	f7fe fb67 	bl	8000608 <__aeabi_dmul>
 8001f3a:	f7fe fe15 	bl	8000b68 <__aeabi_d2iz>
    int pressure_int  = (int)(pressure * 10.0);
 8001f3e:	4b5e      	ldr	r3, [pc, #376]	; (80020b8 <main+0x624>)
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8001f40:	9001      	str	r0, [sp, #4]
    int pressure_int  = (int)(pressure * 10.0);
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	f7fe fb08 	bl	8000558 <__aeabi_f2d>
 8001f48:	4622      	mov	r2, r4
 8001f4a:	462b      	mov	r3, r5
 8001f4c:	f7fe fb5c 	bl	8000608 <__aeabi_dmul>
 8001f50:	f7fe fe0a 	bl	8000b68 <__aeabi_d2iz>
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8001f54:	465b      	mov	r3, fp
 8001f56:	2246      	movs	r2, #70	; 0x46
 8001f58:	4639      	mov	r1, r7
 8001f5a:	9000      	str	r0, [sp, #0]
 8001f5c:	a80c      	add	r0, sp, #48	; 0x30
 8001f5e:	f003 fedf 	bl	8005d20 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001f62:	a80c      	add	r0, sp, #48	; 0x30
 8001f64:	f7fe f93c 	bl	80001e0 <strlen>
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6c:	b282      	uxth	r2, r0
 8001f6e:	a90c      	add	r1, sp, #48	; 0x30
 8001f70:	4630      	mov	r0, r6
 8001f72:	f002 fdc3 	bl	8004afc <HAL_UART_Transmit>
	  for (int s = 110; s >=5; s--){
 8001f76:	f10b 3bff 	add.w	fp, fp, #4294967295
	  		  HAL_Delay(5);
 8001f7a:	2005      	movs	r0, #5
 8001f7c:	f000 fd08 	bl	8002990 <HAL_Delay>
	  for (int s = 110; s >=5; s--){
 8001f80:	f1bb 0f04 	cmp.w	fp, #4
 8001f84:	d1c2      	bne.n	8001f0c <main+0x478>
	  HAL_Delay(500);
 8001f86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f8a:	f000 fd01 	bl	8002990 <HAL_Delay>
	  motor_speed(&motor ,50);
 8001f8e:	2132      	movs	r1, #50	; 0x32
 8001f90:	4650      	mov	r0, sl
 8001f92:	f000 fa15 	bl	80023c0 <motor_speed>
	  HAL_Delay(500);
 8001f96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f9a:	f000 fcf9 	bl	8002990 <HAL_Delay>
	  for (int i = 50; i >= 20; i--){
 8001f9e:	f04f 0b32 	mov.w	fp, #50	; 0x32
		  motor_speed(&motor, i);
 8001fa2:	4659      	mov	r1, fp
 8001fa4:	4650      	mov	r0, sl
 8001fa6:	f000 fa0b 	bl	80023c0 <motor_speed>
    int humidity_int = (int)(humidity * 10.0);
 8001faa:	f8d9 0000 	ldr.w	r0, [r9]
 8001fae:	f7fe fad3 	bl	8000558 <__aeabi_f2d>
 8001fb2:	4622      	mov	r2, r4
 8001fb4:	462b      	mov	r3, r5
 8001fb6:	f7fe fb27 	bl	8000608 <__aeabi_dmul>
 8001fba:	f7fe fdd5 	bl	8000b68 <__aeabi_d2iz>
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8001fbe:	9002      	str	r0, [sp, #8]
    int temperature_int = (int)(temperature * 10.0);  // Multiply by 10 to keep one decimal place
 8001fc0:	f8d8 0000 	ldr.w	r0, [r8]
 8001fc4:	f7fe fac8 	bl	8000558 <__aeabi_f2d>
 8001fc8:	4622      	mov	r2, r4
 8001fca:	462b      	mov	r3, r5
 8001fcc:	f7fe fb1c 	bl	8000608 <__aeabi_dmul>
 8001fd0:	f7fe fdca 	bl	8000b68 <__aeabi_d2iz>
    int pressure_int  = (int)(pressure * 10.0);
 8001fd4:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <main+0x624>)
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8001fd6:	9001      	str	r0, [sp, #4]
    int pressure_int  = (int)(pressure * 10.0);
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	f7fe fabd 	bl	8000558 <__aeabi_f2d>
 8001fde:	4622      	mov	r2, r4
 8001fe0:	462b      	mov	r3, r5
 8001fe2:	f7fe fb11 	bl	8000608 <__aeabi_dmul>
 8001fe6:	f7fe fdbf 	bl	8000b68 <__aeabi_d2iz>
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8001fea:	465a      	mov	r2, fp
 8001fec:	2305      	movs	r3, #5
 8001fee:	4639      	mov	r1, r7
 8001ff0:	9000      	str	r0, [sp, #0]
 8001ff2:	a80c      	add	r0, sp, #48	; 0x30
 8001ff4:	f003 fe94 	bl	8005d20 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001ff8:	a80c      	add	r0, sp, #48	; 0x30
 8001ffa:	f7fe f8f1 	bl	80001e0 <strlen>
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8002002:	b282      	uxth	r2, r0
 8002004:	a90c      	add	r1, sp, #48	; 0x30
 8002006:	4630      	mov	r0, r6
 8002008:	f002 fd78 	bl	8004afc <HAL_UART_Transmit>
	  for (int i = 50; i >= 20; i--){
 800200c:	f10b 3bff 	add.w	fp, fp, #4294967295
		  HAL_Delay(200);
 8002010:	20c8      	movs	r0, #200	; 0xc8
 8002012:	f000 fcbd 	bl	8002990 <HAL_Delay>
	  for (int i = 50; i >= 20; i--){
 8002016:	f1bb 0f13 	cmp.w	fp, #19
 800201a:	d1c2      	bne.n	8001fa2 <main+0x50e>
	  for (int s = 5; s <=110; s++){
 800201c:	f04f 0b05 	mov.w	fp, #5
	  		  servo_angle(&servo1 , s);
 8002020:	4659      	mov	r1, fp
 8002022:	4821      	ldr	r0, [pc, #132]	; (80020a8 <main+0x614>)
 8002024:	f000 f968 	bl	80022f8 <servo_angle>
    int humidity_int = (int)(humidity * 10.0);
 8002028:	f8d9 0000 	ldr.w	r0, [r9]
 800202c:	f7fe fa94 	bl	8000558 <__aeabi_f2d>
 8002030:	4622      	mov	r2, r4
 8002032:	462b      	mov	r3, r5
 8002034:	f7fe fae8 	bl	8000608 <__aeabi_dmul>
 8002038:	f7fe fd96 	bl	8000b68 <__aeabi_d2iz>
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 800203c:	9002      	str	r0, [sp, #8]
    int temperature_int = (int)(temperature * 10.0);  // Multiply by 10 to keep one decimal place
 800203e:	f8d8 0000 	ldr.w	r0, [r8]
 8002042:	f7fe fa89 	bl	8000558 <__aeabi_f2d>
 8002046:	4622      	mov	r2, r4
 8002048:	462b      	mov	r3, r5
 800204a:	f7fe fadd 	bl	8000608 <__aeabi_dmul>
 800204e:	f7fe fd8b 	bl	8000b68 <__aeabi_d2iz>
    int pressure_int  = (int)(pressure * 10.0);
 8002052:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <main+0x624>)
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8002054:	9001      	str	r0, [sp, #4]
    int pressure_int  = (int)(pressure * 10.0);
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	f7fe fa7e 	bl	8000558 <__aeabi_f2d>
 800205c:	4622      	mov	r2, r4
 800205e:	462b      	mov	r3, r5
 8002060:	f7fe fad2 	bl	8000608 <__aeabi_dmul>
 8002064:	f7fe fd80 	bl	8000b68 <__aeabi_d2iz>
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 8002068:	465b      	mov	r3, fp
 800206a:	2214      	movs	r2, #20
 800206c:	4639      	mov	r1, r7
 800206e:	9000      	str	r0, [sp, #0]
 8002070:	a80c      	add	r0, sp, #48	; 0x30
 8002072:	f003 fe55 	bl	8005d20 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002076:	a80c      	add	r0, sp, #48	; 0x30
 8002078:	f7fe f8b2 	bl	80001e0 <strlen>
 800207c:	f04f 33ff 	mov.w	r3, #4294967295
 8002080:	b282      	uxth	r2, r0
 8002082:	a90c      	add	r1, sp, #48	; 0x30
 8002084:	4630      	mov	r0, r6
 8002086:	f002 fd39 	bl	8004afc <HAL_UART_Transmit>
	  for (int s = 5; s <=110; s++){
 800208a:	f10b 0b01 	add.w	fp, fp, #1
	  		  HAL_Delay(5);
 800208e:	2005      	movs	r0, #5
 8002090:	f000 fc7e 	bl	8002990 <HAL_Delay>
	  for (int s = 5; s <=110; s++){
 8002094:	f1bb 0f6f 	cmp.w	fp, #111	; 0x6f
 8002098:	d1c2      	bne.n	8002020 <main+0x58c>
	  for (int i = 20; i <= 50; i++){
 800209a:	f04f 0b14 	mov.w	fp, #20
 800209e:	e011      	b.n	80020c4 <main+0x630>
 80020a0:	48000800 	.word	0x48000800
 80020a4:	08009860 	.word	0x08009860
 80020a8:	200005e4 	.word	0x200005e4
 80020ac:	200005d0 	.word	0x200005d0
 80020b0:	40240000 	.word	0x40240000
 80020b4:	20000548 	.word	0x20000548
 80020b8:	20000314 	.word	0x20000314
 80020bc:	20000310 	.word	0x20000310
 80020c0:	20000318 	.word	0x20000318
	  		  motor_speed(&motor, i);
 80020c4:	4659      	mov	r1, fp
 80020c6:	4650      	mov	r0, sl
 80020c8:	f000 f97a 	bl	80023c0 <motor_speed>
    int humidity_int = (int)(humidity * 10.0);
 80020cc:	f8d9 0000 	ldr.w	r0, [r9]
 80020d0:	f7fe fa42 	bl	8000558 <__aeabi_f2d>
 80020d4:	4622      	mov	r2, r4
 80020d6:	462b      	mov	r3, r5
 80020d8:	f7fe fa96 	bl	8000608 <__aeabi_dmul>
 80020dc:	f7fe fd44 	bl	8000b68 <__aeabi_d2iz>
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 80020e0:	9002      	str	r0, [sp, #8]
    int temperature_int = (int)(temperature * 10.0);  // Multiply by 10 to keep one decimal place
 80020e2:	f8d8 0000 	ldr.w	r0, [r8]
 80020e6:	f7fe fa37 	bl	8000558 <__aeabi_f2d>
 80020ea:	4622      	mov	r2, r4
 80020ec:	462b      	mov	r3, r5
 80020ee:	f7fe fa8b 	bl	8000608 <__aeabi_dmul>
 80020f2:	f7fe fd39 	bl	8000b68 <__aeabi_d2iz>
    int pressure_int  = (int)(pressure * 10.0);
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <main+0x6ac>)
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 80020f8:	9001      	str	r0, [sp, #4]
    int pressure_int  = (int)(pressure * 10.0);
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	f7fe fa2c 	bl	8000558 <__aeabi_f2d>
 8002100:	4622      	mov	r2, r4
 8002102:	462b      	mov	r3, r5
 8002104:	f7fe fa80 	bl	8000608 <__aeabi_dmul>
 8002108:	f7fe fd2e 	bl	8000b68 <__aeabi_d2iz>
    sprintf(buffer, "Motor: %d RPM, Steering: %d deg, Pressure: %d hPa, Temp: %dC, Humidity: %d%%\r\n",
 800210c:	465a      	mov	r2, fp
 800210e:	236e      	movs	r3, #110	; 0x6e
 8002110:	4639      	mov	r1, r7
 8002112:	9000      	str	r0, [sp, #0]
 8002114:	a80c      	add	r0, sp, #48	; 0x30
 8002116:	f003 fe03 	bl	8005d20 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800211a:	a80c      	add	r0, sp, #48	; 0x30
 800211c:	f7fe f860 	bl	80001e0 <strlen>
 8002120:	f04f 33ff 	mov.w	r3, #4294967295
 8002124:	b282      	uxth	r2, r0
 8002126:	a90c      	add	r1, sp, #48	; 0x30
 8002128:	4630      	mov	r0, r6
 800212a:	f002 fce7 	bl	8004afc <HAL_UART_Transmit>
	  for (int i = 20; i <= 50; i++){
 800212e:	f10b 0b01 	add.w	fp, fp, #1
	  		  HAL_Delay(200);
 8002132:	20c8      	movs	r0, #200	; 0xc8
 8002134:	f000 fc2c 	bl	8002990 <HAL_Delay>
	  for (int i = 20; i <= 50; i++){
 8002138:	f1bb 0f33 	cmp.w	fp, #51	; 0x33
 800213c:	d1c2      	bne.n	80020c4 <main+0x630>
 800213e:	e62a      	b.n	8001d96 <main+0x302>
 8002140:	20000314 	.word	0x20000314

08002144 <init_servo>:
					GPIO_TypeDef*		servo_GPIOx,
					uint32_t 			servo_GPIO_pin,
					TIM_HandleTypeDef*	Timer_Handle,
					uint32_t			Timer_Channel,
					uint32_t 			initial_angle)
{
 8002144:	b538      	push	{r3, r4, r5, lr}
 8002146:	9d05      	ldr	r5, [sp, #20]
 8002148:	4604      	mov	r4, r0
 800214a:	9804      	ldr	r0, [sp, #16]
	servo_config->servo_GPIOx 			=servo_GPIOx;
	servo_config->servo_GPIO_pin 		=servo_GPIO_pin;
 800214c:	e9c4 1200 	strd	r1, r2, [r4]
	servo_config->Timer_Handle 			=Timer_Handle;
	servo_config->Timer_Channel			=Timer_Channel;
 8002150:	e9c4 3002 	strd	r3, r0, [r4, #8]
void servo_angle(servo_config* servo_config, uint32_t angle)
{



	if(0!= angle)
 8002154:	b905      	cbnz	r5, 8002158 <init_servo+0x14>
}
 8002156:	bd38      	pop	{r3, r4, r5, pc}
	{
		HAL_TIM_PWM_Start(servo_config->Timer_Handle, servo_config->Timer_Channel);
 8002158:	4601      	mov	r1, r0
 800215a:	4618      	mov	r0, r3
 800215c:	f002 fa4e 	bl	80045fc <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 8002160:	68e3      	ldr	r3, [r4, #12]
 8002162:	b1cb      	cbz	r3, 8002198 <init_servo+0x54>
 8002164:	2b04      	cmp	r3, #4
 8002166:	d026      	beq.n	80021b6 <init_servo+0x72>
 8002168:	2b08      	cmp	r3, #8
 800216a:	d042      	beq.n	80021f2 <init_servo+0xae>
 800216c:	2b0c      	cmp	r3, #12
 800216e:	d031      	beq.n	80021d4 <init_servo+0x90>
 8002170:	2b10      	cmp	r3, #16
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002176:	4926      	ldr	r1, [pc, #152]	; (8002210 <init_servo+0xcc>)
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 8002178:	68a2      	ldr	r2, [r4, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800217a:	fb05 f303 	mul.w	r3, r5, r3
 800217e:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8002182:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 8002186:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002188:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800218c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 8002190:	bf0c      	ite	eq
 8002192:	6593      	streq	r3, [r2, #88]	; 0x58
 8002194:	65d3      	strne	r3, [r2, #92]	; 0x5c
}
 8002196:	bd38      	pop	{r3, r4, r5, pc}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002198:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219c:	491c      	ldr	r1, [pc, #112]	; (8002210 <init_servo+0xcc>)
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 800219e:	68a2      	ldr	r2, [r4, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80021a0:	fb05 f303 	mul.w	r3, r5, r3
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 80021aa:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 80021b2:	6353      	str	r3, [r2, #52]	; 0x34
}
 80021b4:	bd38      	pop	{r3, r4, r5, pc}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80021b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ba:	4915      	ldr	r1, [pc, #84]	; (8002210 <init_servo+0xcc>)
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 80021bc:	68a2      	ldr	r2, [r4, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80021be:	fb05 f303 	mul.w	r3, r5, r3
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 80021c8:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 80021d0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80021d2:	bd38      	pop	{r3, r4, r5, pc}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80021d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d8:	490d      	ldr	r1, [pc, #52]	; (8002210 <init_servo+0xcc>)
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 80021da:	68a2      	ldr	r2, [r4, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80021dc:	fb05 f303 	mul.w	r3, r5, r3
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 80021e6:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 80021ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80021f0:	bd38      	pop	{r3, r4, r5, pc}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80021f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f6:	4906      	ldr	r1, [pc, #24]	; (8002210 <init_servo+0xcc>)
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 80021f8:	68a2      	ldr	r2, [r4, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80021fa:	fb05 f303 	mul.w	r3, r5, r3
 80021fe:	089b      	lsrs	r3, r3, #2
 8002200:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 8002204:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 800220c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800220e:	bd38      	pop	{r3, r4, r5, pc}
 8002210:	16c16c17 	.word	0x16c16c17

08002214 <init_motor>:
{
 8002214:	b538      	push	{r3, r4, r5, lr}
 8002216:	9d05      	ldr	r5, [sp, #20]
 8002218:	4604      	mov	r4, r0
 800221a:	9804      	ldr	r0, [sp, #16]
	motor_config->motor_GPIO_pin 		=motor_GPIO_pin;
 800221c:	e9c4 1200 	strd	r1, r2, [r4]
	motor_config->Timer_Channel_Motor	=Timer_Channel_Motor;
 8002220:	e9c4 3002 	strd	r3, r0, [r4, #8]

}


void motor_speed(motor_config* motor_config, uint32_t speed){
	if(0!= speed)
 8002224:	b92d      	cbnz	r5, 8002232 <init_motor+0x1e>
}
 8002226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(500);
 800222a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800222e:	f000 bbaf 	b.w	8002990 <HAL_Delay>
	{
		HAL_TIM_PWM_Start(motor_config->Timer_Handle_Motor, motor_config->Timer_Channel_Motor);
 8002232:	4601      	mov	r1, r0
 8002234:	4618      	mov	r0, r3
 8002236:	f002 f9e1 	bl	80045fc <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 800223a:	68e3      	ldr	r3, [r4, #12]
 800223c:	b1cb      	cbz	r3, 8002272 <init_motor+0x5e>
 800223e:	2b04      	cmp	r3, #4
 8002240:	d02b      	beq.n	800229a <init_motor+0x86>
 8002242:	2b08      	cmp	r3, #8
 8002244:	d047      	beq.n	80022d6 <init_motor+0xc2>
 8002246:	2b0c      	cmp	r3, #12
 8002248:	d036      	beq.n	80022b8 <init_motor+0xa4>
 800224a:	2b10      	cmp	r3, #16
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800224c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002250:	4928      	ldr	r1, [pc, #160]	; (80022f4 <init_motor+0xe0>)
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 8002252:	68a2      	ldr	r2, [r4, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002254:	fb05 f303 	mul.w	r3, r5, r3
 8002258:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800225c:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 8002260:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002262:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8002266:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 800226a:	bf0c      	ite	eq
 800226c:	6593      	streq	r3, [r2, #88]	; 0x58
 800226e:	65d3      	strne	r3, [r2, #92]	; 0x5c
 8002270:	e7d9      	b.n	8002226 <init_motor+0x12>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002276:	fb05 f303 	mul.w	r3, r5, r3
 800227a:	491e      	ldr	r1, [pc, #120]	; (80022f4 <init_motor+0xe0>)
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 800227c:	68a2      	ldr	r2, [r4, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 8002284:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 800228c:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(500);
 800228e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 8002292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(500);
 8002296:	f000 bb7b 	b.w	8002990 <HAL_Delay>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800229a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229e:	4915      	ldr	r1, [pc, #84]	; (80022f4 <init_motor+0xe0>)
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 80022a0:	68a2      	ldr	r2, [r4, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80022a2:	fb05 f303 	mul.w	r3, r5, r3
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 80022ac:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 80022b4:	6393      	str	r3, [r2, #56]	; 0x38
 80022b6:	e7b6      	b.n	8002226 <init_motor+0x12>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80022b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022bc:	490d      	ldr	r1, [pc, #52]	; (80022f4 <init_motor+0xe0>)
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 80022be:	68a2      	ldr	r2, [r4, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80022c0:	fb05 f303 	mul.w	r3, r5, r3
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 80022ca:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 80022d2:	6413      	str	r3, [r2, #64]	; 0x40
 80022d4:	e7a7      	b.n	8002226 <init_motor+0x12>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80022d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022da:	4906      	ldr	r1, [pc, #24]	; (80022f4 <init_motor+0xe0>)
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 80022dc:	68a2      	ldr	r2, [r4, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80022de:	fb05 f303 	mul.w	r3, r5, r3
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 80022e8:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 80022f0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80022f2:	e798      	b.n	8002226 <init_motor+0x12>
 80022f4:	16c16c17 	.word	0x16c16c17

080022f8 <servo_angle>:
	if(0!= angle)
 80022f8:	b901      	cbnz	r1, 80022fc <servo_angle+0x4>
 80022fa:	4770      	bx	lr
{
 80022fc:	b538      	push	{r3, r4, r5, lr}
 80022fe:	4605      	mov	r5, r0
 8002300:	460c      	mov	r4, r1
		HAL_TIM_PWM_Start(servo_config->Timer_Handle, servo_config->Timer_Channel);
 8002302:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
 8002306:	f002 f979 	bl	80045fc <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 800230a:	68eb      	ldr	r3, [r5, #12]
 800230c:	b1cb      	cbz	r3, 8002342 <servo_angle+0x4a>
 800230e:	2b04      	cmp	r3, #4
 8002310:	d026      	beq.n	8002360 <servo_angle+0x68>
 8002312:	2b08      	cmp	r3, #8
 8002314:	d042      	beq.n	800239c <servo_angle+0xa4>
 8002316:	2b0c      	cmp	r3, #12
 8002318:	d031      	beq.n	800237e <servo_angle+0x86>
 800231a:	2b10      	cmp	r3, #16
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800231c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002320:	4926      	ldr	r1, [pc, #152]	; (80023bc <servo_angle+0xc4>)
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 8002322:	68aa      	ldr	r2, [r5, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002324:	fb04 f303 	mul.w	r3, r4, r3
 8002328:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800232c:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 8002330:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002332:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8002336:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 800233a:	bf0c      	ite	eq
 800233c:	6593      	streq	r3, [r2, #88]	; 0x58
 800233e:	65d3      	strne	r3, [r2, #92]	; 0x5c
}
 8002340:	bd38      	pop	{r3, r4, r5, pc}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002346:	491d      	ldr	r1, [pc, #116]	; (80023bc <servo_angle+0xc4>)
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 8002348:	68aa      	ldr	r2, [r5, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800234a:	fb04 f303 	mul.w	r3, r4, r3
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 8002354:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002356:	089b      	lsrs	r3, r3, #2
 8002358:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 800235c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800235e:	bd38      	pop	{r3, r4, r5, pc}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002364:	4915      	ldr	r1, [pc, #84]	; (80023bc <servo_angle+0xc4>)
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 8002366:	68aa      	ldr	r2, [r5, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002368:	fb04 f303 	mul.w	r3, r4, r3
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 8002372:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 800237a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800237c:	bd38      	pop	{r3, r4, r5, pc}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800237e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002382:	490e      	ldr	r1, [pc, #56]	; (80023bc <servo_angle+0xc4>)
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 8002384:	68aa      	ldr	r2, [r5, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002386:	fb04 f303 	mul.w	r3, r4, r3
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 8002390:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 8002398:	6413      	str	r3, [r2, #64]	; 0x40
}
 800239a:	bd38      	pop	{r3, r4, r5, pc}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800239c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a0:	4906      	ldr	r1, [pc, #24]	; (80023bc <servo_angle+0xc4>)
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 80023a2:	68aa      	ldr	r2, [r5, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80023a4:	fb04 f303 	mul.w	r3, r4, r3
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 80023ae:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map_servo(angle,0,180,1000,2000));
 80023b6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80023b8:	bd38      	pop	{r3, r4, r5, pc}
 80023ba:	bf00      	nop
 80023bc:	16c16c17 	.word	0x16c16c17

080023c0 <motor_speed>:
	if(0!= speed)
 80023c0:	b901      	cbnz	r1, 80023c4 <motor_speed+0x4>
 80023c2:	4770      	bx	lr
void motor_speed(motor_config* motor_config, uint32_t speed){
 80023c4:	b538      	push	{r3, r4, r5, lr}
 80023c6:	4605      	mov	r5, r0
 80023c8:	460c      	mov	r4, r1
		HAL_TIM_PWM_Start(motor_config->Timer_Handle_Motor, motor_config->Timer_Channel_Motor);
 80023ca:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
 80023ce:	f002 f915 	bl	80045fc <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 80023d2:	68eb      	ldr	r3, [r5, #12]
 80023d4:	b1cb      	cbz	r3, 800240a <motor_speed+0x4a>
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d026      	beq.n	8002428 <motor_speed+0x68>
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d042      	beq.n	8002464 <motor_speed+0xa4>
 80023de:	2b0c      	cmp	r3, #12
 80023e0:	d031      	beq.n	8002446 <motor_speed+0x86>
 80023e2:	2b10      	cmp	r3, #16
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80023e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e8:	4926      	ldr	r1, [pc, #152]	; (8002484 <motor_speed+0xc4>)
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 80023ea:	68aa      	ldr	r2, [r5, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80023ec:	fb04 f303 	mul.w	r3, r4, r3
 80023f0:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80023f4:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 80023f8:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80023fa:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80023fe:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 8002402:	bf0c      	ite	eq
 8002404:	6593      	streq	r3, [r2, #88]	; 0x58
 8002406:	65d3      	strne	r3, [r2, #92]	; 0x5c
	}
}
 8002408:	bd38      	pop	{r3, r4, r5, pc}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800240a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240e:	491d      	ldr	r1, [pc, #116]	; (8002484 <motor_speed+0xc4>)
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 8002410:	68aa      	ldr	r2, [r5, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002412:	fb04 f303 	mul.w	r3, r4, r3
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 800241c:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800241e:	089b      	lsrs	r3, r3, #2
 8002420:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 8002424:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002426:	bd38      	pop	{r3, r4, r5, pc}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242c:	4915      	ldr	r1, [pc, #84]	; (8002484 <motor_speed+0xc4>)
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 800242e:	68aa      	ldr	r2, [r5, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002430:	fb04 f303 	mul.w	r3, r4, r3
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 800243a:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 8002442:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002444:	bd38      	pop	{r3, r4, r5, pc}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244a:	490e      	ldr	r1, [pc, #56]	; (8002484 <motor_speed+0xc4>)
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 800244c:	68aa      	ldr	r2, [r5, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800244e:	fb04 f303 	mul.w	r3, r4, r3
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 8002458:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 8002460:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002462:	bd38      	pop	{r3, r4, r5, pc}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002468:	4906      	ldr	r1, [pc, #24]	; (8002484 <motor_speed+0xc4>)
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 800246a:	68aa      	ldr	r2, [r5, #8]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800246c:	fb04 f303 	mul.w	r3, r4, r3
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 8002476:	6812      	ldr	r2, [r2, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002478:	089b      	lsrs	r3, r3, #2
 800247a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		__HAL_TIM_SET_COMPARE(motor_config->Timer_Handle_Motor,motor_config->Timer_Channel_Motor, map_motor(speed,0,180,1000,2000));
 800247e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002480:	bd38      	pop	{r3, r4, r5, pc}
 8002482:	bf00      	nop
 8002484:	16c16c17 	.word	0x16c16c17

08002488 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_MspInit+0x30>)
 800248a:	699a      	ldr	r2, [r3, #24]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	619a      	str	r2, [r3, #24]
 8002492:	699a      	ldr	r2, [r3, #24]
{
 8002494:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	f002 0201 	and.w	r2, r2, #1
 800249a:	9200      	str	r2, [sp, #0]
 800249c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800249e:	69da      	ldr	r2, [r3, #28]
 80024a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024a4:	61da      	str	r2, [r3, #28]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024b0:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b2:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024b4:	f000 ba7e 	b.w	80029b4 <HAL_NVIC_SetPriorityGrouping>
 80024b8:	40021000 	.word	0x40021000
 80024bc:	00000000 	.word	0x00000000

080024c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 80024c2:	6802      	ldr	r2, [r0, #0]
 80024c4:	4936      	ldr	r1, [pc, #216]	; (80025a0 <HAL_I2C_MspInit+0xe0>)
{
 80024c6:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	2300      	movs	r3, #0
  if(hi2c->Instance==I2C1)
 80024ca:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80024d0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80024d4:	930a      	str	r3, [sp, #40]	; 0x28
  if(hi2c->Instance==I2C1)
 80024d6:	d004      	beq.n	80024e2 <HAL_I2C_MspInit+0x22>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 80024d8:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <HAL_I2C_MspInit+0xe4>)
 80024da:	429a      	cmp	r2, r3
 80024dc:	d03a      	beq.n	8002554 <HAL_I2C_MspInit+0x94>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80024de:	b00d      	add	sp, #52	; 0x34
 80024e0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e2:	4c31      	ldr	r4, [pc, #196]	; (80025a8 <HAL_I2C_MspInit+0xe8>)
 80024e4:	6963      	ldr	r3, [r4, #20]
 80024e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ea:	6163      	str	r3, [r4, #20]
 80024ec:	6963      	ldr	r3, [r4, #20]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f6:	6963      	ldr	r3, [r4, #20]
 80024f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024fc:	6163      	str	r3, [r4, #20]
 80024fe:	6963      	ldr	r3, [r4, #20]
 8002500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002504:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002506:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800250a:	2312      	movs	r3, #18
 800250c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002510:	2504      	movs	r5, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002512:	a906      	add	r1, sp, #24
 8002514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800251c:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002520:	f000 fb04 	bl	8002b2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002524:	2280      	movs	r2, #128	; 0x80
 8002526:	2312      	movs	r3, #18
 8002528:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252c:	481f      	ldr	r0, [pc, #124]	; (80025ac <HAL_I2C_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800252e:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002530:	2200      	movs	r2, #0
 8002532:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002534:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002536:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253a:	f000 faf7 	bl	8002b2c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800253e:	69e3      	ldr	r3, [r4, #28]
 8002540:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002544:	61e3      	str	r3, [r4, #28]
 8002546:	69e3      	ldr	r3, [r4, #28]
 8002548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254c:	9303      	str	r3, [sp, #12]
 800254e:	9b03      	ldr	r3, [sp, #12]
}
 8002550:	b00d      	add	sp, #52	; 0x34
 8002552:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002554:	4c14      	ldr	r4, [pc, #80]	; (80025a8 <HAL_I2C_MspInit+0xe8>)
 8002556:	6963      	ldr	r3, [r4, #20]
 8002558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800255c:	6163      	str	r3, [r4, #20]
 800255e:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002560:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8002598 <HAL_I2C_MspInit+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002568:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800256a:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800256c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256e:	a906      	add	r1, sp, #24
 8002570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002574:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002578:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257c:	9d04      	ldr	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257e:	f000 fad5 	bl	8002b2c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002582:	69e3      	ldr	r3, [r4, #28]
 8002584:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002588:	61e3      	str	r3, [r4, #28]
 800258a:	69e3      	ldr	r3, [r4, #28]
 800258c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002590:	9305      	str	r3, [sp, #20]
 8002592:	9b05      	ldr	r3, [sp, #20]
}
 8002594:	b00d      	add	sp, #52	; 0x34
 8002596:	bd30      	pop	{r4, r5, pc}
 8002598:	00000600 	.word	0x00000600
 800259c:	00000012 	.word	0x00000012
 80025a0:	40005400 	.word	0x40005400
 80025a4:	40005800 	.word	0x40005800
 80025a8:	40021000 	.word	0x40021000
 80025ac:	48000400 	.word	0x48000400

080025b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025b0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 80025b2:	4a1b      	ldr	r2, [pc, #108]	; (8002620 <HAL_SPI_MspInit+0x70>)
 80025b4:	6801      	ldr	r1, [r0, #0]
{
 80025b6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	2300      	movs	r3, #0
  if(hspi->Instance==SPI2)
 80025ba:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80025c0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80025c4:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI2)
 80025c6:	d001      	beq.n	80025cc <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80025c8:	b008      	add	sp, #32
 80025ca:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025d0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80025d4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8002618 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025d8:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025da:	4812      	ldr	r0, [pc, #72]	; (8002624 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025e0:	61da      	str	r2, [r3, #28]
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80025e8:	9200      	str	r2, [sp, #0]
 80025ea:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80025f2:	615a      	str	r2, [r3, #20]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025fc:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025fe:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002600:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002602:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002606:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260a:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260c:	f000 fa8e 	bl	8002b2c <HAL_GPIO_Init>
}
 8002610:	b008      	add	sp, #32
 8002612:	bd10      	pop	{r4, pc}
 8002614:	f3af 8000 	nop.w
 8002618:	0000e000 	.word	0x0000e000
 800261c:	00000002 	.word	0x00000002
 8002620:	40003800 	.word	0x40003800
 8002624:	48000400 	.word	0x48000400

08002628 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8002628:	6803      	ldr	r3, [r0, #0]
 800262a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262e:	d000      	beq.n	8002632 <HAL_TIM_PWM_MspInit+0xa>
 8002630:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002632:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
{
 8002636:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002638:	69da      	ldr	r2, [r3, #28]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	61da      	str	r2, [r3, #28]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800264a:	b002      	add	sp, #8
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop

08002650 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM16)
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_TIM_Base_MspInit+0x28>)
 8002652:	6802      	ldr	r2, [r0, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d000      	beq.n	800265a <HAL_TIM_Base_MspInit+0xa>
 8002658:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800265a:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
{
 800265e:	b082      	sub	sp, #8
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002666:	619a      	str	r2, [r3, #24]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002672:	b002      	add	sp, #8
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40014400 	.word	0x40014400
 800267c:	00000000 	.word	0x00000000

08002680 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002680:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM2)
 8002682:	6802      	ldr	r2, [r0, #0]
{
 8002684:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002686:	2300      	movs	r3, #0
  if(htim->Instance==TIM2)
 8002688:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002690:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002694:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM2)
 8002696:	d002      	beq.n	800269e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002698:	b009      	add	sp, #36	; 0x24
 800269a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026a2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026a6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80026d8 <HAL_TIM_MspPostInit+0x58>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	695a      	ldr	r2, [r3, #20]
 80026ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80026b0:	615a      	str	r2, [r3, #20]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026bc:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026c2:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026c8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ca:	f000 fa2f 	bl	8002b2c <HAL_GPIO_Init>
}
 80026ce:	b009      	add	sp, #36	; 0x24
 80026d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80026d4:	f3af 8000 	nop.w
 80026d8:	00000003 	.word	0x00000003
 80026dc:	00000002 	.word	0x00000002

080026e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 80026e2:	6803      	ldr	r3, [r0, #0]
 80026e4:	4a2e      	ldr	r2, [pc, #184]	; (80027a0 <HAL_UART_MspInit+0xc0>)
{
 80026e6:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 80026ea:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80026f0:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80026f4:	9408      	str	r4, [sp, #32]
  if(huart->Instance==USART1)
 80026f6:	d004      	beq.n	8002702 <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80026f8:	4a2a      	ldr	r2, [pc, #168]	; (80027a4 <HAL_UART_MspInit+0xc4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d02a      	beq.n	8002754 <HAL_UART_MspInit+0x74>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026fe:	b00b      	add	sp, #44	; 0x2c
 8002700:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002702:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <HAL_UART_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002704:	4829      	ldr	r0, [pc, #164]	; (80027ac <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002706:	699a      	ldr	r2, [r3, #24]
 8002708:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800270c:	619a      	str	r2, [r3, #24]
 800270e:	699a      	ldr	r2, [r3, #24]
 8002710:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002714:	9200      	str	r2, [sp, #0]
 8002716:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800271e:	615a      	str	r2, [r3, #20]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002726:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002728:	2230      	movs	r2, #48	; 0x30
 800272a:	2302      	movs	r3, #2
 800272c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002730:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002732:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002734:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002736:	e9cd 2307 	strd	r2, r3, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800273a:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800273c:	f000 f9f6 	bl	8002b2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002740:	4622      	mov	r2, r4
 8002742:	4621      	mov	r1, r4
 8002744:	2025      	movs	r0, #37	; 0x25
 8002746:	f000 f947 	bl	80029d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800274a:	2025      	movs	r0, #37	; 0x25
 800274c:	f000 f982 	bl	8002a54 <HAL_NVIC_EnableIRQ>
}
 8002750:	b00b      	add	sp, #44	; 0x2c
 8002752:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002754:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <HAL_UART_MspInit+0xc8>)
 8002756:	69da      	ldr	r2, [r3, #28]
 8002758:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800275c:	61da      	str	r2, [r3, #28]
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002764:	9202      	str	r2, [sp, #8]
 8002766:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800276e:	615a      	str	r2, [r3, #20]
 8002770:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002772:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8002798 <HAL_UART_MspInit+0xb8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800277e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002784:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002788:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800278a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278c:	f000 f9ce 	bl	8002b2c <HAL_GPIO_Init>
}
 8002790:	b00b      	add	sp, #44	; 0x2c
 8002792:	bd30      	pop	{r4, r5, pc}
 8002794:	f3af 8000 	nop.w
 8002798:	0000000c 	.word	0x0000000c
 800279c:	00000002 	.word	0x00000002
 80027a0:	40013800 	.word	0x40013800
 80027a4:	40004400 	.word	0x40004400
 80027a8:	40021000 	.word	0x40021000
 80027ac:	48000800 	.word	0x48000800

080027b0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <NMI_Handler>
 80027b2:	bf00      	nop

080027b4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <HardFault_Handler>
 80027b6:	bf00      	nop

080027b8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <MemManage_Handler>
 80027ba:	bf00      	nop

080027bc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <BusFault_Handler>
 80027be:	bf00      	nop

080027c0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <UsageFault_Handler>
 80027c2:	bf00      	nop

080027c4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop

080027c8 <DebugMon_Handler>:
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop

080027cc <PendSV_Handler>:
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop

080027d0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d0:	f000 b8cc 	b.w	800296c <HAL_IncTick>

080027d4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027d4:	4801      	ldr	r0, [pc, #4]	; (80027dc <USART1_IRQHandler+0x8>)
 80027d6:	f002 bad1 	b.w	8004d7c <HAL_UART_IRQHandler>
 80027da:	bf00      	nop
 80027dc:	200004c0 	.word	0x200004c0

080027e0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80027e0:	2001      	movs	r0, #1
 80027e2:	4770      	bx	lr

080027e4 <_kill>:

int _kill(int pid, int sig)
{
 80027e4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027e6:	f003 f845 	bl	8005874 <__errno>
 80027ea:	2316      	movs	r3, #22
 80027ec:	6003      	str	r3, [r0, #0]
  return -1;
}
 80027ee:	f04f 30ff 	mov.w	r0, #4294967295
 80027f2:	bd08      	pop	{r3, pc}

080027f4 <_exit>:

void _exit (int status)
{
 80027f4:	b508      	push	{r3, lr}
  errno = EINVAL;
 80027f6:	f003 f83d 	bl	8005874 <__errno>
 80027fa:	2316      	movs	r3, #22
 80027fc:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80027fe:	e7fe      	b.n	80027fe <_exit+0xa>

08002800 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002800:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002802:	1e16      	subs	r6, r2, #0
 8002804:	dd07      	ble.n	8002816 <_read+0x16>
 8002806:	460c      	mov	r4, r1
 8002808:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800280a:	f3af 8000 	nop.w
 800280e:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002812:	42a5      	cmp	r5, r4
 8002814:	d1f9      	bne.n	800280a <_read+0xa>
  }

  return len;
}
 8002816:	4630      	mov	r0, r6
 8002818:	bd70      	pop	{r4, r5, r6, pc}
 800281a:	bf00      	nop

0800281c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800281c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281e:	1e16      	subs	r6, r2, #0
 8002820:	dd07      	ble.n	8002832 <_write+0x16>
 8002822:	460c      	mov	r4, r1
 8002824:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8002826:	f814 0b01 	ldrb.w	r0, [r4], #1
 800282a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282e:	42ac      	cmp	r4, r5
 8002830:	d1f9      	bne.n	8002826 <_write+0xa>
  }
  return len;
}
 8002832:	4630      	mov	r0, r6
 8002834:	bd70      	pop	{r4, r5, r6, pc}
 8002836:	bf00      	nop

08002838 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop

08002840 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002844:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002846:	2000      	movs	r0, #0
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop

0800284c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800284c:	2001      	movs	r0, #1
 800284e:	4770      	bx	lr

08002850 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002850:	2000      	movs	r0, #0
 8002852:	4770      	bx	lr

08002854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002854:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002856:	4c0c      	ldr	r4, [pc, #48]	; (8002888 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <_sbrk+0x38>)
 800285a:	490d      	ldr	r1, [pc, #52]	; (8002890 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 800285c:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800285e:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8002860:	b12a      	cbz	r2, 800286e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002862:	4410      	add	r0, r2
 8002864:	4288      	cmp	r0, r1
 8002866:	d807      	bhi.n	8002878 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002868:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 800286a:	4610      	mov	r0, r2
 800286c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800286e:	4a09      	ldr	r2, [pc, #36]	; (8002894 <_sbrk+0x40>)
 8002870:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002872:	4410      	add	r0, r2
 8002874:	4288      	cmp	r0, r1
 8002876:	d9f7      	bls.n	8002868 <_sbrk+0x14>
    errno = ENOMEM;
 8002878:	f002 fffc 	bl	8005874 <__errno>
 800287c:	230c      	movs	r3, #12
    return (void *)-1;
 800287e:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8002882:	6003      	str	r3, [r0, #0]
}
 8002884:	4610      	mov	r0, r2
 8002886:	bd10      	pop	{r4, pc}
 8002888:	200005f8 	.word	0x200005f8
 800288c:	20010000 	.word	0x20010000
 8002890:	00000400 	.word	0x00000400
 8002894:	20000610 	.word	0x20000610

08002898 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002898:	4a03      	ldr	r2, [pc, #12]	; (80028a8 <SystemInit+0x10>)
 800289a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800289e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028a6:	4770      	bx	lr
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
 ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80028b0:	f7ff fff2 	bl	8002898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028b4:	480c      	ldr	r0, [pc, #48]	; (80028e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80028b6:	490d      	ldr	r1, [pc, #52]	; (80028ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80028b8:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <LoopForever+0xe>)
  movs r3, #0
 80028ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028bc:	e002      	b.n	80028c4 <LoopCopyDataInit>

080028be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028c2:	3304      	adds	r3, #4

080028c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c8:	d3f9      	bcc.n	80028be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ca:	4a0a      	ldr	r2, [pc, #40]	; (80028f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028cc:	4c0a      	ldr	r4, [pc, #40]	; (80028f8 <LoopForever+0x16>)
  movs r3, #0
 80028ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d0:	e001      	b.n	80028d6 <LoopFillZerobss>

080028d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d4:	3204      	adds	r2, #4

080028d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d8:	d3fb      	bcc.n	80028d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028da:	f002 ffd1 	bl	8005880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028de:	f7ff f8d9 	bl	8001a94 <main>

080028e2 <LoopForever>:

LoopForever:
    b LoopForever
 80028e2:	e7fe      	b.n	80028e2 <LoopForever>
 ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80028e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028ec:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80028f0:	08009d50 	.word	0x08009d50
  ldr r2, =_sbss
 80028f4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80028f8:	20000610 	.word	0x20000610

080028fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028fc:	e7fe      	b.n	80028fc <ADC1_2_IRQHandler>
	...

08002900 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002900:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002902:	4a0e      	ldr	r2, [pc, #56]	; (800293c <HAL_InitTick+0x3c>)
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_InitTick+0x40>)
 8002906:	7812      	ldrb	r2, [r2, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
{
 800290a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800290c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002910:	fbb0 f0f2 	udiv	r0, r0, r2
 8002914:	fbb3 f0f0 	udiv	r0, r3, r0
 8002918:	f000 f8aa 	bl	8002a70 <HAL_SYSTICK_Config>
 800291c:	b908      	cbnz	r0, 8002922 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800291e:	2d0f      	cmp	r5, #15
 8002920:	d901      	bls.n	8002926 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002922:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8002924:	bd38      	pop	{r3, r4, r5, pc}
 8002926:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002928:	4602      	mov	r2, r0
 800292a:	4629      	mov	r1, r5
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f000 f852 	bl	80029d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <HAL_InitTick+0x44>)
 8002936:	4620      	mov	r0, r4
 8002938:	601d      	str	r5, [r3, #0]
}
 800293a:	bd38      	pop	{r3, r4, r5, pc}
 800293c:	20000004 	.word	0x20000004
 8002940:	20000000 	.word	0x20000000
 8002944:	20000008 	.word	0x20000008

08002948 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002948:	4a07      	ldr	r2, [pc, #28]	; (8002968 <HAL_Init+0x20>)
{
 800294a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800294c:	6813      	ldr	r3, [r2, #0]
 800294e:	f043 0310 	orr.w	r3, r3, #16
 8002952:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002954:	2003      	movs	r0, #3
 8002956:	f000 f82d 	bl	80029b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800295a:	2000      	movs	r0, #0
 800295c:	f7ff ffd0 	bl	8002900 <HAL_InitTick>
  HAL_MspInit();
 8002960:	f7ff fd92 	bl	8002488 <HAL_MspInit>
}
 8002964:	2000      	movs	r0, #0
 8002966:	bd08      	pop	{r3, pc}
 8002968:	40022000 	.word	0x40022000

0800296c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800296c:	4a03      	ldr	r2, [pc, #12]	; (800297c <HAL_IncTick+0x10>)
 800296e:	4b04      	ldr	r3, [pc, #16]	; (8002980 <HAL_IncTick+0x14>)
 8002970:	6811      	ldr	r1, [r2, #0]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	440b      	add	r3, r1
 8002976:	6013      	str	r3, [r2, #0]
}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	200005fc 	.word	0x200005fc
 8002980:	20000004 	.word	0x20000004

08002984 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8002984:	4b01      	ldr	r3, [pc, #4]	; (800298c <HAL_GetTick+0x8>)
 8002986:	6818      	ldr	r0, [r3, #0]
}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	200005fc 	.word	0x200005fc

08002990 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002990:	b538      	push	{r3, r4, r5, lr}
 8002992:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002994:	f7ff fff6 	bl	8002984 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002998:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800299a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800299c:	d002      	beq.n	80029a4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <HAL_Delay+0x20>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80029a4:	f7ff ffee 	bl	8002984 <HAL_GetTick>
 80029a8:	1b43      	subs	r3, r0, r5
 80029aa:	42a3      	cmp	r3, r4
 80029ac:	d3fa      	bcc.n	80029a4 <HAL_Delay+0x14>
  {
  }
}
 80029ae:	bd38      	pop	{r3, r4, r5, pc}
 80029b0:	20000004 	.word	0x20000004

080029b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b4:	4907      	ldr	r1, [pc, #28]	; (80029d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80029b6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029b8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ba:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029c2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80029ce:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d8:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <HAL_NVIC_SetPriority+0x74>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e2:	f1c3 0e07 	rsb	lr, r3, #7
 80029e6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ea:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ee:	bf28      	it	cs
 80029f0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f4:	f1bc 0f06 	cmp.w	ip, #6
 80029f8:	d91b      	bls.n	8002a32 <HAL_NVIC_SetPriority+0x5a>
 80029fa:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029fc:	f04f 3cff 	mov.w	ip, #4294967295
 8002a00:	fa0c fc03 	lsl.w	ip, ip, r3
 8002a04:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	f04f 3cff 	mov.w	ip, #4294967295
 8002a0c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002a10:	ea21 010c 	bic.w	r1, r1, ip
 8002a14:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002a16:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002a1c:	db0c      	blt.n	8002a38 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002a22:	0109      	lsls	r1, r1, #4
 8002a24:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002a28:	b2c9      	uxtb	r1, r1
 8002a2a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002a2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a32:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a34:	4613      	mov	r3, r2
 8002a36:	e7e7      	b.n	8002a08 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_NVIC_SetPriority+0x78>)
 8002a3a:	f000 000f 	and.w	r0, r0, #15
 8002a3e:	0109      	lsls	r1, r1, #4
 8002a40:	4403      	add	r3, r0
 8002a42:	b2c9      	uxtb	r1, r1
 8002a44:	7619      	strb	r1, [r3, #24]
 8002a46:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a4a:	bf00      	nop
 8002a4c:	e000ed00 	.word	0xe000ed00
 8002a50:	e000ecfc 	.word	0xe000ecfc

08002a54 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002a54:	2800      	cmp	r0, #0
 8002a56:	db08      	blt.n	8002a6a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a58:	0941      	lsrs	r1, r0, #5
 8002a5a:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <HAL_NVIC_EnableIRQ+0x18>)
 8002a5c:	f000 001f 	and.w	r0, r0, #31
 8002a60:	2301      	movs	r3, #1
 8002a62:	fa03 f000 	lsl.w	r0, r3, r0
 8002a66:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100

08002a70 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a70:	3801      	subs	r0, #1
 8002a72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002a76:	d210      	bcs.n	8002a9a <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a78:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a7a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7e:	4c08      	ldr	r4, [pc, #32]	; (8002aa0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a80:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a82:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8002a86:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a8a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a8e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a90:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8002a92:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a96:	6119      	str	r1, [r3, #16]
 8002a98:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <HAL_DMA_Abort>:
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aa4:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8002aa8:	2a02      	cmp	r2, #2
{
 8002aaa:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aac:	d006      	beq.n	8002abc <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aae:	2104      	movs	r1, #4
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab0:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab2:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002ab4:	f880 2020 	strb.w	r2, [r0, #32]
    
    return HAL_ERROR;
 8002ab8:	2001      	movs	r0, #1
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
  
  return HAL_OK;
}
 8002aba:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002abc:	6802      	ldr	r2, [r0, #0]
 8002abe:	6811      	ldr	r1, [r2, #0]
 8002ac0:	f021 010e 	bic.w	r1, r1, #14
{
 8002ac4:	b410      	push	{r4}
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ac6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002ac8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002aca:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002acc:	6811      	ldr	r1, [r2, #0]
 8002ace:	f021 0101 	bic.w	r1, r1, #1
 8002ad2:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	40a2      	lsls	r2, r4
  __HAL_UNLOCK(hdma);
 8002ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002adc:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdma);
 8002ade:	8419      	strh	r1, [r3, #32]
  return HAL_OK;
 8002ae0:	2000      	movs	r0, #0
}
 8002ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ae8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8002aec:	2a02      	cmp	r2, #2
 8002aee:	d003      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x10>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af0:	2204      	movs	r2, #4
 8002af2:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002af4:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002af6:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002af8:	6802      	ldr	r2, [r0, #0]
 8002afa:	6811      	ldr	r1, [r2, #0]
 8002afc:	f021 010e 	bic.w	r1, r1, #14
{  
 8002b00:	b510      	push	{r4, lr}
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b02:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b04:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b06:	6811      	ldr	r1, [r2, #0]
 8002b08:	f021 0101 	bic.w	r1, r1, #1
 8002b0c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b0e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002b10:	2101      	movs	r1, #1
 8002b12:	4091      	lsls	r1, r2
    if(hdma->XferAbortCallback != NULL)
 8002b14:	6b42      	ldr	r2, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b16:	6061      	str	r1, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002b18:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8002b1c:	f8a0 c020 	strh.w	ip, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002b20:	b112      	cbz	r2, 8002b28 <HAL_DMA_Abort_IT+0x40>
      hdma->XferAbortCallback(hdma);
 8002b22:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8002b24:	2000      	movs	r0, #0
}
 8002b26:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8002b28:	4610      	mov	r0, r2
}
 8002b2a:	bd10      	pop	{r4, pc}

08002b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b30:	680c      	ldr	r4, [r1, #0]
{
 8002b32:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b34:	2c00      	cmp	r4, #0
 8002b36:	f000 8085 	beq.w	8002c44 <HAL_GPIO_Init+0x118>
 8002b3a:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b3e:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8002d1c <HAL_GPIO_Init+0x1f0>
  uint32_t position = 0x00u;
 8002b42:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b44:	f04f 0a01 	mov.w	sl, #1
 8002b48:	4688      	mov	r8, r1
 8002b4a:	fa0a f603 	lsl.w	r6, sl, r3
    if (iocurrent != 0x00u)
 8002b4e:	ea16 0904 	ands.w	r9, r6, r4
 8002b52:	d071      	beq.n	8002c38 <HAL_GPIO_Init+0x10c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b54:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8002b58:	f005 0203 	and.w	r2, r5, #3
 8002b5c:	1e51      	subs	r1, r2, #1
 8002b5e:	2901      	cmp	r1, #1
 8002b60:	d973      	bls.n	8002c4a <HAL_GPIO_Init+0x11e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b62:	2a03      	cmp	r2, #3
 8002b64:	f040 80ae 	bne.w	8002cc4 <HAL_GPIO_Init+0x198>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b68:	fa02 f20c 	lsl.w	r2, r2, ip
 8002b6c:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8002b6e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b70:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b72:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b74:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002b78:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b7a:	d05d      	beq.n	8002c38 <HAL_GPIO_Init+0x10c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7c:	4960      	ldr	r1, [pc, #384]	; (8002d00 <HAL_GPIO_Init+0x1d4>)
 8002b7e:	698a      	ldr	r2, [r1, #24]
 8002b80:	f042 0201 	orr.w	r2, r2, #1
 8002b84:	618a      	str	r2, [r1, #24]
 8002b86:	698a      	ldr	r2, [r1, #24]
 8002b88:	f002 0201 	and.w	r2, r2, #1
 8002b8c:	9203      	str	r2, [sp, #12]
 8002b8e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002b90:	f023 0203 	bic.w	r2, r3, #3
 8002b94:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002b98:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b9c:	f003 0603 	and.w	r6, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8002ba0:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ba2:	00b6      	lsls	r6, r6, #2
 8002ba4:	210f      	movs	r1, #15
 8002ba6:	40b1      	lsls	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ba8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bac:	ea27 0101 	bic.w	r1, r7, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bb0:	d01b      	beq.n	8002bea <HAL_GPIO_Init+0xbe>
 8002bb2:	4f54      	ldr	r7, [pc, #336]	; (8002d04 <HAL_GPIO_Init+0x1d8>)
 8002bb4:	42b8      	cmp	r0, r7
 8002bb6:	f000 808f 	beq.w	8002cd8 <HAL_GPIO_Init+0x1ac>
 8002bba:	4f53      	ldr	r7, [pc, #332]	; (8002d08 <HAL_GPIO_Init+0x1dc>)
 8002bbc:	42b8      	cmp	r0, r7
 8002bbe:	f000 808f 	beq.w	8002ce0 <HAL_GPIO_Init+0x1b4>
 8002bc2:	4f52      	ldr	r7, [pc, #328]	; (8002d0c <HAL_GPIO_Init+0x1e0>)
 8002bc4:	42b8      	cmp	r0, r7
 8002bc6:	f000 8082 	beq.w	8002cce <HAL_GPIO_Init+0x1a2>
 8002bca:	4f51      	ldr	r7, [pc, #324]	; (8002d10 <HAL_GPIO_Init+0x1e4>)
 8002bcc:	42b8      	cmp	r0, r7
 8002bce:	f000 808c 	beq.w	8002cea <HAL_GPIO_Init+0x1be>
 8002bd2:	4f50      	ldr	r7, [pc, #320]	; (8002d14 <HAL_GPIO_Init+0x1e8>)
 8002bd4:	42b8      	cmp	r0, r7
 8002bd6:	f000 808d 	beq.w	8002cf4 <HAL_GPIO_Init+0x1c8>
 8002bda:	4f4f      	ldr	r7, [pc, #316]	; (8002d18 <HAL_GPIO_Init+0x1ec>)
 8002bdc:	42b8      	cmp	r0, r7
 8002bde:	bf0c      	ite	eq
 8002be0:	2706      	moveq	r7, #6
 8002be2:	2707      	movne	r7, #7
 8002be4:	fa07 f606 	lsl.w	r6, r7, r6
 8002be8:	4331      	orrs	r1, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bea:	6091      	str	r1, [r2, #8]
        temp = EXTI->RTSR;
 8002bec:	f8db 2008 	ldr.w	r2, [fp, #8]
        temp &= ~(iocurrent);
 8002bf0:	ea6f 0609 	mvn.w	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bf4:	02e9      	lsls	r1, r5, #11
        temp &= ~(iocurrent);
 8002bf6:	bf54      	ite	pl
 8002bf8:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002bfa:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR = temp;
 8002bfe:	f8cb 2008 	str.w	r2, [fp, #8]

        temp = EXTI->FTSR;
 8002c02:	f8db 100c 	ldr.w	r1, [fp, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c06:	02aa      	lsls	r2, r5, #10
        temp &= ~(iocurrent);
 8002c08:	bf54      	ite	pl
 8002c0a:	4031      	andpl	r1, r6
        {
          temp |= iocurrent;
 8002c0c:	ea49 0101 	orrmi.w	r1, r9, r1
        }
        EXTI->FTSR = temp;
 8002c10:	f8cb 100c 	str.w	r1, [fp, #12]

        temp = EXTI->EMR;
 8002c14:	f8db 1004 	ldr.w	r1, [fp, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c18:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 8002c1a:	bf54      	ite	pl
 8002c1c:	4031      	andpl	r1, r6
        {
          temp |= iocurrent;
 8002c1e:	ea49 0101 	orrmi.w	r1, r9, r1
        }
        EXTI->EMR = temp;
 8002c22:	f8cb 1004 	str.w	r1, [fp, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c26:	f8db 2000 	ldr.w	r2, [fp]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c2a:	03e9      	lsls	r1, r5, #15
        temp &= ~(iocurrent);
 8002c2c:	bf54      	ite	pl
 8002c2e:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002c30:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR = temp;
 8002c34:	f8cb 2000 	str.w	r2, [fp]
      }
    }

    position++;
 8002c38:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3a:	fa34 f203 	lsrs.w	r2, r4, r3
 8002c3e:	f10c 0c02 	add.w	ip, ip, #2
 8002c42:	d182      	bne.n	8002b4a <HAL_GPIO_Init+0x1e>
  }
}
 8002c44:	b005      	add	sp, #20
 8002c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8002c4a:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c4e:	f8d8 100c 	ldr.w	r1, [r8, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c52:	2703      	movs	r7, #3
 8002c54:	fa07 f70c 	lsl.w	r7, r7, ip
 8002c58:	ea2e 0e07 	bic.w	lr, lr, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c5c:	fa01 f10c 	lsl.w	r1, r1, ip
 8002c60:	ea41 010e 	orr.w	r1, r1, lr
        GPIOx->OSPEEDR = temp;
 8002c64:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c66:	43f9      	mvns	r1, r7
        temp = GPIOx->OTYPER;
 8002c68:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c6a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c6e:	f3c5 1600 	ubfx	r6, r5, #4, #1
 8002c72:	409e      	lsls	r6, r3
 8002c74:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8002c76:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8002c78:	68c7      	ldr	r7, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c7a:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c7e:	400f      	ands	r7, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c80:	fa06 f60c 	lsl.w	r6, r6, ip
 8002c84:	433e      	orrs	r6, r7
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c86:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8002c88:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c8a:	fa02 f20c 	lsl.w	r2, r2, ip
 8002c8e:	f47f af6e 	bne.w	8002b6e <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3u];
 8002c92:	08df      	lsrs	r7, r3, #3
 8002c94:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c98:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002c9c:	6a3e      	ldr	r6, [r7, #32]
 8002c9e:	9600      	str	r6, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ca0:	f8d8 6010 	ldr.w	r6, [r8, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ca4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ca8:	fa06 f60e 	lsl.w	r6, r6, lr
 8002cac:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cae:	260f      	movs	r6, #15
 8002cb0:	fa06 fe0e 	lsl.w	lr, r6, lr
 8002cb4:	9e00      	ldr	r6, [sp, #0]
 8002cb6:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cba:	9e01      	ldr	r6, [sp, #4]
 8002cbc:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002cc0:	623e      	str	r6, [r7, #32]
 8002cc2:	e754      	b.n	8002b6e <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002cc4:	2103      	movs	r1, #3
 8002cc6:	fa01 f10c 	lsl.w	r1, r1, ip
 8002cca:	43c9      	mvns	r1, r1
 8002ccc:	e7d4      	b.n	8002c78 <HAL_GPIO_Init+0x14c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cce:	2703      	movs	r7, #3
 8002cd0:	fa07 f606 	lsl.w	r6, r7, r6
 8002cd4:	4331      	orrs	r1, r6
 8002cd6:	e788      	b.n	8002bea <HAL_GPIO_Init+0xbe>
 8002cd8:	fa0a f606 	lsl.w	r6, sl, r6
 8002cdc:	4331      	orrs	r1, r6
 8002cde:	e784      	b.n	8002bea <HAL_GPIO_Init+0xbe>
 8002ce0:	2702      	movs	r7, #2
 8002ce2:	fa07 f606 	lsl.w	r6, r7, r6
 8002ce6:	4331      	orrs	r1, r6
 8002ce8:	e77f      	b.n	8002bea <HAL_GPIO_Init+0xbe>
 8002cea:	2704      	movs	r7, #4
 8002cec:	fa07 f606 	lsl.w	r6, r7, r6
 8002cf0:	4331      	orrs	r1, r6
 8002cf2:	e77a      	b.n	8002bea <HAL_GPIO_Init+0xbe>
 8002cf4:	2705      	movs	r7, #5
 8002cf6:	fa07 f606 	lsl.w	r6, r7, r6
 8002cfa:	4331      	orrs	r1, r6
 8002cfc:	e775      	b.n	8002bea <HAL_GPIO_Init+0xbe>
 8002cfe:	bf00      	nop
 8002d00:	40021000 	.word	0x40021000
 8002d04:	48000400 	.word	0x48000400
 8002d08:	48000800 	.word	0x48000800
 8002d0c:	48000c00 	.word	0x48000c00
 8002d10:	48001000 	.word	0x48001000
 8002d14:	48001400 	.word	0x48001400
 8002d18:	48001800 	.word	0x48001800
 8002d1c:	40010400 	.word	0x40010400

08002d20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d20:	b10a      	cbz	r2, 8002d26 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d22:	6181      	str	r1, [r0, #24]
 8002d24:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d26:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop

08002d2c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d2c:	6803      	ldr	r3, [r0, #0]
{
 8002d2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d32:	4605      	mov	r5, r0
 8002d34:	460e      	mov	r6, r1
 8002d36:	4617      	mov	r7, r2
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d38:	f04f 0820 	mov.w	r8, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d3c:	6998      	ldr	r0, [r3, #24]
 8002d3e:	f010 0902 	ands.w	r9, r0, #2
 8002d42:	f040 8094 	bne.w	8002e6e <I2C_WaitOnTXISFlagUntilTimeout+0x142>
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d46:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d48:	f014 0410 	ands.w	r4, r4, #16
 8002d4c:	d068      	beq.n	8002e20 <I2C_WaitOnTXISFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d4e:	2210      	movs	r2, #16
 8002d50:	61da      	str	r2, [r3, #28]
  uint32_t tickstart = Tickstart;
 8002d52:	463c      	mov	r4, r7
  HAL_StatusTypeDef status = HAL_OK;
 8002d54:	46ca      	mov	sl, r9
 8002d56:	1c71      	adds	r1, r6, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	d163      	bne.n	8002e24 <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
 8002d5c:	0690      	lsls	r0, r2, #26
 8002d5e:	f100 8094 	bmi.w	8002e8a <I2C_WaitOnTXISFlagUntilTimeout+0x15e>
 8002d62:	f1ba 0f00 	cmp.w	sl, #0
 8002d66:	d104      	bne.n	8002d72 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
 8002d68:	699c      	ldr	r4, [r3, #24]
 8002d6a:	06a1      	lsls	r1, r4, #26
 8002d6c:	d5fc      	bpl.n	8002d68 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d6e:	f8c3 801c 	str.w	r8, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d72:	f049 0404 	orr.w	r4, r9, #4

    status = HAL_ERROR;
 8002d76:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d78:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d7a:	05d0      	lsls	r0, r2, #23
 8002d7c:	d530      	bpl.n	8002de0 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d7e:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d82:	0556      	lsls	r6, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d84:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002d86:	f044 0401 	orr.w	r4, r4, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d8a:	d504      	bpl.n	8002d96 <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d90:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8002d92:	f044 0408 	orr.w	r4, r4, #8

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d96:	0591      	lsls	r1, r2, #22
 8002d98:	d504      	bpl.n	8002da4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d9e:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002da2:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002da8:	bf44      	itt	mi
 8002daa:	2200      	movmi	r2, #0
 8002dac:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dae:	699a      	ldr	r2, [r3, #24]
 8002db0:	07d1      	lsls	r1, r2, #31
 8002db2:	d403      	bmi.n	8002dbc <I2C_WaitOnTXISFlagUntilTimeout+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	4835      	ldr	r0, [pc, #212]	; (8002e94 <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
 8002dc0:	4002      	ands	r2, r0
 8002dc2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002dc4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc6:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002dc8:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8002dca:	431c      	orrs	r4, r3
 8002dcc:	646c      	str	r4, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dce:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002dd2:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
      return HAL_ERROR;
 8002dd6:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd8:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
 8002ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002de0:	0550      	lsls	r0, r2, #21
 8002de2:	d4d3      	bmi.n	8002d8c <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002de4:	0592      	lsls	r2, r2, #22
 8002de6:	d4d8      	bmi.n	8002d9a <I2C_WaitOnTXISFlagUntilTimeout+0x6e>
  if (status != HAL_OK)
 8002de8:	2900      	cmp	r1, #0
 8002dea:	d1db      	bne.n	8002da4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 8002dec:	1c72      	adds	r2, r6, #1
 8002dee:	d0a5      	beq.n	8002d3c <I2C_WaitOnTXISFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df0:	f7ff fdc8 	bl	8002984 <HAL_GetTick>
 8002df4:	1bc0      	subs	r0, r0, r7
 8002df6:	42b0      	cmp	r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002df8:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfa:	d801      	bhi.n	8002e00 <I2C_WaitOnTXISFlagUntilTimeout+0xd4>
 8002dfc:	2e00      	cmp	r6, #0
 8002dfe:	d19d      	bne.n	8002d3c <I2C_WaitOnTXISFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	f012 0202 	ands.w	r2, r2, #2
 8002e06:	d199      	bne.n	8002d3c <I2C_WaitOnTXISFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e08:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8002e0a:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e10:	430b      	orrs	r3, r1
 8002e12:	646b      	str	r3, [r5, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8002e14:	2001      	movs	r0, #1
          hi2c->State = HAL_I2C_STATE_READY;
 8002e16:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1a:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
          return HAL_ERROR;
 8002e1e:	e7dd      	b.n	8002ddc <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 8002e20:	4621      	mov	r1, r4
 8002e22:	e7a9      	b.n	8002d78 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e24:	0692      	lsls	r2, r2, #26
 8002e26:	d430      	bmi.n	8002e8a <I2C_WaitOnTXISFlagUntilTimeout+0x15e>
 8002e28:	f1ba 0f00 	cmp.w	sl, #0
 8002e2c:	d1a1      	bne.n	8002d72 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e2e:	f7ff fda9 	bl	8002984 <HAL_GetTick>
 8002e32:	1b00      	subs	r0, r0, r4
 8002e34:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e36:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e38:	d301      	bcc.n	8002e3e <I2C_WaitOnTXISFlagUntilTimeout+0x112>
 8002e3a:	2e00      	cmp	r6, #0
 8002e3c:	d18b      	bne.n	8002d56 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e3e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002e40:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e44:	6999      	ldr	r1, [r3, #24]
 8002e46:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 8002e48:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e4a:	d501      	bpl.n	8002e50 <I2C_WaitOnTXISFlagUntilTimeout+0x124>
 8002e4c:	0441      	lsls	r1, r0, #17
 8002e4e:	d511      	bpl.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x148>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	0690      	lsls	r0, r2, #26
 8002e54:	f53f af7f 	bmi.w	8002d56 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e58:	f7ff fd94 	bl	8002984 <HAL_GetTick>
 8002e5c:	1b00      	subs	r0, r0, r4
 8002e5e:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e60:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e62:	d9f5      	bls.n	8002e50 <I2C_WaitOnTXISFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e64:	f04f 0920 	mov.w	r9, #32
              status = HAL_ERROR;
 8002e68:	f04f 0a01 	mov.w	sl, #1
 8002e6c:	e773      	b.n	8002d56 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  return HAL_OK;
 8002e6e:	2000      	movs	r0, #0
}
 8002e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
              (tmp1 != I2C_CR2_STOP) && \
 8002e74:	2a20      	cmp	r2, #32
 8002e76:	d0eb      	beq.n	8002e50 <I2C_WaitOnTXISFlagUntilTimeout+0x124>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e7e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002e80:	f7ff fd80 	bl	8002984 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e84:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8002e86:	4604      	mov	r4, r0
 8002e88:	e7e2      	b.n	8002e50 <I2C_WaitOnTXISFlagUntilTimeout+0x124>
    if (status == HAL_OK)
 8002e8a:	f1ba 0f00 	cmp.w	sl, #0
 8002e8e:	f43f af6e 	beq.w	8002d6e <I2C_WaitOnTXISFlagUntilTimeout+0x42>
 8002e92:	e76e      	b.n	8002d72 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
 8002e94:	fe00e800 	.word	0xfe00e800

08002e98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e98:	6803      	ldr	r3, [r0, #0]
{
 8002e9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e9e:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ea0:	6998      	ldr	r0, [r3, #24]
 8002ea2:	0680      	lsls	r0, r0, #26
 8002ea4:	d462      	bmi.n	8002f6c <I2C_WaitOnSTOPFlagUntilTimeout+0xd4>
 8002ea6:	460f      	mov	r7, r1
 8002ea8:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eaa:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 8002eae:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002eb0:	f014 0410 	ands.w	r4, r4, #16
 8002eb4:	d06f      	beq.n	8002f96 <I2C_WaitOnSTOPFlagUntilTimeout+0xfe>
  uint32_t error_code = 0;
 8002eb6:	2500      	movs	r5, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb8:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 8002ebc:	4644      	mov	r4, r8
  HAL_StatusTypeDef status = HAL_OK;
 8002ebe:	46aa      	mov	sl, r5
 8002ec0:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ec2:	699a      	ldr	r2, [r3, #24]
 8002ec4:	d169      	bne.n	8002f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x102>
 8002ec6:	0690      	lsls	r0, r2, #26
 8002ec8:	f100 8096 	bmi.w	8002ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x160>
 8002ecc:	f1ba 0f00 	cmp.w	sl, #0
 8002ed0:	d104      	bne.n	8002edc <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
 8002ed2:	699c      	ldr	r4, [r3, #24]
 8002ed4:	06a1      	lsls	r1, r4, #26
 8002ed6:	d5fc      	bpl.n	8002ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed8:	2220      	movs	r2, #32
 8002eda:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002edc:	f045 0404 	orr.w	r4, r5, #4
    status = HAL_ERROR;
 8002ee0:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8002ee2:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ee4:	05d0      	lsls	r0, r2, #23
 8002ee6:	d530      	bpl.n	8002f4a <I2C_WaitOnSTOPFlagUntilTimeout+0xb2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002eec:	0555      	lsls	r5, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002eee:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002ef0:	f044 0401 	orr.w	r4, r4, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ef4:	d504      	bpl.n	8002f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x68>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ef6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002efa:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8002efc:	f044 0408 	orr.w	r4, r4, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f00:	0597      	lsls	r7, r2, #22
 8002f02:	d504      	bpl.n	8002f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x76>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f04:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f08:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f0c:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f0e:	699a      	ldr	r2, [r3, #24]
 8002f10:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002f12:	bf44      	itt	mi
 8002f14:	2200      	movmi	r2, #0
 8002f16:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	07d1      	lsls	r1, r2, #31
 8002f1c:	d403      	bmi.n	8002f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	f042 0201 	orr.w	r2, r2, #1
 8002f24:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	4836      	ldr	r0, [pc, #216]	; (8003004 <I2C_WaitOnSTOPFlagUntilTimeout+0x16c>)
 8002f2a:	4002      	ands	r2, r0
 8002f2c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8002f2e:	6c73      	ldr	r3, [r6, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f30:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8002f34:	431c      	orrs	r4, r3
 8002f36:	6474      	str	r4, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8002f38:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002f3c:	f886 2041 	strb.w	r2, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f40:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
      return HAL_ERROR;
 8002f44:	2001      	movs	r0, #1
}
 8002f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f4a:	0550      	lsls	r0, r2, #21
 8002f4c:	d4d3      	bmi.n	8002ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x5e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f4e:	0595      	lsls	r5, r2, #22
 8002f50:	d4d8      	bmi.n	8002f04 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
  if (status != HAL_OK)
 8002f52:	2900      	cmp	r1, #0
 8002f54:	d1db      	bne.n	8002f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x76>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f56:	f7ff fd15 	bl	8002984 <HAL_GetTick>
 8002f5a:	eba0 0008 	sub.w	r0, r0, r8
 8002f5e:	42b8      	cmp	r0, r7
 8002f60:	d807      	bhi.n	8002f72 <I2C_WaitOnSTOPFlagUntilTimeout+0xda>
 8002f62:	b137      	cbz	r7, 8002f72 <I2C_WaitOnSTOPFlagUntilTimeout+0xda>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f64:	6833      	ldr	r3, [r6, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f66:	699a      	ldr	r2, [r3, #24]
 8002f68:	0692      	lsls	r2, r2, #26
 8002f6a:	d5a0      	bpl.n	8002eae <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8002f6c:	2000      	movs	r0, #0
}
 8002f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f72:	6833      	ldr	r3, [r6, #0]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	f012 0220 	ands.w	r2, r2, #32
 8002f7a:	d1f4      	bne.n	8002f66 <I2C_WaitOnSTOPFlagUntilTimeout+0xce>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f7c:	6c73      	ldr	r3, [r6, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8002f7e:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8002f82:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f88:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8c:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002f90:	2001      	movs	r0, #1
}
 8002f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8002f96:	4621      	mov	r1, r4
 8002f98:	e7a3      	b.n	8002ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f9a:	0692      	lsls	r2, r2, #26
 8002f9c:	d42c      	bmi.n	8002ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x160>
 8002f9e:	f1ba 0f00 	cmp.w	sl, #0
 8002fa2:	d19b      	bne.n	8002edc <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fa4:	f7ff fcee 	bl	8002984 <HAL_GetTick>
 8002fa8:	1b00      	subs	r0, r0, r4
 8002faa:	4287      	cmp	r7, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fac:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fae:	d301      	bcc.n	8002fb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x11c>
 8002fb0:	2f00      	cmp	r7, #0
 8002fb2:	d185      	bne.n	8002ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fb4:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002fb6:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fba:	6999      	ldr	r1, [r3, #24]
 8002fbc:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 8002fbe:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fc0:	d501      	bpl.n	8002fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
 8002fc2:	0441      	lsls	r1, r0, #17
 8002fc4:	d50d      	bpl.n	8002fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fc6:	699a      	ldr	r2, [r3, #24]
 8002fc8:	0690      	lsls	r0, r2, #26
 8002fca:	f53f af79 	bmi.w	8002ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fce:	f7ff fcd9 	bl	8002984 <HAL_GetTick>
 8002fd2:	1b00      	subs	r0, r0, r4
 8002fd4:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fd6:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fd8:	d9f5      	bls.n	8002fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fda:	2520      	movs	r5, #32
              status = HAL_ERROR;
 8002fdc:	f04f 0a01 	mov.w	sl, #1
 8002fe0:	e76e      	b.n	8002ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
              (tmp1 != I2C_CR2_STOP) && \
 8002fe2:	2a20      	cmp	r2, #32
 8002fe4:	d0ef      	beq.n	8002fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fec:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002fee:	f7ff fcc9 	bl	8002984 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ff2:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	e7e6      	b.n	8002fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
    if (status == HAL_OK)
 8002ff8:	f1ba 0f00 	cmp.w	sl, #0
 8002ffc:	f43f af6c 	beq.w	8002ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
 8003000:	e76c      	b.n	8002edc <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
 8003002:	bf00      	nop
 8003004:	fe00e800 	.word	0xfe00e800

08003008 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003008:	2800      	cmp	r0, #0
 800300a:	d04f      	beq.n	80030ac <HAL_I2C_Init+0xa4>
{
 800300c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800300e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003012:	4604      	mov	r4, r0
 8003014:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003018:	2b00      	cmp	r3, #0
 800301a:	d042      	beq.n	80030a2 <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 800301c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800301e:	2224      	movs	r2, #36	; 0x24
 8003020:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003024:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003026:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8003028:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800302c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8003030:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003032:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003034:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003036:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003038:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800303c:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800303e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003040:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003042:	d02a      	beq.n	800309a <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003044:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003048:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800304a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800304c:	bf04      	itt	eq
 800304e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8003052:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003054:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003056:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003058:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800305c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003060:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003062:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003064:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003066:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003068:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800306a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800306e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003072:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003074:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003076:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003078:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800307a:	4301      	orrs	r1, r0
 800307c:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800307e:	6819      	ldr	r1, [r3, #0]
 8003080:	f041 0101 	orr.w	r1, r1, #1
 8003084:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003086:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003088:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800308a:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800308c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003090:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003092:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 8003096:	4610      	mov	r0, r2
}
 8003098:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800309a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800309e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030a0:	e7d8      	b.n	8003054 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 80030a2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80030a6:	f7ff fa0b 	bl	80024c0 <HAL_I2C_MspInit>
 80030aa:	e7b7      	b.n	800301c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 80030ac:	2001      	movs	r0, #1
}
 80030ae:	4770      	bx	lr

080030b0 <HAL_I2C_Mem_Write>:
{
 80030b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030b4:	461f      	mov	r7, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80030ba:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 80030be:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	d132      	bne.n	800312c <HAL_I2C_Mem_Write+0x7c>
    if ((pData == NULL) || (Size == 0U))
 80030c6:	9b08      	ldr	r3, [sp, #32]
 80030c8:	4604      	mov	r4, r0
 80030ca:	b34b      	cbz	r3, 8003120 <HAL_I2C_Mem_Write+0x70>
 80030cc:	f1ba 0f00 	cmp.w	sl, #0
 80030d0:	d026      	beq.n	8003120 <HAL_I2C_Mem_Write+0x70>
    __HAL_LOCK(hi2c);
 80030d2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d028      	beq.n	800312c <HAL_I2C_Mem_Write+0x7c>
 80030da:	2301      	movs	r3, #1
 80030dc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80030e0:	460e      	mov	r6, r1
 80030e2:	4690      	mov	r8, r2
 80030e4:	f7ff fc4e 	bl	8002984 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030e8:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80030ea:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	0411      	lsls	r1, r2, #16
 80030f0:	d51f      	bpl.n	8003132 <HAL_I2C_Mem_Write+0x82>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f2:	f7ff fc47 	bl	8002984 <HAL_GetTick>
 80030f6:	1b40      	subs	r0, r0, r5
 80030f8:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030fa:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fc:	d9f6      	bls.n	80030ec <HAL_I2C_Mem_Write+0x3c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030fe:	699a      	ldr	r2, [r3, #24]
 8003100:	0412      	lsls	r2, r2, #16
 8003102:	d5f3      	bpl.n	80030ec <HAL_I2C_Mem_Write+0x3c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003104:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003106:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003108:	f043 0320 	orr.w	r3, r3, #32
          hi2c->State = HAL_I2C_STATE_READY;
 800310c:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800310e:	6463      	str	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8003110:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8003114:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      return HAL_ERROR;
 8003118:	2001      	movs	r0, #1
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800311a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          return HAL_ERROR;
 800311e:	e003      	b.n	8003128 <HAL_I2C_Mem_Write+0x78>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003124:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8003126:	2001      	movs	r0, #1
}
 8003128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800312c:	2002      	movs	r0, #2
}
 800312e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
 8003132:	9a08      	ldr	r2, [sp, #32]
 8003134:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003136:	2121      	movs	r1, #33	; 0x21
 8003138:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313c:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800313e:	2140      	movs	r1, #64	; 0x40
 8003140:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003144:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8003146:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800314a:	4973      	ldr	r1, [pc, #460]	; (8003318 <HAL_I2C_Mem_Write+0x268>)
    hi2c->XferISR   = NULL;
 800314c:	6362      	str	r2, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003152:	b2f9      	uxtb	r1, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 8003154:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003158:	f3c6 0609 	ubfx	r6, r6, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800315c:	4332      	orrs	r2, r6
 800315e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003162:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003166:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003168:	4649      	mov	r1, r9
 800316a:	462a      	mov	r2, r5
 800316c:	4620      	mov	r0, r4
 800316e:	f7ff fddd 	bl	8002d2c <I2C_WaitOnTXISFlagUntilTimeout>
 8003172:	2800      	cmp	r0, #0
 8003174:	f040 8085 	bne.w	8003282 <HAL_I2C_Mem_Write+0x1d2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003178:	2f01      	cmp	r7, #1
 800317a:	d176      	bne.n	800326a <HAL_I2C_Mem_Write+0x1ba>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800317c:	6822      	ldr	r2, [r4, #0]
 800317e:	fa5f f388 	uxtb.w	r3, r8
 8003182:	6293      	str	r3, [r2, #40]	; 0x28
 8003184:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003188:	d14d      	bne.n	8003226 <HAL_I2C_Mem_Write+0x176>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800318a:	6993      	ldr	r3, [r2, #24]
 800318c:	061f      	lsls	r7, r3, #24
 800318e:	d5fc      	bpl.n	800318a <HAL_I2C_Mem_Write+0xda>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003190:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	2bff      	cmp	r3, #255	; 0xff
 8003196:	d85c      	bhi.n	8003252 <HAL_I2C_Mem_Write+0x1a2>
      hi2c->XferSize = hi2c->XferCount;
 8003198:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800319a:	4860      	ldr	r0, [pc, #384]	; (800331c <HAL_I2C_Mem_Write+0x26c>)
      hi2c->XferSize = hi2c->XferCount;
 800319c:	b29b      	uxth	r3, r3
 800319e:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031a0:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80031a2:	6853      	ldr	r3, [r2, #4]
 80031a4:	4003      	ands	r3, r0
 80031a6:	4333      	orrs	r3, r6
 80031a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80031ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031b0:	6053      	str	r3, [r2, #4]
 80031b2:	4f5a      	ldr	r7, [pc, #360]	; (800331c <HAL_I2C_Mem_Write+0x26c>)
 80031b4:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8003324 <HAL_I2C_Mem_Write+0x274>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031b8:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80031bc:	e004      	b.n	80031c8 <HAL_I2C_Mem_Write+0x118>
    } while (hi2c->XferCount > 0U);
 80031be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 8092 	beq.w	80032ec <HAL_I2C_Mem_Write+0x23c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c8:	462a      	mov	r2, r5
 80031ca:	4649      	mov	r1, r9
 80031cc:	4620      	mov	r0, r4
 80031ce:	f7ff fdad 	bl	8002d2c <I2C_WaitOnTXISFlagUntilTimeout>
 80031d2:	2800      	cmp	r0, #0
 80031d4:	f040 8088 	bne.w	80032e8 <HAL_I2C_Mem_Write+0x238>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031da:	6822      	ldr	r2, [r4, #0]
 80031dc:	f813 1b01 	ldrb.w	r1, [r3], #1
 80031e0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80031e2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80031e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80031ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031ee:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031f4:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 80031f6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031f8:	2900      	cmp	r1, #0
 80031fa:	d0e0      	beq.n	80031be <HAL_I2C_Mem_Write+0x10e>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1de      	bne.n	80031be <HAL_I2C_Mem_Write+0x10e>
 8003200:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003204:	d147      	bne.n	8003296 <HAL_I2C_Mem_Write+0x1e6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003206:	6993      	ldr	r3, [r2, #24]
 8003208:	0619      	lsls	r1, r3, #24
 800320a:	d5fc      	bpl.n	8003206 <HAL_I2C_Mem_Write+0x156>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800320c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	2bff      	cmp	r3, #255	; 0xff
 8003212:	d95c      	bls.n	80032ce <HAL_I2C_Mem_Write+0x21e>
  MODIFY_REG(hi2c->Instance->CR2, \
 8003214:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003216:	f8a4 8028 	strh.w	r8, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800321a:	403b      	ands	r3, r7
 800321c:	4333      	orrs	r3, r6
 800321e:	ea43 030a 	orr.w	r3, r3, sl
 8003222:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003224:	e7cb      	b.n	80031be <HAL_I2C_Mem_Write+0x10e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003226:	6993      	ldr	r3, [r2, #24]
 8003228:	0618      	lsls	r0, r3, #24
 800322a:	d4b1      	bmi.n	8003190 <HAL_I2C_Mem_Write+0xe0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322c:	f7ff fbaa 	bl	8002984 <HAL_GetTick>
 8003230:	1b40      	subs	r0, r0, r5
 8003232:	4581      	cmp	r9, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003234:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003236:	d229      	bcs.n	800328c <HAL_I2C_Mem_Write+0x1dc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003238:	6993      	ldr	r3, [r2, #24]
 800323a:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800323e:	d1a1      	bne.n	8003184 <HAL_I2C_Mem_Write+0xd4>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003240:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003242:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003244:	430a      	orrs	r2, r1
 8003246:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003248:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800324c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 8003250:	e017      	b.n	8003282 <HAL_I2C_Mem_Write+0x1d2>
  MODIFY_REG(hi2c->Instance->CR2, \
 8003252:	6853      	ldr	r3, [r2, #4]
 8003254:	4931      	ldr	r1, [pc, #196]	; (800331c <HAL_I2C_Mem_Write+0x26c>)
 8003256:	400b      	ands	r3, r1
 8003258:	4333      	orrs	r3, r6
 800325a:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 800325e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003262:	21ff      	movs	r1, #255	; 0xff
 8003264:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8003266:	6053      	str	r3, [r2, #4]
}
 8003268:	e7a3      	b.n	80031b2 <HAL_I2C_Mem_Write+0x102>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8003270:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003272:	4649      	mov	r1, r9
 8003274:	462a      	mov	r2, r5
 8003276:	4620      	mov	r0, r4
 8003278:	f7ff fd58 	bl	8002d2c <I2C_WaitOnTXISFlagUntilTimeout>
 800327c:	2800      	cmp	r0, #0
 800327e:	f43f af7d 	beq.w	800317c <HAL_I2C_Mem_Write+0xcc>
      __HAL_UNLOCK(hi2c);
 8003282:	2300      	movs	r3, #0
 8003284:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003288:	2001      	movs	r0, #1
 800328a:	e74d      	b.n	8003128 <HAL_I2C_Mem_Write+0x78>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328c:	f1b9 0f00 	cmp.w	r9, #0
 8003290:	f47f af78 	bne.w	8003184 <HAL_I2C_Mem_Write+0xd4>
 8003294:	e7d0      	b.n	8003238 <HAL_I2C_Mem_Write+0x188>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003296:	6993      	ldr	r3, [r2, #24]
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	d4b7      	bmi.n	800320c <HAL_I2C_Mem_Write+0x15c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329c:	f7ff fb72 	bl	8002984 <HAL_GetTick>
 80032a0:	1b40      	subs	r0, r0, r5
 80032a2:	4581      	cmp	r9, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032a4:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	d302      	bcc.n	80032ae <HAL_I2C_Mem_Write+0x1fe>
 80032a8:	f1b9 0f00 	cmp.w	r9, #0
 80032ac:	d1a8      	bne.n	8003200 <HAL_I2C_Mem_Write+0x150>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032ae:	6993      	ldr	r3, [r2, #24]
 80032b0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 80032b4:	d1a4      	bne.n	8003200 <HAL_I2C_Mem_Write+0x150>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032b6:	6c62      	ldr	r2, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 80032b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032be:	430a      	orrs	r2, r1
 80032c0:	6462      	str	r2, [r4, #68]	; 0x44
          return HAL_ERROR;
 80032c2:	2001      	movs	r0, #1
          hi2c->State = HAL_I2C_STATE_READY;
 80032c4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
 80032cc:	e72c      	b.n	8003128 <HAL_I2C_Mem_Write+0x78>
          hi2c->XferSize = hi2c->XferCount;
 80032ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032d4:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80032d6:	6853      	ldr	r3, [r2, #4]
 80032d8:	403b      	ands	r3, r7
 80032da:	4333      	orrs	r3, r6
 80032dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80032e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032e4:	6053      	str	r3, [r2, #4]
}
 80032e6:	e76a      	b.n	80031be <HAL_I2C_Mem_Write+0x10e>
        return HAL_ERROR;
 80032e8:	2001      	movs	r0, #1
 80032ea:	e71d      	b.n	8003128 <HAL_I2C_Mem_Write+0x78>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ec:	462a      	mov	r2, r5
 80032ee:	4649      	mov	r1, r9
 80032f0:	4620      	mov	r0, r4
 80032f2:	f7ff fdd1 	bl	8002e98 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032f6:	2800      	cmp	r0, #0
 80032f8:	d1f6      	bne.n	80032e8 <HAL_I2C_Mem_Write+0x238>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032fa:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80032fc:	4d08      	ldr	r5, [pc, #32]	; (8003320 <HAL_I2C_Mem_Write+0x270>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032fe:	2120      	movs	r1, #32
 8003300:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	402a      	ands	r2, r5
 8003306:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003308:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800330c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003310:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003314:	e708      	b.n	8003128 <HAL_I2C_Mem_Write+0x78>
 8003316:	bf00      	nop
 8003318:	fc009800 	.word	0xfc009800
 800331c:	fc009c00 	.word	0xfc009c00
 8003320:	fe00e800 	.word	0xfe00e800
 8003324:	01ff0000 	.word	0x01ff0000

08003328 <HAL_I2C_Mem_Read>:
{
 8003328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800332c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800332e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003332:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 8003336:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003338:	2b20      	cmp	r3, #32
 800333a:	d132      	bne.n	80033a2 <HAL_I2C_Mem_Read+0x7a>
    if ((pData == NULL) || (Size == 0U))
 800333c:	9b08      	ldr	r3, [sp, #32]
 800333e:	4604      	mov	r4, r0
 8003340:	b34b      	cbz	r3, 8003396 <HAL_I2C_Mem_Read+0x6e>
 8003342:	f1ba 0f00 	cmp.w	sl, #0
 8003346:	d026      	beq.n	8003396 <HAL_I2C_Mem_Read+0x6e>
    __HAL_LOCK(hi2c);
 8003348:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800334c:	2b01      	cmp	r3, #1
 800334e:	d028      	beq.n	80033a2 <HAL_I2C_Mem_Read+0x7a>
 8003350:	2301      	movs	r3, #1
 8003352:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003356:	460f      	mov	r7, r1
 8003358:	4691      	mov	r9, r2
 800335a:	f7ff fb13 	bl	8002984 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800335e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003360:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003362:	699a      	ldr	r2, [r3, #24]
 8003364:	0411      	lsls	r1, r2, #16
 8003366:	d51f      	bpl.n	80033a8 <HAL_I2C_Mem_Read+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003368:	f7ff fb0c 	bl	8002984 <HAL_GetTick>
 800336c:	1b80      	subs	r0, r0, r6
 800336e:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003370:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003372:	d9f6      	bls.n	8003362 <HAL_I2C_Mem_Read+0x3a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	0412      	lsls	r2, r2, #16
 8003378:	d5f3      	bpl.n	8003362 <HAL_I2C_Mem_Read+0x3a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800337a:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800337c:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800337e:	f043 0320 	orr.w	r3, r3, #32
          hi2c->State = HAL_I2C_STATE_READY;
 8003382:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003384:	6463      	str	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8003386:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 800338a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      return HAL_ERROR;
 800338e:	2001      	movs	r0, #1
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003390:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          return HAL_ERROR;
 8003394:	e003      	b.n	800339e <HAL_I2C_Mem_Read+0x76>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800339a:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 800339c:	2001      	movs	r0, #1
}
 800339e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 80033a2:	2002      	movs	r0, #2
}
 80033a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
 80033a8:	9a08      	ldr	r2, [sp, #32]
 80033aa:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033ac:	2122      	movs	r1, #34	; 0x22
 80033ae:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b2:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033b4:	2140      	movs	r1, #64	; 0x40
 80033b6:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ba:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80033bc:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80033c0:	497a      	ldr	r1, [pc, #488]	; (80035ac <HAL_I2C_Mem_Read+0x284>)
    hi2c->XferISR   = NULL;
 80033c2:	6362      	str	r2, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033c8:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
 80033cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033d0:	f3c7 0709 	ubfx	r7, r7, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80033d4:	433a      	orrs	r2, r7
 80033d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033da:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033dc:	4629      	mov	r1, r5
 80033de:	4632      	mov	r2, r6
 80033e0:	4620      	mov	r0, r4
 80033e2:	f7ff fca3 	bl	8002d2c <I2C_WaitOnTXISFlagUntilTimeout>
 80033e6:	2800      	cmp	r0, #0
 80033e8:	f040 808e 	bne.w	8003508 <HAL_I2C_Mem_Read+0x1e0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033ec:	f1b8 0f01 	cmp.w	r8, #1
 80033f0:	d17e      	bne.n	80034f0 <HAL_I2C_Mem_Read+0x1c8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033f2:	6822      	ldr	r2, [r4, #0]
 80033f4:	fa5f f389 	uxtb.w	r3, r9
 80033f8:	6293      	str	r3, [r2, #40]	; 0x28
 80033fa:	1c68      	adds	r0, r5, #1
 80033fc:	d156      	bne.n	80034ac <HAL_I2C_Mem_Read+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033fe:	6993      	ldr	r3, [r2, #24]
 8003400:	0659      	lsls	r1, r3, #25
 8003402:	d5fc      	bpl.n	80033fe <HAL_I2C_Mem_Read+0xd6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003404:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	2bff      	cmp	r3, #255	; 0xff
 800340a:	d865      	bhi.n	80034d8 <HAL_I2C_Mem_Read+0x1b0>
      hi2c->XferSize = hi2c->XferCount;
 800340c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800340e:	4867      	ldr	r0, [pc, #412]	; (80035ac <HAL_I2C_Mem_Read+0x284>)
      hi2c->XferSize = hi2c->XferCount;
 8003410:	b29b      	uxth	r3, r3
 8003412:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003414:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8003416:	6853      	ldr	r3, [r2, #4]
 8003418:	4003      	ands	r3, r0
 800341a:	433b      	orrs	r3, r7
 800341c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003420:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003424:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8003428:	6053      	str	r3, [r2, #4]
 800342a:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80035b4 <HAL_I2C_Mem_Read+0x28c>
 800342e:	f8df a188 	ldr.w	sl, [pc, #392]	; 80035b8 <HAL_I2C_Mem_Read+0x290>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003432:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8003436:	1c68      	adds	r0, r5, #1
 8003438:	d11d      	bne.n	8003476 <HAL_I2C_Mem_Read+0x14e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800343a:	6993      	ldr	r3, [r2, #24]
 800343c:	0759      	lsls	r1, r3, #29
 800343e:	d5fc      	bpl.n	800343a <HAL_I2C_Mem_Read+0x112>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003442:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003444:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003446:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003448:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800344a:	3b01      	subs	r3, #1
 800344c:	b29b      	uxth	r3, r3
 800344e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003450:	3201      	adds	r2, #1
      hi2c->XferSize--;
 8003452:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003454:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003456:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003458:	3b01      	subs	r3, #1
 800345a:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800345c:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800345e:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003460:	b10a      	cbz	r2, 8003466 <HAL_I2C_Mem_Read+0x13e>
 8003462:	2b00      	cmp	r3, #0
 8003464:	d059      	beq.n	800351a <HAL_I2C_Mem_Read+0x1f2>
    } while (hi2c->XferCount > 0U);
 8003466:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 8087 	beq.w	800357e <HAL_I2C_Mem_Read+0x256>
 8003470:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003472:	6822      	ldr	r2, [r4, #0]
 8003474:	d0e1      	beq.n	800343a <HAL_I2C_Mem_Read+0x112>
 8003476:	6993      	ldr	r3, [r2, #24]
 8003478:	075b      	lsls	r3, r3, #29
 800347a:	d4e1      	bmi.n	8003440 <HAL_I2C_Mem_Read+0x118>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347c:	f7ff fa82 	bl	8002984 <HAL_GetTick>
 8003480:	1b80      	subs	r0, r0, r6
 8003482:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003484:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003486:	d301      	bcc.n	800348c <HAL_I2C_Mem_Read+0x164>
 8003488:	2d00      	cmp	r5, #0
 800348a:	d1d4      	bne.n	8003436 <HAL_I2C_Mem_Read+0x10e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800348c:	6993      	ldr	r3, [r2, #24]
 800348e:	f013 0304 	ands.w	r3, r3, #4
 8003492:	d1d0      	bne.n	8003436 <HAL_I2C_Mem_Read+0x10e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003494:	6c62      	ldr	r2, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8003496:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 800349a:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800349c:	430a      	orrs	r2, r1
 800349e:	6462      	str	r2, [r4, #68]	; 0x44
          return HAL_ERROR;
 80034a0:	2001      	movs	r0, #1
          hi2c->State = HAL_I2C_STATE_READY;
 80034a2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
 80034aa:	e778      	b.n	800339e <HAL_I2C_Mem_Read+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ac:	6993      	ldr	r3, [r2, #24]
 80034ae:	065b      	lsls	r3, r3, #25
 80034b0:	d4a8      	bmi.n	8003404 <HAL_I2C_Mem_Read+0xdc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b2:	f7ff fa67 	bl	8002984 <HAL_GetTick>
 80034b6:	1b80      	subs	r0, r0, r6
 80034b8:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034ba:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034bc:	d229      	bcs.n	8003512 <HAL_I2C_Mem_Read+0x1ea>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034be:	6993      	ldr	r3, [r2, #24]
 80034c0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80034c4:	d199      	bne.n	80033fa <HAL_I2C_Mem_Read+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ca:	430a      	orrs	r2, r1
 80034cc:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034ce:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 80034d6:	e017      	b.n	8003508 <HAL_I2C_Mem_Read+0x1e0>
  MODIFY_REG(hi2c->Instance->CR2, \
 80034d8:	6853      	ldr	r3, [r2, #4]
 80034da:	4934      	ldr	r1, [pc, #208]	; (80035ac <HAL_I2C_Mem_Read+0x284>)
 80034dc:	400b      	ands	r3, r1
 80034de:	433b      	orrs	r3, r7
 80034e0:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 80034e4:	f443 3392 	orr.w	r3, r3, #74752	; 0x12400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034e8:	21ff      	movs	r1, #255	; 0xff
 80034ea:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80034ec:	6053      	str	r3, [r2, #4]
}
 80034ee:	e79c      	b.n	800342a <HAL_I2C_Mem_Read+0x102>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80034f6:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f8:	4629      	mov	r1, r5
 80034fa:	4632      	mov	r2, r6
 80034fc:	4620      	mov	r0, r4
 80034fe:	f7ff fc15 	bl	8002d2c <I2C_WaitOnTXISFlagUntilTimeout>
 8003502:	2800      	cmp	r0, #0
 8003504:	f43f af75 	beq.w	80033f2 <HAL_I2C_Mem_Read+0xca>
      __HAL_UNLOCK(hi2c);
 8003508:	2300      	movs	r3, #0
 800350a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800350e:	2001      	movs	r0, #1
 8003510:	e745      	b.n	800339e <HAL_I2C_Mem_Read+0x76>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003512:	2d00      	cmp	r5, #0
 8003514:	f47f af71 	bne.w	80033fa <HAL_I2C_Mem_Read+0xd2>
 8003518:	e7d1      	b.n	80034be <HAL_I2C_Mem_Read+0x196>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800351a:	6822      	ldr	r2, [r4, #0]
 800351c:	1c68      	adds	r0, r5, #1
 800351e:	d110      	bne.n	8003542 <HAL_I2C_Mem_Read+0x21a>
 8003520:	6993      	ldr	r3, [r2, #24]
 8003522:	0619      	lsls	r1, r3, #24
 8003524:	d5fc      	bpl.n	8003520 <HAL_I2C_Mem_Read+0x1f8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003526:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	2bff      	cmp	r3, #255	; 0xff
 800352c:	d919      	bls.n	8003562 <HAL_I2C_Mem_Read+0x23a>
  MODIFY_REG(hi2c->Instance->CR2, \
 800352e:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003530:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8003534:	ea03 0308 	and.w	r3, r3, r8
 8003538:	433b      	orrs	r3, r7
 800353a:	ea43 030a 	orr.w	r3, r3, sl
 800353e:	6053      	str	r3, [r2, #4]
}
 8003540:	e791      	b.n	8003466 <HAL_I2C_Mem_Read+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003542:	6993      	ldr	r3, [r2, #24]
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	d4ee      	bmi.n	8003526 <HAL_I2C_Mem_Read+0x1fe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003548:	f7ff fa1c 	bl	8002984 <HAL_GetTick>
 800354c:	1b80      	subs	r0, r0, r6
 800354e:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003550:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003552:	d301      	bcc.n	8003558 <HAL_I2C_Mem_Read+0x230>
 8003554:	2d00      	cmp	r5, #0
 8003556:	d1e1      	bne.n	800351c <HAL_I2C_Mem_Read+0x1f4>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003558:	6993      	ldr	r3, [r2, #24]
 800355a:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800355e:	d1dd      	bne.n	800351c <HAL_I2C_Mem_Read+0x1f4>
 8003560:	e798      	b.n	8003494 <HAL_I2C_Mem_Read+0x16c>
          hi2c->XferSize = hi2c->XferCount;
 8003562:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003568:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800356a:	6853      	ldr	r3, [r2, #4]
 800356c:	ea03 0308 	and.w	r3, r3, r8
 8003570:	433b      	orrs	r3, r7
 8003572:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003576:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800357a:	6053      	str	r3, [r2, #4]
}
 800357c:	e773      	b.n	8003466 <HAL_I2C_Mem_Read+0x13e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800357e:	4632      	mov	r2, r6
 8003580:	4629      	mov	r1, r5
 8003582:	4620      	mov	r0, r4
 8003584:	f7ff fc88 	bl	8002e98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003588:	b968      	cbnz	r0, 80035a6 <HAL_I2C_Mem_Read+0x27e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800358a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800358c:	4d08      	ldr	r5, [pc, #32]	; (80035b0 <HAL_I2C_Mem_Read+0x288>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800358e:	2120      	movs	r1, #32
 8003590:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	402a      	ands	r2, r5
 8003596:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003598:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800359c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035a0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80035a4:	e6fb      	b.n	800339e <HAL_I2C_Mem_Read+0x76>
      return HAL_ERROR;
 80035a6:	2001      	movs	r0, #1
 80035a8:	e6f9      	b.n	800339e <HAL_I2C_Mem_Read+0x76>
 80035aa:	bf00      	nop
 80035ac:	fc009800 	.word	0xfc009800
 80035b0:	fe00e800 	.word	0xfe00e800
 80035b4:	fc009c00 	.word	0xfc009c00
 80035b8:	01ff0000 	.word	0x01ff0000

080035bc <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035bc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80035c0:	2a20      	cmp	r2, #32
 80035c2:	d123      	bne.n	800360c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80035c4:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80035cc:	2a01      	cmp	r2, #1
 80035ce:	4603      	mov	r3, r0
 80035d0:	d01c      	beq.n	800360c <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035d2:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035d4:	2024      	movs	r0, #36	; 0x24
{
 80035d6:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035d8:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80035dc:	6810      	ldr	r0, [r2, #0]
 80035de:	f020 0001 	bic.w	r0, r0, #1
 80035e2:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035e4:	6810      	ldr	r0, [r2, #0]
 80035e6:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80035ea:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035ec:	6810      	ldr	r0, [r2, #0]
 80035ee:	4301      	orrs	r1, r0
 80035f0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035f2:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f4:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 80035f8:	f041 0101 	orr.w	r1, r1, #1
 80035fc:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80035fe:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003602:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40

    return HAL_OK;
 8003606:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003608:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800360c:	2002      	movs	r0, #2
}
 800360e:	4770      	bx	lr

08003610 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003610:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003614:	2a20      	cmp	r2, #32
 8003616:	d122      	bne.n	800365e <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8003618:	b500      	push	{lr}
 800361a:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800361e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8003622:	2a01      	cmp	r2, #1
 8003624:	4603      	mov	r3, r0
 8003626:	d01c      	beq.n	8003662 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003628:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800362a:	2024      	movs	r0, #36	; 0x24
 800362c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003630:	6810      	ldr	r0, [r2, #0]
 8003632:	f020 0001 	bic.w	r0, r0, #1
 8003636:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003638:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800363a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800363e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003642:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003644:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003646:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 800364a:	f041 0101 	orr.w	r1, r1, #1
 800364e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003650:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003654:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40

    return HAL_OK;
 8003658:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 800365a:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800365e:	2002      	movs	r0, #2
}
 8003660:	4770      	bx	lr
    return HAL_BUSY;
 8003662:	2002      	movs	r0, #2
}
 8003664:	f85d fb04 	ldr.w	pc, [sp], #4

08003668 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003668:	2800      	cmp	r0, #0
 800366a:	f000 827b 	beq.w	8003b64 <HAL_RCC_OscConfig+0x4fc>
{
 800366e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003672:	6803      	ldr	r3, [r0, #0]
 8003674:	07df      	lsls	r7, r3, #31
{
 8003676:	b083      	sub	sp, #12
 8003678:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800367a:	d53d      	bpl.n	80036f8 <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800367c:	49ad      	ldr	r1, [pc, #692]	; (8003934 <HAL_RCC_OscConfig+0x2cc>)
 800367e:	684a      	ldr	r2, [r1, #4]
 8003680:	f002 020c 	and.w	r2, r2, #12
 8003684:	2a04      	cmp	r2, #4
 8003686:	f000 8162 	beq.w	800394e <HAL_RCC_OscConfig+0x2e6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800368a:	684a      	ldr	r2, [r1, #4]
 800368c:	f002 020c 	and.w	r2, r2, #12
 8003690:	2a08      	cmp	r2, #8
 8003692:	f000 8155 	beq.w	8003940 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003696:	6863      	ldr	r3, [r4, #4]
 8003698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800369c:	f000 816e 	beq.w	800397c <HAL_RCC_OscConfig+0x314>
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 8196 	beq.w	80039d2 <HAL_RCC_OscConfig+0x36a>
 80036a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036aa:	f000 82b8 	beq.w	8003c1e <HAL_RCC_OscConfig+0x5b6>
 80036ae:	4ba1      	ldr	r3, [pc, #644]	; (8003934 <HAL_RCC_OscConfig+0x2cc>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036be:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7ff f960 	bl	8002984 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c4:	4f9b      	ldr	r7, [pc, #620]	; (8003934 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80036c6:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036cc:	2601      	movs	r6, #1
 80036ce:	e005      	b.n	80036dc <HAL_RCC_OscConfig+0x74>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d0:	f7ff f958 	bl	8002984 <HAL_GetTick>
 80036d4:	1b40      	subs	r0, r0, r5
 80036d6:	2864      	cmp	r0, #100	; 0x64
 80036d8:	f200 8177 	bhi.w	80039ca <HAL_RCC_OscConfig+0x362>
 80036dc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	fa98 f3a8 	rbit	r3, r8
 80036e6:	fab3 f383 	clz	r3, r3
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	fa06 f303 	lsl.w	r3, r6, r3
 80036f2:	4213      	tst	r3, r2
 80036f4:	d0ec      	beq.n	80036d0 <HAL_RCC_OscConfig+0x68>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	079e      	lsls	r6, r3, #30
 80036fa:	d541      	bpl.n	8003780 <HAL_RCC_OscConfig+0x118>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036fc:	4a8d      	ldr	r2, [pc, #564]	; (8003934 <HAL_RCC_OscConfig+0x2cc>)
 80036fe:	6851      	ldr	r1, [r2, #4]
 8003700:	f011 0f0c 	tst.w	r1, #12
 8003704:	f000 80cb 	beq.w	800389e <HAL_RCC_OscConfig+0x236>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003708:	6851      	ldr	r1, [r2, #4]
 800370a:	f001 010c 	and.w	r1, r1, #12
 800370e:	2908      	cmp	r1, #8
 8003710:	f000 80be 	beq.w	8003890 <HAL_RCC_OscConfig+0x228>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003714:	68e2      	ldr	r2, [r4, #12]
 8003716:	2a00      	cmp	r2, #0
 8003718:	f000 81b4 	beq.w	8003a84 <HAL_RCC_OscConfig+0x41c>
 800371c:	2501      	movs	r5, #1
 800371e:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800372a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800372e:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003730:	4f80      	ldr	r7, [pc, #512]	; (8003934 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_ENABLE();
 8003732:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8003734:	f7ff f926 	bl	8002984 <HAL_GetTick>
 8003738:	f04f 0802 	mov.w	r8, #2
 800373c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373e:	e005      	b.n	800374c <HAL_RCC_OscConfig+0xe4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003740:	f7ff f920 	bl	8002984 <HAL_GetTick>
 8003744:	1b80      	subs	r0, r0, r6
 8003746:	2802      	cmp	r0, #2
 8003748:	f200 813f 	bhi.w	80039ca <HAL_RCC_OscConfig+0x362>
 800374c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	fa98 f3a8 	rbit	r3, r8
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	fa05 f303 	lsl.w	r3, r5, r3
 8003762:	4213      	tst	r3, r2
 8003764:	d0ec      	beq.n	8003740 <HAL_RCC_OscConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003766:	6839      	ldr	r1, [r7, #0]
 8003768:	22f8      	movs	r2, #248	; 0xf8
 800376a:	fa92 f2a2 	rbit	r2, r2
 800376e:	6923      	ldr	r3, [r4, #16]
 8003770:	fab2 f282 	clz	r2, r2
 8003774:	4093      	lsls	r3, r2
 8003776:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800377a:	4313      	orrs	r3, r2
 800377c:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	071d      	lsls	r5, r3, #28
 8003782:	d421      	bmi.n	80037c8 <HAL_RCC_OscConfig+0x160>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003784:	0758      	lsls	r0, r3, #29
 8003786:	d54c      	bpl.n	8003822 <HAL_RCC_OscConfig+0x1ba>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003788:	4b6a      	ldr	r3, [pc, #424]	; (8003934 <HAL_RCC_OscConfig+0x2cc>)
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	00d1      	lsls	r1, r2, #3
 800378e:	f140 80c4 	bpl.w	800391a <HAL_RCC_OscConfig+0x2b2>
    FlagStatus       pwrclkchanged = RESET;
 8003792:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003796:	4d68      	ldr	r5, [pc, #416]	; (8003938 <HAL_RCC_OscConfig+0x2d0>)
 8003798:	682b      	ldr	r3, [r5, #0]
 800379a:	05da      	lsls	r2, r3, #23
 800379c:	f140 8105 	bpl.w	80039aa <HAL_RCC_OscConfig+0x342>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a0:	68a3      	ldr	r3, [r4, #8]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	f000 8194 	beq.w	8003ad0 <HAL_RCC_OscConfig+0x468>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8135 	beq.w	8003a18 <HAL_RCC_OscConfig+0x3b0>
 80037ae:	2b05      	cmp	r3, #5
 80037b0:	4b60      	ldr	r3, [pc, #384]	; (8003934 <HAL_RCC_OscConfig+0x2cc>)
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	f000 81ce 	beq.w	8003b54 <HAL_RCC_OscConfig+0x4ec>
 80037b8:	f022 0201 	bic.w	r2, r2, #1
 80037bc:	621a      	str	r2, [r3, #32]
 80037be:	6a1a      	ldr	r2, [r3, #32]
 80037c0:	f022 0204 	bic.w	r2, r2, #4
 80037c4:	621a      	str	r2, [r3, #32]
 80037c6:	e188      	b.n	8003ada <HAL_RCC_OscConfig+0x472>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037c8:	6962      	ldr	r2, [r4, #20]
 80037ca:	2a00      	cmp	r2, #0
 80037cc:	d07e      	beq.n	80038cc <HAL_RCC_OscConfig+0x264>
 80037ce:	2501      	movs	r5, #1
 80037d0:	fa95 f2a5 	rbit	r2, r5
      __HAL_RCC_LSI_ENABLE();
 80037d4:	4b59      	ldr	r3, [pc, #356]	; (800393c <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d6:	4f57      	ldr	r7, [pc, #348]	; (8003934 <HAL_RCC_OscConfig+0x2cc>)
      __HAL_RCC_LSI_ENABLE();
 80037d8:	fab2 f282 	clz	r2, r2
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	f04f 0802 	mov.w	r8, #2
 80037e4:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 80037e6:	f7ff f8cd 	bl	8002984 <HAL_GetTick>
 80037ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ec:	e005      	b.n	80037fa <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ee:	f7ff f8c9 	bl	8002984 <HAL_GetTick>
 80037f2:	1b80      	subs	r0, r0, r6
 80037f4:	2802      	cmp	r0, #2
 80037f6:	f200 80e8 	bhi.w	80039ca <HAL_RCC_OscConfig+0x362>
 80037fa:	fa98 f3a8 	rbit	r3, r8
 80037fe:	fa98 f3a8 	rbit	r3, r8
 8003802:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003808:	fa98 f3a8 	rbit	r3, r8
 800380c:	fab3 f383 	clz	r3, r3
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	fa05 f303 	lsl.w	r3, r5, r3
 8003818:	4213      	tst	r3, r2
 800381a:	d0e8      	beq.n	80037ee <HAL_RCC_OscConfig+0x186>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	0758      	lsls	r0, r3, #29
 8003820:	d4b2      	bmi.n	8003788 <HAL_RCC_OscConfig+0x120>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003822:	69a0      	ldr	r0, [r4, #24]
 8003824:	b380      	cbz	r0, 8003888 <HAL_RCC_OscConfig+0x220>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003826:	4d43      	ldr	r5, [pc, #268]	; (8003934 <HAL_RCC_OscConfig+0x2cc>)
 8003828:	686b      	ldr	r3, [r5, #4]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b08      	cmp	r3, #8
 8003830:	f000 8178 	beq.w	8003b24 <HAL_RCC_OscConfig+0x4bc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003834:	2802      	cmp	r0, #2
 8003836:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800383a:	f000 8195 	beq.w	8003b68 <HAL_RCC_OscConfig+0x500>
 800383e:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800384a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7ff f896 	bl	8002984 <HAL_GetTick>
 8003858:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800385c:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800385e:	2601      	movs	r6, #1
 8003860:	e005      	b.n	800386e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003862:	f7ff f88f 	bl	8002984 <HAL_GetTick>
 8003866:	1b00      	subs	r0, r0, r4
 8003868:	2802      	cmp	r0, #2
 800386a:	f200 80ae 	bhi.w	80039ca <HAL_RCC_OscConfig+0x362>
 800386e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003872:	682a      	ldr	r2, [r5, #0]
 8003874:	fa97 f3a7 	rbit	r3, r7
 8003878:	fab3 f383 	clz	r3, r3
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	fa06 f303 	lsl.w	r3, r6, r3
 8003884:	4213      	tst	r3, r2
 8003886:	d1ec      	bne.n	8003862 <HAL_RCC_OscConfig+0x1fa>
        }
      }
    }
  }

  return HAL_OK;
 8003888:	2000      	movs	r0, #0
}
 800388a:	b003      	add	sp, #12
 800388c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003890:	6852      	ldr	r2, [r2, #4]
 8003892:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8003896:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800389a:	f47f af3b 	bne.w	8003714 <HAL_RCC_OscConfig+0xac>
 800389e:	2202      	movs	r2, #2
 80038a0:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a4:	4923      	ldr	r1, [pc, #140]	; (8003934 <HAL_RCC_OscConfig+0x2cc>)
 80038a6:	6808      	ldr	r0, [r1, #0]
 80038a8:	fa92 f2a2 	rbit	r2, r2
 80038ac:	fab2 f282 	clz	r2, r2
 80038b0:	f002 021f 	and.w	r2, r2, #31
 80038b4:	2101      	movs	r1, #1
 80038b6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ba:	4202      	tst	r2, r0
 80038bc:	d064      	beq.n	8003988 <HAL_RCC_OscConfig+0x320>
 80038be:	68e2      	ldr	r2, [r4, #12]
 80038c0:	428a      	cmp	r2, r1
 80038c2:	d061      	beq.n	8003988 <HAL_RCC_OscConfig+0x320>
        return HAL_ERROR;
 80038c4:	2001      	movs	r0, #1
}
 80038c6:	b003      	add	sp, #12
 80038c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038cc:	2601      	movs	r6, #1
 80038ce:	fa96 f1a6 	rbit	r1, r6
      __HAL_RCC_LSI_DISABLE();
 80038d2:	4b1a      	ldr	r3, [pc, #104]	; (800393c <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d4:	4f17      	ldr	r7, [pc, #92]	; (8003934 <HAL_RCC_OscConfig+0x2cc>)
      __HAL_RCC_LSI_DISABLE();
 80038d6:	fab1 f181 	clz	r1, r1
 80038da:	440b      	add	r3, r1
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	f04f 0802 	mov.w	r8, #2
 80038e2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80038e4:	f7ff f84e 	bl	8002984 <HAL_GetTick>
 80038e8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ea:	e004      	b.n	80038f6 <HAL_RCC_OscConfig+0x28e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ec:	f7ff f84a 	bl	8002984 <HAL_GetTick>
 80038f0:	1b40      	subs	r0, r0, r5
 80038f2:	2802      	cmp	r0, #2
 80038f4:	d869      	bhi.n	80039ca <HAL_RCC_OscConfig+0x362>
 80038f6:	fa98 f3a8 	rbit	r3, r8
 80038fa:	fa98 f3a8 	rbit	r3, r8
 80038fe:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003904:	fa98 f3a8 	rbit	r3, r8
 8003908:	fab3 f383 	clz	r3, r3
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	fa06 f303 	lsl.w	r3, r6, r3
 8003914:	4213      	tst	r3, r2
 8003916:	d1e9      	bne.n	80038ec <HAL_RCC_OscConfig+0x284>
 8003918:	e780      	b.n	800381c <HAL_RCC_OscConfig+0x1b4>
      __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003920:	61da      	str	r2, [r3, #28]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003928:	9301      	str	r3, [sp, #4]
 800392a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800392c:	f04f 0801 	mov.w	r8, #1
 8003930:	e731      	b.n	8003796 <HAL_RCC_OscConfig+0x12e>
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	40007000 	.word	0x40007000
 800393c:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003940:	684a      	ldr	r2, [r1, #4]
 8003942:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8003946:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800394a:	f47f aea4 	bne.w	8003696 <HAL_RCC_OscConfig+0x2e>
 800394e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003952:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003956:	49b8      	ldr	r1, [pc, #736]	; (8003c38 <HAL_RCC_OscConfig+0x5d0>)
 8003958:	6808      	ldr	r0, [r1, #0]
 800395a:	fa92 f2a2 	rbit	r2, r2
 800395e:	fab2 f282 	clz	r2, r2
 8003962:	f002 021f 	and.w	r2, r2, #31
 8003966:	2101      	movs	r1, #1
 8003968:	fa01 f202 	lsl.w	r2, r1, r2
 800396c:	4202      	tst	r2, r0
 800396e:	f43f aec3 	beq.w	80036f8 <HAL_RCC_OscConfig+0x90>
 8003972:	6862      	ldr	r2, [r4, #4]
 8003974:	2a00      	cmp	r2, #0
 8003976:	f47f aebf 	bne.w	80036f8 <HAL_RCC_OscConfig+0x90>
 800397a:	e7a3      	b.n	80038c4 <HAL_RCC_OscConfig+0x25c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800397c:	4aae      	ldr	r2, [pc, #696]	; (8003c38 <HAL_RCC_OscConfig+0x5d0>)
 800397e:	6813      	ldr	r3, [r2, #0]
 8003980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003984:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003986:	e69b      	b.n	80036c0 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003988:	4dab      	ldr	r5, [pc, #684]	; (8003c38 <HAL_RCC_OscConfig+0x5d0>)
 800398a:	22f8      	movs	r2, #248	; 0xf8
 800398c:	6828      	ldr	r0, [r5, #0]
 800398e:	fa92 f2a2 	rbit	r2, r2
 8003992:	fab2 f182 	clz	r1, r2
 8003996:	6922      	ldr	r2, [r4, #16]
 8003998:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 800399c:	408a      	lsls	r2, r1
 800399e:	4302      	orrs	r2, r0
 80039a0:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a2:	071d      	lsls	r5, r3, #28
 80039a4:	f57f aeee 	bpl.w	8003784 <HAL_RCC_OscConfig+0x11c>
 80039a8:	e70e      	b.n	80037c8 <HAL_RCC_OscConfig+0x160>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039aa:	682b      	ldr	r3, [r5, #0]
 80039ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80039b2:	f7fe ffe7 	bl	8002984 <HAL_GetTick>
 80039b6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b8:	682b      	ldr	r3, [r5, #0]
 80039ba:	05db      	lsls	r3, r3, #23
 80039bc:	f53f aef0 	bmi.w	80037a0 <HAL_RCC_OscConfig+0x138>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c0:	f7fe ffe0 	bl	8002984 <HAL_GetTick>
 80039c4:	1b80      	subs	r0, r0, r6
 80039c6:	2864      	cmp	r0, #100	; 0x64
 80039c8:	d9f6      	bls.n	80039b8 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 80039ca:	2003      	movs	r0, #3
}
 80039cc:	b003      	add	sp, #12
 80039ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d2:	4d99      	ldr	r5, [pc, #612]	; (8003c38 <HAL_RCC_OscConfig+0x5d0>)
 80039d4:	682b      	ldr	r3, [r5, #0]
 80039d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039da:	602b      	str	r3, [r5, #0]
 80039dc:	682b      	ldr	r3, [r5, #0]
 80039de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80039e4:	f7fe ffce 	bl	8002984 <HAL_GetTick>
 80039e8:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ec:	2701      	movs	r7, #1
        tickstart = HAL_GetTick();
 80039ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f0:	e004      	b.n	80039fc <HAL_RCC_OscConfig+0x394>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f2:	f7fe ffc7 	bl	8002984 <HAL_GetTick>
 80039f6:	1b80      	subs	r0, r0, r6
 80039f8:	2864      	cmp	r0, #100	; 0x64
 80039fa:	d8e6      	bhi.n	80039ca <HAL_RCC_OscConfig+0x362>
 80039fc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a00:	682a      	ldr	r2, [r5, #0]
 8003a02:	fa98 f3a8 	rbit	r3, r8
 8003a06:	fab3 f383 	clz	r3, r3
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	fa07 f303 	lsl.w	r3, r7, r3
 8003a12:	4213      	tst	r3, r2
 8003a14:	d1ed      	bne.n	80039f2 <HAL_RCC_OscConfig+0x38a>
 8003a16:	e66e      	b.n	80036f6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a18:	4d87      	ldr	r5, [pc, #540]	; (8003c38 <HAL_RCC_OscConfig+0x5d0>)
 8003a1a:	6a2b      	ldr	r3, [r5, #32]
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	622b      	str	r3, [r5, #32]
 8003a22:	6a2b      	ldr	r3, [r5, #32]
 8003a24:	f023 0304 	bic.w	r3, r3, #4
 8003a28:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003a2a:	f7fe ffab 	bl	8002984 <HAL_GetTick>
 8003a2e:	f04f 0902 	mov.w	r9, #2
 8003a32:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a34:	2701      	movs	r7, #1
 8003a36:	e013      	b.n	8003a60 <HAL_RCC_OscConfig+0x3f8>
 8003a38:	fa99 f3a9 	rbit	r3, r9
 8003a3c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003a3e:	fa99 f3a9 	rbit	r3, r9
 8003a42:	fab3 f383 	clz	r3, r3
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	fa07 f303 	lsl.w	r3, r7, r3
 8003a4e:	4213      	tst	r3, r2
 8003a50:	d00e      	beq.n	8003a70 <HAL_RCC_OscConfig+0x408>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fe ff97 	bl	8002984 <HAL_GetTick>
 8003a56:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a5a:	1b80      	subs	r0, r0, r6
 8003a5c:	4298      	cmp	r0, r3
 8003a5e:	d8b4      	bhi.n	80039ca <HAL_RCC_OscConfig+0x362>
 8003a60:	fa99 f3a9 	rbit	r3, r9
 8003a64:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0e5      	beq.n	8003a38 <HAL_RCC_OscConfig+0x3d0>
 8003a6c:	6a2a      	ldr	r2, [r5, #32]
 8003a6e:	e7e6      	b.n	8003a3e <HAL_RCC_OscConfig+0x3d6>
    if(pwrclkchanged == SET)
 8003a70:	f1b8 0f00 	cmp.w	r8, #0
 8003a74:	f43f aed5 	beq.w	8003822 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a78:	4a6f      	ldr	r2, [pc, #444]	; (8003c38 <HAL_RCC_OscConfig+0x5d0>)
 8003a7a:	69d3      	ldr	r3, [r2, #28]
 8003a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a80:	61d3      	str	r3, [r2, #28]
 8003a82:	e6ce      	b.n	8003822 <HAL_RCC_OscConfig+0x1ba>
 8003a84:	2601      	movs	r6, #1
 8003a86:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8003a8a:	fab3 f383 	clz	r3, r3
 8003a8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a96:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a98:	4f67      	ldr	r7, [pc, #412]	; (8003c38 <HAL_RCC_OscConfig+0x5d0>)
        __HAL_RCC_HSI_DISABLE();
 8003a9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a9c:	f7fe ff72 	bl	8002984 <HAL_GetTick>
 8003aa0:	f04f 0802 	mov.w	r8, #2
 8003aa4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa6:	e004      	b.n	8003ab2 <HAL_RCC_OscConfig+0x44a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aa8:	f7fe ff6c 	bl	8002984 <HAL_GetTick>
 8003aac:	1b40      	subs	r0, r0, r5
 8003aae:	2802      	cmp	r0, #2
 8003ab0:	d88b      	bhi.n	80039ca <HAL_RCC_OscConfig+0x362>
 8003ab2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	fa98 f3a8 	rbit	r3, r8
 8003abc:	fab3 f383 	clz	r3, r3
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	fa06 f303 	lsl.w	r3, r6, r3
 8003ac8:	4213      	tst	r3, r2
 8003aca:	d1ed      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x440>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	e657      	b.n	8003780 <HAL_RCC_OscConfig+0x118>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad0:	4a59      	ldr	r2, [pc, #356]	; (8003c38 <HAL_RCC_OscConfig+0x5d0>)
 8003ad2:	6a13      	ldr	r3, [r2, #32]
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8003ada:	f7fe ff53 	bl	8002984 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ade:	4f56      	ldr	r7, [pc, #344]	; (8003c38 <HAL_RCC_OscConfig+0x5d0>)
      tickstart = HAL_GetTick();
 8003ae0:	4605      	mov	r5, r0
 8003ae2:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae6:	2601      	movs	r6, #1
 8003ae8:	e014      	b.n	8003b14 <HAL_RCC_OscConfig+0x4ac>
 8003aea:	fa99 f3a9 	rbit	r3, r9
 8003aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af0:	fa99 f3a9 	rbit	r3, r9
 8003af4:	fab3 f383 	clz	r3, r3
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	fa06 f303 	lsl.w	r3, r6, r3
 8003b00:	4213      	tst	r3, r2
 8003b02:	d1b5      	bne.n	8003a70 <HAL_RCC_OscConfig+0x408>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b04:	f7fe ff3e 	bl	8002984 <HAL_GetTick>
 8003b08:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b0c:	1b40      	subs	r0, r0, r5
 8003b0e:	4298      	cmp	r0, r3
 8003b10:	f63f af5b 	bhi.w	80039ca <HAL_RCC_OscConfig+0x362>
 8003b14:	fa99 f3a9 	rbit	r3, r9
 8003b18:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0e4      	beq.n	8003aea <HAL_RCC_OscConfig+0x482>
 8003b20:	6a3a      	ldr	r2, [r7, #32]
 8003b22:	e7e5      	b.n	8003af0 <HAL_RCC_OscConfig+0x488>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b24:	2801      	cmp	r0, #1
 8003b26:	f43f aeb0 	beq.w	800388a <HAL_RCC_OscConfig+0x222>
        pll_config = RCC->CFGR;
 8003b2a:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b2c:	69e1      	ldr	r1, [r4, #28]
        pll_config2 = RCC->CFGR2;
 8003b2e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b30:	f402 30c0 	and.w	r0, r2, #98304	; 0x18000
 8003b34:	4288      	cmp	r0, r1
 8003b36:	f47f aec5 	bne.w	80038c4 <HAL_RCC_OscConfig+0x25c>
 8003b3a:	6a21      	ldr	r1, [r4, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b3c:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b40:	428a      	cmp	r2, r1
 8003b42:	f47f aebf 	bne.w	80038c4 <HAL_RCC_OscConfig+0x25c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b46:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003b48:	f003 030f 	and.w	r3, r3, #15
        return HAL_ERROR;
 8003b4c:	1a18      	subs	r0, r3, r0
 8003b4e:	bf18      	it	ne
 8003b50:	2001      	movne	r0, #1
 8003b52:	e69a      	b.n	800388a <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b54:	f042 0204 	orr.w	r2, r2, #4
 8003b58:	621a      	str	r2, [r3, #32]
 8003b5a:	6a1a      	ldr	r2, [r3, #32]
 8003b5c:	f042 0201 	orr.w	r2, r2, #1
 8003b60:	621a      	str	r2, [r3, #32]
 8003b62:	e7ba      	b.n	8003ada <HAL_RCC_OscConfig+0x472>
    return HAL_ERROR;
 8003b64:	2001      	movs	r0, #1
}
 8003b66:	4770      	bx	lr
 8003b68:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003b6c:	fab3 f383 	clz	r3, r3
 8003b70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003b7e:	f7fe ff01 	bl	8002984 <HAL_GetTick>
 8003b82:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8003b86:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b88:	2701      	movs	r7, #1
 8003b8a:	e005      	b.n	8003b98 <HAL_RCC_OscConfig+0x530>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8c:	f7fe fefa 	bl	8002984 <HAL_GetTick>
 8003b90:	1b80      	subs	r0, r0, r6
 8003b92:	2802      	cmp	r0, #2
 8003b94:	f63f af19 	bhi.w	80039ca <HAL_RCC_OscConfig+0x362>
 8003b98:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b9c:	682a      	ldr	r2, [r5, #0]
 8003b9e:	fa98 f3a8 	rbit	r3, r8
 8003ba2:	fab3 f383 	clz	r3, r3
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	fa07 f303 	lsl.w	r3, r7, r3
 8003bae:	4213      	tst	r3, r2
 8003bb0:	d1ec      	bne.n	8003b8c <HAL_RCC_OscConfig+0x524>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003bb4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003bb6:	f023 030f 	bic.w	r3, r3, #15
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003bbe:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 8003bc2:	686a      	ldr	r2, [r5, #4]
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	606b      	str	r3, [r5, #4]
 8003bce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bd2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003bd6:	fab3 f383 	clz	r3, r3
 8003bda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bde:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003be2:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003be4:	4d14      	ldr	r5, [pc, #80]	; (8003c38 <HAL_RCC_OscConfig+0x5d0>)
        __HAL_RCC_PLL_ENABLE();
 8003be6:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8003be8:	f7fe fecc 	bl	8002984 <HAL_GetTick>
 8003bec:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8003bf0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bf2:	2601      	movs	r6, #1
 8003bf4:	e005      	b.n	8003c02 <HAL_RCC_OscConfig+0x59a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf6:	f7fe fec5 	bl	8002984 <HAL_GetTick>
 8003bfa:	1b00      	subs	r0, r0, r4
 8003bfc:	2802      	cmp	r0, #2
 8003bfe:	f63f aee4 	bhi.w	80039ca <HAL_RCC_OscConfig+0x362>
 8003c02:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c06:	682a      	ldr	r2, [r5, #0]
 8003c08:	fa97 f3a7 	rbit	r3, r7
 8003c0c:	fab3 f383 	clz	r3, r3
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	fa06 f303 	lsl.w	r3, r6, r3
 8003c18:	4213      	tst	r3, r2
 8003c1a:	d0ec      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x58e>
 8003c1c:	e634      	b.n	8003888 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c22:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	e543      	b.n	80036c0 <HAL_RCC_OscConfig+0x58>
 8003c38:	40021000 	.word	0x40021000

08003c3c <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	f000 80c4 	beq.w	8003dca <HAL_RCC_ClockConfig+0x18e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c42:	4a6d      	ldr	r2, [pc, #436]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	6813      	ldr	r3, [r2, #0]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	428b      	cmp	r3, r1
{
 8003c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c50:	460d      	mov	r5, r1
 8003c52:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c54:	d20c      	bcs.n	8003c70 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c56:	6813      	ldr	r3, [r2, #0]
 8003c58:	f023 0307 	bic.w	r3, r3, #7
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c60:	6813      	ldr	r3, [r2, #0]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	428b      	cmp	r3, r1
 8003c68:	d002      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003c6a:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8003c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	0798      	lsls	r0, r3, #30
 8003c74:	d506      	bpl.n	8003c84 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c76:	4961      	ldr	r1, [pc, #388]	; (8003dfc <HAL_RCC_ClockConfig+0x1c0>)
 8003c78:	68a0      	ldr	r0, [r4, #8]
 8003c7a:	684a      	ldr	r2, [r1, #4]
 8003c7c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c80:	4302      	orrs	r2, r0
 8003c82:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c84:	07d9      	lsls	r1, r3, #31
 8003c86:	d52f      	bpl.n	8003ce8 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c88:	6861      	ldr	r1, [r4, #4]
 8003c8a:	2901      	cmp	r1, #1
 8003c8c:	f000 809f 	beq.w	8003dce <HAL_RCC_ClockConfig+0x192>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c90:	2902      	cmp	r1, #2
 8003c92:	f000 8087 	beq.w	8003da4 <HAL_RCC_ClockConfig+0x168>
 8003c96:	2202      	movs	r2, #2
 8003c98:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9c:	4b57      	ldr	r3, [pc, #348]	; (8003dfc <HAL_RCC_ClockConfig+0x1c0>)
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	fa92 f2a2 	rbit	r2, r2
 8003ca4:	fab2 f282 	clz	r2, r2
 8003ca8:	f002 021f 	and.w	r2, r2, #31
 8003cac:	2301      	movs	r3, #1
 8003cae:	fa03 f202 	lsl.w	r2, r3, r2
 8003cb2:	4202      	tst	r2, r0
 8003cb4:	d0d9      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb6:	4e51      	ldr	r6, [pc, #324]	; (8003dfc <HAL_RCC_ClockConfig+0x1c0>)
 8003cb8:	6873      	ldr	r3, [r6, #4]
 8003cba:	f023 0303 	bic.w	r3, r3, #3
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003cc2:	f7fe fe5f 	bl	8002984 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003cca:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ccc:	e005      	b.n	8003cda <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cce:	f7fe fe59 	bl	8002984 <HAL_GetTick>
 8003cd2:	1bc0      	subs	r0, r0, r7
 8003cd4:	4540      	cmp	r0, r8
 8003cd6:	f200 808c 	bhi.w	8003df2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	6873      	ldr	r3, [r6, #4]
 8003cdc:	6862      	ldr	r2, [r4, #4]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003ce6:	d1f2      	bne.n	8003cce <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce8:	4a43      	ldr	r2, [pc, #268]	; (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	6813      	ldr	r3, [r2, #0]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	42ab      	cmp	r3, r5
 8003cf2:	d909      	bls.n	8003d08 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf4:	6813      	ldr	r3, [r2, #0]
 8003cf6:	f023 0307 	bic.w	r3, r3, #7
 8003cfa:	432b      	orrs	r3, r5
 8003cfc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfe:	6813      	ldr	r3, [r2, #0]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	42ab      	cmp	r3, r5
 8003d06:	d1b0      	bne.n	8003c6a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	075a      	lsls	r2, r3, #29
 8003d0c:	d506      	bpl.n	8003d1c <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d0e:	493b      	ldr	r1, [pc, #236]	; (8003dfc <HAL_RCC_ClockConfig+0x1c0>)
 8003d10:	68e0      	ldr	r0, [r4, #12]
 8003d12:	684a      	ldr	r2, [r1, #4]
 8003d14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d18:	4302      	orrs	r2, r0
 8003d1a:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d1c:	071b      	lsls	r3, r3, #28
 8003d1e:	d507      	bpl.n	8003d30 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d20:	4a36      	ldr	r2, [pc, #216]	; (8003dfc <HAL_RCC_ClockConfig+0x1c0>)
 8003d22:	6921      	ldr	r1, [r4, #16]
 8003d24:	6853      	ldr	r3, [r2, #4]
 8003d26:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003d2a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003d2e:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8003d30:	4a32      	ldr	r2, [pc, #200]	; (8003dfc <HAL_RCC_ClockConfig+0x1c0>)
 8003d32:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d34:	f003 010c 	and.w	r1, r3, #12
 8003d38:	2908      	cmp	r1, #8
 8003d3a:	d017      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d3c:	4930      	ldr	r1, [pc, #192]	; (8003e00 <HAL_RCC_ClockConfig+0x1c4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d3e:	4b2f      	ldr	r3, [pc, #188]	; (8003dfc <HAL_RCC_ClockConfig+0x1c0>)
 8003d40:	22f0      	movs	r2, #240	; 0xf0
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	fa92 f2a2 	rbit	r2, r2
 8003d48:	fab2 f282 	clz	r2, r2
 8003d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d50:	40d3      	lsrs	r3, r2
 8003d52:	4a2c      	ldr	r2, [pc, #176]	; (8003e04 <HAL_RCC_ClockConfig+0x1c8>)
  HAL_InitTick (uwTickPrio);
 8003d54:	482c      	ldr	r0, [pc, #176]	; (8003e08 <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d56:	5cd3      	ldrb	r3, [r2, r3]
 8003d58:	4a2c      	ldr	r2, [pc, #176]	; (8003e0c <HAL_RCC_ClockConfig+0x1d0>)
  HAL_InitTick (uwTickPrio);
 8003d5a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d5c:	fa21 f303 	lsr.w	r3, r1, r3
 8003d60:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8003d62:	f7fe fdcd 	bl	8002900 <HAL_InitTick>
  return HAL_OK;
 8003d66:	2000      	movs	r0, #0
}
 8003d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d6c:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8003d70:	fa91 f1a1 	rbit	r1, r1
 8003d74:	200f      	movs	r0, #15
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d78:	fab1 f181 	clz	r1, r1
 8003d7c:	fa90 f0a0 	rbit	r0, r0
 8003d80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d84:	40cb      	lsrs	r3, r1
 8003d86:	4922      	ldr	r1, [pc, #136]	; (8003e10 <HAL_RCC_ClockConfig+0x1d4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d88:	4c22      	ldr	r4, [pc, #136]	; (8003e14 <HAL_RCC_ClockConfig+0x1d8>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d8a:	5cc9      	ldrb	r1, [r1, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d8c:	4b1c      	ldr	r3, [pc, #112]	; (8003e00 <HAL_RCC_ClockConfig+0x1c4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d8e:	fab0 f080 	clz	r0, r0
 8003d92:	f002 020f 	and.w	r2, r2, #15
 8003d96:	40c2      	lsrs	r2, r0
 8003d98:	5ca2      	ldrb	r2, [r4, r2]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d9e:	fb03 f101 	mul.w	r1, r3, r1
 8003da2:	e7cc      	b.n	8003d3e <HAL_RCC_ClockConfig+0x102>
 8003da4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003da8:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dac:	4a13      	ldr	r2, [pc, #76]	; (8003dfc <HAL_RCC_ClockConfig+0x1c0>)
 8003dae:	6810      	ldr	r0, [r2, #0]
 8003db0:	fa93 f3a3 	rbit	r3, r3
 8003db4:	fab3 f383 	clz	r3, r3
 8003db8:	f003 031f 	and.w	r3, r3, #31
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	4203      	tst	r3, r0
 8003dc4:	f47f af77 	bne.w	8003cb6 <HAL_RCC_ClockConfig+0x7a>
 8003dc8:	e74f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003dca:	2001      	movs	r0, #1
}
 8003dcc:	4770      	bx	lr
 8003dce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003dd2:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_RCC_ClockConfig+0x1c0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	fa92 f2a2 	rbit	r2, r2
 8003dde:	fab2 f282 	clz	r2, r2
 8003de2:	f002 021f 	and.w	r2, r2, #31
 8003de6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dea:	421a      	tst	r2, r3
 8003dec:	f47f af63 	bne.w	8003cb6 <HAL_RCC_ClockConfig+0x7a>
 8003df0:	e73b      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8003df2:	2003      	movs	r0, #3
 8003df4:	e73a      	b.n	8003c6c <HAL_RCC_ClockConfig+0x30>
 8003df6:	bf00      	nop
 8003df8:	40022000 	.word	0x40022000
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	007a1200 	.word	0x007a1200
 8003e04:	080098b0 	.word	0x080098b0
 8003e08:	20000008 	.word	0x20000008
 8003e0c:	20000000 	.word	0x20000000
 8003e10:	080098c8 	.word	0x080098c8
 8003e14:	080098d8 	.word	0x080098d8

08003e18 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003e18:	4a14      	ldr	r2, [pc, #80]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x54>)
 8003e1a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003e1c:	f003 010c 	and.w	r1, r3, #12
 8003e20:	2908      	cmp	r1, #8
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8003e24:	4812      	ldr	r0, [pc, #72]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x58>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003e26:	4770      	bx	lr
{
 8003e28:	b410      	push	{r4}
 8003e2a:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 8003e2e:	fa90 f0a0 	rbit	r0, r0
 8003e32:	210f      	movs	r1, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e36:	fab0 f080 	clz	r0, r0
 8003e3a:	fa91 f1a1 	rbit	r1, r1
 8003e3e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e42:	40c3      	lsrs	r3, r0
 8003e44:	480b      	ldr	r0, [pc, #44]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x5c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e46:	4c0c      	ldr	r4, [pc, #48]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x60>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e48:	f810 c003 	ldrb.w	ip, [r0, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e4c:	4808      	ldr	r0, [pc, #32]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x58>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e4e:	fab1 f181 	clz	r1, r1
 8003e52:	f002 020f 	and.w	r2, r2, #15
 8003e56:	fa22 f301 	lsr.w	r3, r2, r1
 8003e5a:	5ce3      	ldrb	r3, [r4, r3]
}
 8003e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e60:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e64:	fb0c f000 	mul.w	r0, ip, r0
}
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	007a1200 	.word	0x007a1200
 8003e74:	080098c8 	.word	0x080098c8
 8003e78:	080098d8 	.word	0x080098d8

08003e7c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e7c:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	fa92 f2a2 	rbit	r2, r2
 8003e88:	fab2 f282 	clz	r2, r2
 8003e8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e90:	4904      	ldr	r1, [pc, #16]	; (8003ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8003e92:	4805      	ldr	r0, [pc, #20]	; (8003ea8 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e94:	40d3      	lsrs	r3, r2
 8003e96:	6800      	ldr	r0, [r0, #0]
 8003e98:	5ccb      	ldrb	r3, [r1, r3]
}    
 8003e9a:	40d8      	lsrs	r0, r3
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	080098c0 	.word	0x080098c0
 8003ea8:	20000000 	.word	0x20000000

08003eac <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003eac:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	fa92 f2a2 	rbit	r2, r2
 8003eb8:	fab2 f282 	clz	r2, r2
 8003ebc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003ec0:	4904      	ldr	r1, [pc, #16]	; (8003ed4 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8003ec2:	4805      	ldr	r0, [pc, #20]	; (8003ed8 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003ec4:	40d3      	lsrs	r3, r2
 8003ec6:	6800      	ldr	r0, [r0, #0]
 8003ec8:	5ccb      	ldrb	r3, [r1, r3]
} 
 8003eca:	40d8      	lsrs	r0, r3
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	080098c0 	.word	0x080098c0
 8003ed8:	20000000 	.word	0x20000000

08003edc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ee0:	6803      	ldr	r3, [r0, #0]
 8003ee2:	03d9      	lsls	r1, r3, #15
{
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ee8:	d540      	bpl.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x90>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eea:	4b94      	ldr	r3, [pc, #592]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eec:	69da      	ldr	r2, [r3, #28]
 8003eee:	00d2      	lsls	r2, r2, #3
 8003ef0:	f140 80f9 	bpl.w	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef4:	4e92      	ldr	r6, [pc, #584]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ef6:	6833      	ldr	r3, [r6, #0]
 8003ef8:	05df      	lsls	r7, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 8003efa:	f04f 0500 	mov.w	r5, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efe:	f140 8102 	bpl.w	8004106 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f02:	f8df 8238 	ldr.w	r8, [pc, #568]	; 800413c <HAL_RCCEx_PeriphCLKConfig+0x260>
 8003f06:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f0a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003f0e:	d020      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f10:	6861      	ldr	r1, [r4, #4]
 8003f12:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d01c      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f1a:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8003f1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f22:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8003f26:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f2a:	4f86      	ldr	r7, [pc, #536]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f2c:	fab2 f282 	clz	r2, r2
 8003f30:	443a      	add	r2, r7
 8003f32:	0092      	lsls	r2, r2, #2
 8003f34:	2601      	movs	r6, #1
 8003f36:	6016      	str	r6, [r2, #0]
 8003f38:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f3c:	fab3 f383 	clz	r3, r3
 8003f40:	443b      	add	r3, r7
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f46:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f48:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8003f4a:	f8c8 0020 	str.w	r0, [r8, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f4e:	f100 80ee 	bmi.w	800412e <HAL_RCCEx_PeriphCLKConfig+0x252>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f52:	6861      	ldr	r1, [r4, #4]
 8003f54:	4a79      	ldr	r2, [pc, #484]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f56:	6a13      	ldr	r3, [r2, #32]
 8003f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f60:	b11d      	cbz	r5, 8003f6a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f62:	69d3      	ldr	r3, [r2, #28]
 8003f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f68:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	07da      	lsls	r2, r3, #31
 8003f6e:	d506      	bpl.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f70:	4972      	ldr	r1, [pc, #456]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f72:	68a0      	ldr	r0, [r4, #8]
 8003f74:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003f76:	f022 0203 	bic.w	r2, r2, #3
 8003f7a:	4302      	orrs	r2, r0
 8003f7c:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f7e:	079f      	lsls	r7, r3, #30
 8003f80:	d506      	bpl.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f82:	496e      	ldr	r1, [pc, #440]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f84:	68e0      	ldr	r0, [r4, #12]
 8003f86:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003f88:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003f8c:	4302      	orrs	r2, r0
 8003f8e:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f90:	075e      	lsls	r6, r3, #29
 8003f92:	d506      	bpl.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f94:	4969      	ldr	r1, [pc, #420]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f96:	6920      	ldr	r0, [r4, #16]
 8003f98:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003f9a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003f9e:	4302      	orrs	r2, r0
 8003fa0:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fa2:	069d      	lsls	r5, r3, #26
 8003fa4:	d506      	bpl.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fa6:	4965      	ldr	r1, [pc, #404]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa8:	69e0      	ldr	r0, [r4, #28]
 8003faa:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003fac:	f022 0210 	bic.w	r2, r2, #16
 8003fb0:	4302      	orrs	r2, r0
 8003fb2:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fb4:	0398      	lsls	r0, r3, #14
 8003fb6:	d506      	bpl.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003fb8:	4960      	ldr	r1, [pc, #384]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fbc:	684a      	ldr	r2, [r1, #4]
 8003fbe:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8003fc2:	4302      	orrs	r2, r0
 8003fc4:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fc6:	0659      	lsls	r1, r3, #25
 8003fc8:	d506      	bpl.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fca:	495c      	ldr	r1, [pc, #368]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fcc:	6a20      	ldr	r0, [r4, #32]
 8003fce:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003fd0:	f022 0220 	bic.w	r2, r2, #32
 8003fd4:	4302      	orrs	r2, r0
 8003fd6:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fd8:	035a      	lsls	r2, r3, #13
 8003fda:	d506      	bpl.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fdc:	4957      	ldr	r1, [pc, #348]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003fe0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe6:	4302      	orrs	r2, r0
 8003fe8:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fea:	071f      	lsls	r7, r3, #28
 8003fec:	d506      	bpl.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fee:	4953      	ldr	r1, [pc, #332]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff0:	6960      	ldr	r0, [r4, #20]
 8003ff2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003ff4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003ff8:	4302      	orrs	r2, r0
 8003ffa:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ffc:	06de      	lsls	r6, r3, #27
 8003ffe:	d506      	bpl.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004000:	494e      	ldr	r1, [pc, #312]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004002:	69a0      	ldr	r0, [r4, #24]
 8004004:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004006:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800400a:	4302      	orrs	r2, r0
 800400c:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800400e:	059d      	lsls	r5, r3, #22
 8004010:	d506      	bpl.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004012:	494a      	ldr	r1, [pc, #296]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004014:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004016:	684a      	ldr	r2, [r1, #4]
 8004018:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800401c:	4302      	orrs	r2, r0
 800401e:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004020:	0618      	lsls	r0, r3, #24
 8004022:	d506      	bpl.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004024:	4945      	ldr	r1, [pc, #276]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004026:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004028:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800402a:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800402e:	4302      	orrs	r2, r0
 8004030:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004032:	05d9      	lsls	r1, r3, #23
 8004034:	d506      	bpl.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004036:	4941      	ldr	r1, [pc, #260]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004038:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800403a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800403c:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 8004040:	4302      	orrs	r2, r0
 8004042:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004044:	04da      	lsls	r2, r3, #19
 8004046:	d506      	bpl.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004048:	493c      	ldr	r1, [pc, #240]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800404c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800404e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004052:	4302      	orrs	r2, r0
 8004054:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004056:	049f      	lsls	r7, r3, #18
 8004058:	d506      	bpl.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800405a:	4938      	ldr	r1, [pc, #224]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800405e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004060:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004064:	4302      	orrs	r2, r0
 8004066:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004068:	02de      	lsls	r6, r3, #11
 800406a:	d506      	bpl.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800406c:	4933      	ldr	r1, [pc, #204]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004070:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004072:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004076:	4302      	orrs	r2, r0
 8004078:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800407a:	029d      	lsls	r5, r3, #10
 800407c:	d506      	bpl.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800407e:	492f      	ldr	r1, [pc, #188]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004080:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004082:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004084:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004088:	4302      	orrs	r2, r0
 800408a:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800408c:	0258      	lsls	r0, r3, #9
 800408e:	d506      	bpl.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004090:	492a      	ldr	r1, [pc, #168]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004092:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004094:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409a:	4302      	orrs	r2, r0
 800409c:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800409e:	0219      	lsls	r1, r3, #8
 80040a0:	d506      	bpl.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80040a2:	4926      	ldr	r1, [pc, #152]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80040a6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80040a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ac:	4302      	orrs	r2, r0
 80040ae:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80040b0:	01da      	lsls	r2, r3, #7
 80040b2:	d506      	bpl.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80040b4:	4921      	ldr	r1, [pc, #132]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80040b8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80040ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040be:	4302      	orrs	r2, r0
 80040c0:	630a      	str	r2, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80040c2:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80040c6:	d103      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80040c8:	4618      	mov	r0, r3
}
 80040ca:	b003      	add	sp, #12
 80040cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80040d0:	4a1a      	ldr	r2, [pc, #104]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80040d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80040d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  return HAL_OK;
 80040da:	2000      	movs	r0, #0
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80040dc:	430b      	orrs	r3, r1
 80040de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80040e0:	b003      	add	sp, #12
 80040e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e6:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e8:	4e15      	ldr	r6, [pc, #84]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x264>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040ee:	61da      	str	r2, [r3, #28]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040fa:	6833      	ldr	r3, [r6, #0]
 80040fc:	05df      	lsls	r7, r3, #23
      pwrclkchanged = SET;
 80040fe:	f04f 0501 	mov.w	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004102:	f53f aefe 	bmi.w	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004106:	6833      	ldr	r3, [r6, #0]
 8004108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800410e:	f7fe fc39 	bl	8002984 <HAL_GetTick>
 8004112:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004114:	6833      	ldr	r3, [r6, #0]
 8004116:	05d8      	lsls	r0, r3, #23
 8004118:	f53f aef3 	bmi.w	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411c:	f7fe fc32 	bl	8002984 <HAL_GetTick>
 8004120:	1bc0      	subs	r0, r0, r7
 8004122:	2864      	cmp	r0, #100	; 0x64
 8004124:	d9f6      	bls.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x238>
          return HAL_TIMEOUT;
 8004126:	2003      	movs	r0, #3
}
 8004128:	b003      	add	sp, #12
 800412a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 800412e:	f7fe fc29 	bl	8002984 <HAL_GetTick>
 8004132:	f04f 0902 	mov.w	r9, #2
 8004136:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004138:	e01c      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
 8004140:	40007000 	.word	0x40007000
 8004144:	10908100 	.word	0x10908100
 8004148:	fa99 f3a9 	rbit	r3, r9
 800414c:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8004150:	fa99 f3a9 	rbit	r3, r9
 8004154:	fab3 f383 	clz	r3, r3
 8004158:	f003 031f 	and.w	r3, r3, #31
 800415c:	fa06 f303 	lsl.w	r3, r6, r3
 8004160:	4213      	tst	r3, r2
 8004162:	f47f aef6 	bne.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004166:	f7fe fc0d 	bl	8002984 <HAL_GetTick>
 800416a:	f241 3388 	movw	r3, #5000	; 0x1388
 800416e:	1bc0      	subs	r0, r0, r7
 8004170:	4298      	cmp	r0, r3
 8004172:	d8d8      	bhi.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004174:	fa99 f3a9 	rbit	r3, r9
 8004178:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0e3      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004180:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8004184:	e7e4      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004186:	bf00      	nop

08004188 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004188:	2800      	cmp	r0, #0
 800418a:	d077      	beq.n	800427c <HAL_SPI_Init+0xf4>
{
 800418c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004190:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004192:	4604      	mov	r4, r0
 8004194:	2e00      	cmp	r6, #0
 8004196:	d058      	beq.n	800424a <HAL_SPI_Init+0xc2>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004198:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800419a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800419e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a2:	2200      	movs	r2, #0
 80041a4:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80041a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d059      	beq.n	8004262 <HAL_SPI_Init+0xda>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041ae:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041b0:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80041b2:	2302      	movs	r3, #2
 80041b4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80041b8:	6808      	ldr	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041ba:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80041be:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80041c2:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041c4:	d947      	bls.n	8004256 <HAL_SPI_Init+0xce>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041c6:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 80041ca:	d159      	bne.n	8004280 <HAL_SPI_Init+0xf8>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041ce:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041d0:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 80041d4:	68a3      	ldr	r3, [r4, #8]
 80041d6:	6a27      	ldr	r7, [r4, #32]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041d8:	f402 6e70 	and.w	lr, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041dc:	6862      	ldr	r2, [r4, #4]
 80041de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041e2:	f402 7282 	and.w	r2, r2, #260	; 0x104
 80041e6:	431a      	orrs	r2, r3
 80041e8:	6923      	ldr	r3, [r4, #16]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	431a      	orrs	r2, r3
 80041f0:	6963      	ldr	r3, [r4, #20]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	f006 0c10 	and.w	ip, r6, #16
 8004202:	ea43 0e0e 	orr.w	lr, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004206:	69a6      	ldr	r6, [r4, #24]
 8004208:	69e3      	ldr	r3, [r4, #28]
 800420a:	f003 0838 	and.w	r8, r3, #56	; 0x38
 800420e:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8004212:	4313      	orrs	r3, r2
 8004214:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8004218:	ea43 0308 	orr.w	r3, r3, r8
 800421c:	433b      	orrs	r3, r7
 800421e:	432b      	orrs	r3, r5
 8004220:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004222:	0c33      	lsrs	r3, r6, #16
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	ea4e 0303 	orr.w	r3, lr, r3
 800422c:	ea43 030c 	orr.w	r3, r3, ip
 8004230:	4303      	orrs	r3, r0
 8004232:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004234:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004236:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 800423c:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800423e:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004240:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004242:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8004246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800424a:	6843      	ldr	r3, [r0, #4]
 800424c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004250:	d0a5      	beq.n	800419e <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004252:	61c6      	str	r6, [r0, #28]
 8004254:	e7a3      	b.n	800419e <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004256:	d00b      	beq.n	8004270 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004258:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800425c:	2500      	movs	r5, #0
 800425e:	62a5      	str	r5, [r4, #40]	; 0x28
 8004260:	e7b8      	b.n	80041d4 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8004262:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004266:	4620      	mov	r0, r4
 8004268:	f7fe f9a2 	bl	80025b0 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800426c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800426e:	e79e      	b.n	80041ae <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004270:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004272:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004276:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 800427a:	e7ab      	b.n	80041d4 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 800427c:	2001      	movs	r0, #1
}
 800427e:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004280:	2000      	movs	r0, #0
 8004282:	e7eb      	b.n	800425c <HAL_SPI_Init+0xd4>

08004284 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004284:	6a03      	ldr	r3, [r0, #32]
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428c:	6a03      	ldr	r3, [r0, #32]
{
 800428e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004290:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004292:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004294:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004296:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800429a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800429e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042a0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80042a2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80042a6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042a8:	4d15      	ldr	r5, [pc, #84]	; (8004300 <TIM_OC1_SetConfig+0x7c>)
 80042aa:	42a8      	cmp	r0, r5
 80042ac:	d013      	beq.n	80042d6 <TIM_OC1_SetConfig+0x52>
 80042ae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80042b2:	42a8      	cmp	r0, r5
 80042b4:	d00f      	beq.n	80042d6 <TIM_OC1_SetConfig+0x52>
 80042b6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80042ba:	42a8      	cmp	r0, r5
 80042bc:	d00b      	beq.n	80042d6 <TIM_OC1_SetConfig+0x52>
 80042be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042c2:	42a8      	cmp	r0, r5
 80042c4:	d007      	beq.n	80042d6 <TIM_OC1_SetConfig+0x52>
 80042c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042ca:	42a8      	cmp	r0, r5
 80042cc:	d003      	beq.n	80042d6 <TIM_OC1_SetConfig+0x52>
 80042ce:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80042d2:	42a8      	cmp	r0, r5
 80042d4:	d10d      	bne.n	80042f2 <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042d6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80042d8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80042dc:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042de:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042e2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80042e6:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80042ea:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80042ee:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042f2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80042f4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80042f6:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80042f8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80042fa:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80042fc:	6203      	str	r3, [r0, #32]
}
 80042fe:	4770      	bx	lr
 8004300:	40012c00 	.word	0x40012c00

08004304 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004304:	6a03      	ldr	r3, [r0, #32]
 8004306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800430a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430c:	6a03      	ldr	r3, [r0, #32]
{
 800430e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004310:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004312:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004314:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004316:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800431a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800431e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004320:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004322:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004326:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800432a:	4d1c      	ldr	r5, [pc, #112]	; (800439c <TIM_OC3_SetConfig+0x98>)
 800432c:	42a8      	cmp	r0, r5
 800432e:	d017      	beq.n	8004360 <TIM_OC3_SetConfig+0x5c>
 8004330:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004334:	42a8      	cmp	r0, r5
 8004336:	d013      	beq.n	8004360 <TIM_OC3_SetConfig+0x5c>
 8004338:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800433c:	42a8      	cmp	r0, r5
 800433e:	d025      	beq.n	800438c <TIM_OC3_SetConfig+0x88>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004340:	4d17      	ldr	r5, [pc, #92]	; (80043a0 <TIM_OC3_SetConfig+0x9c>)
 8004342:	42a8      	cmp	r0, r5
 8004344:	d013      	beq.n	800436e <TIM_OC3_SetConfig+0x6a>
 8004346:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800434a:	42a8      	cmp	r0, r5
 800434c:	d00f      	beq.n	800436e <TIM_OC3_SetConfig+0x6a>
 800434e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004352:	42a8      	cmp	r0, r5
 8004354:	d00b      	beq.n	800436e <TIM_OC3_SetConfig+0x6a>
 8004356:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800435a:	42a8      	cmp	r0, r5
 800435c:	d10f      	bne.n	800437e <TIM_OC3_SetConfig+0x7a>
 800435e:	e006      	b.n	800436e <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004360:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004362:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004366:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800436a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800436e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004372:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004376:	ea46 0c05 	orr.w	ip, r6, r5
 800437a:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800437e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004380:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004382:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004384:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8004386:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004388:	6203      	str	r3, [r0, #32]
}
 800438a:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800438c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800438e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004392:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004396:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439a:	e7d1      	b.n	8004340 <TIM_OC3_SetConfig+0x3c>
 800439c:	40012c00 	.word	0x40012c00
 80043a0:	40014000 	.word	0x40014000

080043a4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80043a4:	2800      	cmp	r0, #0
 80043a6:	f000 8088 	beq.w	80044ba <HAL_TIM_Base_Init+0x116>
{
 80043aa:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80043ac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80043b0:	4604      	mov	r4, r0
 80043b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d074      	beq.n	80044a4 <HAL_TIM_Base_Init+0x100>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ba:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043bc:	4942      	ldr	r1, [pc, #264]	; (80044c8 <HAL_TIM_Base_Init+0x124>)
  htim->State = HAL_TIM_STATE_BUSY;
 80043be:	2302      	movs	r3, #2
 80043c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043c4:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80043c6:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043c8:	d058      	beq.n	800447c <HAL_TIM_Base_Init+0xd8>
 80043ca:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80043ce:	d028      	beq.n	8004422 <HAL_TIM_Base_Init+0x7e>
 80043d0:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80043d4:	428a      	cmp	r2, r1
 80043d6:	d024      	beq.n	8004422 <HAL_TIM_Base_Init+0x7e>
 80043d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80043dc:	428a      	cmp	r2, r1
 80043de:	d020      	beq.n	8004422 <HAL_TIM_Base_Init+0x7e>
 80043e0:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 80043e4:	428a      	cmp	r2, r1
 80043e6:	d049      	beq.n	800447c <HAL_TIM_Base_Init+0xd8>
 80043e8:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 80043ec:	428a      	cmp	r2, r1
 80043ee:	d066      	beq.n	80044be <HAL_TIM_Base_Init+0x11a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043f0:	4936      	ldr	r1, [pc, #216]	; (80044cc <HAL_TIM_Base_Init+0x128>)
 80043f2:	428a      	cmp	r2, r1
 80043f4:	d05b      	beq.n	80044ae <HAL_TIM_Base_Init+0x10a>
 80043f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80043fa:	428a      	cmp	r2, r1
 80043fc:	d057      	beq.n	80044ae <HAL_TIM_Base_Init+0x10a>
 80043fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004402:	428a      	cmp	r2, r1
 8004404:	d053      	beq.n	80044ae <HAL_TIM_Base_Init+0x10a>
 8004406:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800440a:	428a      	cmp	r2, r1
 800440c:	d04f      	beq.n	80044ae <HAL_TIM_Base_Init+0x10a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800440e:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004410:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004416:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004418:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800441a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800441c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800441e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004420:	e010      	b.n	8004444 <HAL_TIM_Base_Init+0xa0>
    tmpcr1 |= Structure->CounterMode;
 8004422:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004424:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800442a:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800442c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004430:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004432:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004438:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800443a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800443c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800443e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004440:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004442:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004444:	2301      	movs	r3, #1
 8004446:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004448:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800444c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004450:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004454:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004458:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800445c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004464:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004468:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800446c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004470:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004474:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004478:	2000      	movs	r0, #0
}
 800447a:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800447c:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800447e:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004484:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800448a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800448c:	69a1      	ldr	r1, [r4, #24]
 800448e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004492:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004494:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004496:	68e3      	ldr	r3, [r4, #12]
 8004498:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800449a:	6863      	ldr	r3, [r4, #4]
 800449c:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800449e:	6963      	ldr	r3, [r4, #20]
 80044a0:	6313      	str	r3, [r2, #48]	; 0x30
 80044a2:	e7cf      	b.n	8004444 <HAL_TIM_Base_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 80044a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80044a8:	f7fe f8d2 	bl	8002650 <HAL_TIM_Base_MspInit>
 80044ac:	e785      	b.n	80043ba <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ae:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044b0:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80044b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044b6:	4303      	orrs	r3, r0
 80044b8:	e7e9      	b.n	800448e <HAL_TIM_Base_Init+0xea>
    return HAL_ERROR;
 80044ba:	2001      	movs	r0, #1
}
 80044bc:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80044be:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80044c4:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044c6:	e793      	b.n	80043f0 <HAL_TIM_Base_Init+0x4c>
 80044c8:	40012c00 	.word	0x40012c00
 80044cc:	40014000 	.word	0x40014000

080044d0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80044d0:	2800      	cmp	r0, #0
 80044d2:	f000 8088 	beq.w	80045e6 <HAL_TIM_PWM_Init+0x116>
{
 80044d6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80044d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80044dc:	4604      	mov	r4, r0
 80044de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d074      	beq.n	80045d0 <HAL_TIM_PWM_Init+0x100>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e8:	4942      	ldr	r1, [pc, #264]	; (80045f4 <HAL_TIM_PWM_Init+0x124>)
  htim->State = HAL_TIM_STATE_BUSY;
 80044ea:	2302      	movs	r3, #2
 80044ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f0:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80044f2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f4:	d058      	beq.n	80045a8 <HAL_TIM_PWM_Init+0xd8>
 80044f6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80044fa:	d028      	beq.n	800454e <HAL_TIM_PWM_Init+0x7e>
 80044fc:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8004500:	428a      	cmp	r2, r1
 8004502:	d024      	beq.n	800454e <HAL_TIM_PWM_Init+0x7e>
 8004504:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004508:	428a      	cmp	r2, r1
 800450a:	d020      	beq.n	800454e <HAL_TIM_PWM_Init+0x7e>
 800450c:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8004510:	428a      	cmp	r2, r1
 8004512:	d049      	beq.n	80045a8 <HAL_TIM_PWM_Init+0xd8>
 8004514:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8004518:	428a      	cmp	r2, r1
 800451a:	d066      	beq.n	80045ea <HAL_TIM_PWM_Init+0x11a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800451c:	4936      	ldr	r1, [pc, #216]	; (80045f8 <HAL_TIM_PWM_Init+0x128>)
 800451e:	428a      	cmp	r2, r1
 8004520:	d05b      	beq.n	80045da <HAL_TIM_PWM_Init+0x10a>
 8004522:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004526:	428a      	cmp	r2, r1
 8004528:	d057      	beq.n	80045da <HAL_TIM_PWM_Init+0x10a>
 800452a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800452e:	428a      	cmp	r2, r1
 8004530:	d053      	beq.n	80045da <HAL_TIM_PWM_Init+0x10a>
 8004532:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004536:	428a      	cmp	r2, r1
 8004538:	d04f      	beq.n	80045da <HAL_TIM_PWM_Init+0x10a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800453a:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800453c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800453e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004542:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004544:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8004546:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004548:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800454a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800454c:	e010      	b.n	8004570 <HAL_TIM_PWM_Init+0xa0>
    tmpcr1 |= Structure->CounterMode;
 800454e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004550:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004556:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800455c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800455e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004564:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004566:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004568:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800456a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800456c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800456e:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004570:	2301      	movs	r3, #1
 8004572:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004574:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004578:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800457c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004580:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004584:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800458c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004590:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004594:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004598:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800459c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80045a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80045a4:	2000      	movs	r0, #0
}
 80045a6:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80045a8:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045aa:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80045b0:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80045b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b6:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045b8:	69a1      	ldr	r1, [r4, #24]
 80045ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045be:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80045c0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c2:	68e3      	ldr	r3, [r4, #12]
 80045c4:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80045c6:	6863      	ldr	r3, [r4, #4]
 80045c8:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80045ca:	6963      	ldr	r3, [r4, #20]
 80045cc:	6313      	str	r3, [r2, #48]	; 0x30
 80045ce:	e7cf      	b.n	8004570 <HAL_TIM_PWM_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 80045d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80045d4:	f7fe f828 	bl	8002628 <HAL_TIM_PWM_MspInit>
 80045d8:	e785      	b.n	80044e6 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045da:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045dc:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80045de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045e2:	4303      	orrs	r3, r0
 80045e4:	e7e9      	b.n	80045ba <HAL_TIM_PWM_Init+0xea>
    return HAL_ERROR;
 80045e6:	2001      	movs	r0, #1
}
 80045e8:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80045ea:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80045f0:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045f2:	e793      	b.n	800451c <HAL_TIM_PWM_Init+0x4c>
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40014000 	.word	0x40014000

080045fc <HAL_TIM_PWM_Start>:
 80045fc:	2900      	cmp	r1, #0
 80045fe:	d152      	bne.n	80046a6 <HAL_TIM_PWM_Start+0xaa>
 8004600:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004604:	2b01      	cmp	r3, #1
 8004606:	d158      	bne.n	80046ba <HAL_TIM_PWM_Start+0xbe>
 8004608:	2302      	movs	r3, #2
 800460a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 800460e:	6803      	ldr	r3, [r0, #0]
 8004610:	2201      	movs	r2, #1
 8004612:	6a18      	ldr	r0, [r3, #32]
 8004614:	f001 011f 	and.w	r1, r1, #31
 8004618:	fa02 f101 	lsl.w	r1, r2, r1
 800461c:	ea20 0001 	bic.w	r0, r0, r1
 8004620:	6218      	str	r0, [r3, #32]
 8004622:	6a18      	ldr	r0, [r3, #32]
 8004624:	4a3f      	ldr	r2, [pc, #252]	; (8004724 <HAL_TIM_PWM_Start+0x128>)
 8004626:	4301      	orrs	r1, r0
 8004628:	4293      	cmp	r3, r2
 800462a:	6219      	str	r1, [r3, #32]
 800462c:	d059      	beq.n	80046e2 <HAL_TIM_PWM_Start+0xe6>
 800462e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004632:	4293      	cmp	r3, r2
 8004634:	d00f      	beq.n	8004656 <HAL_TIM_PWM_Start+0x5a>
 8004636:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800463a:	4293      	cmp	r3, r2
 800463c:	d00b      	beq.n	8004656 <HAL_TIM_PWM_Start+0x5a>
 800463e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004642:	4293      	cmp	r3, r2
 8004644:	d007      	beq.n	8004656 <HAL_TIM_PWM_Start+0x5a>
 8004646:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800464a:	4293      	cmp	r3, r2
 800464c:	d003      	beq.n	8004656 <HAL_TIM_PWM_Start+0x5a>
 800464e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004652:	4293      	cmp	r3, r2
 8004654:	d103      	bne.n	800465e <HAL_TIM_PWM_Start+0x62>
 8004656:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004658:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800465c:	645a      	str	r2, [r3, #68]	; 0x44
 800465e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004662:	d012      	beq.n	800468a <HAL_TIM_PWM_Start+0x8e>
 8004664:	4a30      	ldr	r2, [pc, #192]	; (8004728 <HAL_TIM_PWM_Start+0x12c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00f      	beq.n	800468a <HAL_TIM_PWM_Start+0x8e>
 800466a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800466e:	4293      	cmp	r3, r2
 8004670:	d00b      	beq.n	800468a <HAL_TIM_PWM_Start+0x8e>
 8004672:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004676:	4293      	cmp	r3, r2
 8004678:	d007      	beq.n	800468a <HAL_TIM_PWM_Start+0x8e>
 800467a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800467e:	4293      	cmp	r3, r2
 8004680:	d003      	beq.n	800468a <HAL_TIM_PWM_Start+0x8e>
 8004682:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004686:	4293      	cmp	r3, r2
 8004688:	d107      	bne.n	800469a <HAL_TIM_PWM_Start+0x9e>
 800468a:	6899      	ldr	r1, [r3, #8]
 800468c:	4a27      	ldr	r2, [pc, #156]	; (800472c <HAL_TIM_PWM_Start+0x130>)
 800468e:	400a      	ands	r2, r1
 8004690:	2a06      	cmp	r2, #6
 8004692:	d014      	beq.n	80046be <HAL_TIM_PWM_Start+0xc2>
 8004694:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004698:	d011      	beq.n	80046be <HAL_TIM_PWM_Start+0xc2>
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	f042 0201 	orr.w	r2, r2, #1
 80046a0:	2000      	movs	r0, #0
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	4770      	bx	lr
 80046a6:	2904      	cmp	r1, #4
 80046a8:	d020      	beq.n	80046ec <HAL_TIM_PWM_Start+0xf0>
 80046aa:	2908      	cmp	r1, #8
 80046ac:	d026      	beq.n	80046fc <HAL_TIM_PWM_Start+0x100>
 80046ae:	290c      	cmp	r1, #12
 80046b0:	d107      	bne.n	80046c2 <HAL_TIM_PWM_Start+0xc6>
 80046b2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d028      	beq.n	800470c <HAL_TIM_PWM_Start+0x110>
 80046ba:	2001      	movs	r0, #1
 80046bc:	4770      	bx	lr
 80046be:	2000      	movs	r0, #0
 80046c0:	4770      	bx	lr
 80046c2:	2910      	cmp	r1, #16
 80046c4:	d026      	beq.n	8004714 <HAL_TIM_PWM_Start+0x118>
 80046c6:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d1f5      	bne.n	80046ba <HAL_TIM_PWM_Start+0xbe>
 80046ce:	2908      	cmp	r1, #8
 80046d0:	d018      	beq.n	8004704 <HAL_TIM_PWM_Start+0x108>
 80046d2:	290c      	cmp	r1, #12
 80046d4:	d01a      	beq.n	800470c <HAL_TIM_PWM_Start+0x110>
 80046d6:	2910      	cmp	r1, #16
 80046d8:	d020      	beq.n	800471c <HAL_TIM_PWM_Start+0x120>
 80046da:	2302      	movs	r3, #2
 80046dc:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 80046e0:	e795      	b.n	800460e <HAL_TIM_PWM_Start+0x12>
 80046e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046e8:	645a      	str	r2, [r3, #68]	; 0x44
 80046ea:	e7ce      	b.n	800468a <HAL_TIM_PWM_Start+0x8e>
 80046ec:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d1e2      	bne.n	80046ba <HAL_TIM_PWM_Start+0xbe>
 80046f4:	2302      	movs	r3, #2
 80046f6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80046fa:	e788      	b.n	800460e <HAL_TIM_PWM_Start+0x12>
 80046fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004700:	2b01      	cmp	r3, #1
 8004702:	d1da      	bne.n	80046ba <HAL_TIM_PWM_Start+0xbe>
 8004704:	2302      	movs	r3, #2
 8004706:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800470a:	e780      	b.n	800460e <HAL_TIM_PWM_Start+0x12>
 800470c:	2302      	movs	r3, #2
 800470e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8004712:	e77c      	b.n	800460e <HAL_TIM_PWM_Start+0x12>
 8004714:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8004718:	2b01      	cmp	r3, #1
 800471a:	d1ce      	bne.n	80046ba <HAL_TIM_PWM_Start+0xbe>
 800471c:	2302      	movs	r3, #2
 800471e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8004722:	e774      	b.n	800460e <HAL_TIM_PWM_Start+0x12>
 8004724:	40012c00 	.word	0x40012c00
 8004728:	40000400 	.word	0x40000400
 800472c:	00010007 	.word	0x00010007

08004730 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004730:	6a03      	ldr	r3, [r0, #32]
 8004732:	f023 0310 	bic.w	r3, r3, #16
 8004736:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004738:	6a03      	ldr	r3, [r0, #32]
{
 800473a:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 800473c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800473e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004740:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004742:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004746:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800474a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800474e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004750:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004754:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004758:	4d1c      	ldr	r5, [pc, #112]	; (80047cc <TIM_OC2_SetConfig+0x9c>)
 800475a:	42a8      	cmp	r0, r5
 800475c:	d017      	beq.n	800478e <TIM_OC2_SetConfig+0x5e>
 800475e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004762:	42a8      	cmp	r0, r5
 8004764:	d013      	beq.n	800478e <TIM_OC2_SetConfig+0x5e>
 8004766:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800476a:	42a8      	cmp	r0, r5
 800476c:	d025      	beq.n	80047ba <TIM_OC2_SetConfig+0x8a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476e:	4d18      	ldr	r5, [pc, #96]	; (80047d0 <TIM_OC2_SetConfig+0xa0>)
 8004770:	42a8      	cmp	r0, r5
 8004772:	d013      	beq.n	800479c <TIM_OC2_SetConfig+0x6c>
 8004774:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004778:	42a8      	cmp	r0, r5
 800477a:	d00f      	beq.n	800479c <TIM_OC2_SetConfig+0x6c>
 800477c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004780:	42a8      	cmp	r0, r5
 8004782:	d00b      	beq.n	800479c <TIM_OC2_SetConfig+0x6c>
 8004784:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004788:	42a8      	cmp	r0, r5
 800478a:	d10f      	bne.n	80047ac <TIM_OC2_SetConfig+0x7c>
 800478c:	e006      	b.n	800479c <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800478e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004794:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800479c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047a0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047a4:	ea46 0c05 	orr.w	ip, r6, r5
 80047a8:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80047ac:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80047ae:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80047b0:	6182      	str	r2, [r0, #24]
}
 80047b2:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80047b4:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80047b6:	6203      	str	r3, [r0, #32]
}
 80047b8:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047ba:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80047bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80047c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c8:	e7d1      	b.n	800476e <TIM_OC2_SetConfig+0x3e>
 80047ca:	bf00      	nop
 80047cc:	40012c00 	.word	0x40012c00
 80047d0:	40014000 	.word	0x40014000

080047d4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80047d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80047d8:	2b01      	cmp	r3, #1
 80047da:	f000 8137 	beq.w	8004a4c <HAL_TIM_PWM_ConfigChannel+0x278>
 80047de:	2301      	movs	r3, #1
{
 80047e0:	b570      	push	{r4, r5, r6, lr}
 80047e2:	4604      	mov	r4, r0
 80047e4:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 80047e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80047ea:	2a14      	cmp	r2, #20
 80047ec:	d816      	bhi.n	800481c <HAL_TIM_PWM_ConfigChannel+0x48>
 80047ee:	e8df f012 	tbh	[pc, r2, lsl #1]
 80047f2:	0061      	.short	0x0061
 80047f4:	00150015 	.word	0x00150015
 80047f8:	00760015 	.word	0x00760015
 80047fc:	00150015 	.word	0x00150015
 8004800:	008c0015 	.word	0x008c0015
 8004804:	00150015 	.word	0x00150015
 8004808:	00a10015 	.word	0x00a10015
 800480c:	00150015 	.word	0x00150015
 8004810:	00e80015 	.word	0x00e80015
 8004814:	00150015 	.word	0x00150015
 8004818:	001a0015 	.word	0x001a0015
  __HAL_UNLOCK(htim);
 800481c:	2300      	movs	r3, #0
 800481e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8004822:	2001      	movs	r0, #1
}
 8004824:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004826:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004828:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800482a:	6a1a      	ldr	r2, [r3, #32]
 800482c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004830:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004832:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004834:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004836:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004838:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800483c:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004840:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004844:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004846:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800484a:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800484e:	4e80      	ldr	r6, [pc, #512]	; (8004a50 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8004850:	42b3      	cmp	r3, r6
 8004852:	d013      	beq.n	800487c <HAL_TIM_PWM_ConfigChannel+0xa8>
 8004854:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004858:	42b3      	cmp	r3, r6
 800485a:	d00f      	beq.n	800487c <HAL_TIM_PWM_ConfigChannel+0xa8>
 800485c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004860:	42b3      	cmp	r3, r6
 8004862:	d00b      	beq.n	800487c <HAL_TIM_PWM_ConfigChannel+0xa8>
 8004864:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004868:	42b3      	cmp	r3, r6
 800486a:	d007      	beq.n	800487c <HAL_TIM_PWM_ConfigChannel+0xa8>
 800486c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004870:	42b3      	cmp	r3, r6
 8004872:	d003      	beq.n	800487c <HAL_TIM_PWM_ConfigChannel+0xa8>
 8004874:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004878:	42b3      	cmp	r3, r6
 800487a:	d104      	bne.n	8004886 <HAL_TIM_PWM_ConfigChannel+0xb2>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800487c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800487e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004882:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004886:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004888:	6559      	str	r1, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800488a:	6869      	ldr	r1, [r5, #4]
 800488c:	65d9      	str	r1, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004890:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004892:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004894:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004898:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800489a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800489c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80048a0:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048a4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80048a8:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 80048aa:	2300      	movs	r3, #0
 80048ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80048b0:	2000      	movs	r0, #0
}
 80048b2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048b4:	6800      	ldr	r0, [r0, #0]
 80048b6:	f7ff fce5 	bl	8004284 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048ba:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048bc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048be:	6999      	ldr	r1, [r3, #24]
 80048c0:	f041 0108 	orr.w	r1, r1, #8
 80048c4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048c6:	6999      	ldr	r1, [r3, #24]
 80048c8:	f021 0104 	bic.w	r1, r1, #4
 80048cc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048ce:	699a      	ldr	r2, [r3, #24]
 80048d0:	4302      	orrs	r2, r0
 80048d2:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80048d4:	2300      	movs	r3, #0
 80048d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80048da:	2000      	movs	r0, #0
}
 80048dc:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048de:	6800      	ldr	r0, [r0, #0]
 80048e0:	f7ff ff26 	bl	8004730 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048e4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048e6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048e8:	6999      	ldr	r1, [r3, #24]
 80048ea:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80048ee:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048f0:	6999      	ldr	r1, [r3, #24]
 80048f2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80048f6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80048fe:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004900:	2300      	movs	r3, #0
 8004902:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004906:	2000      	movs	r0, #0
}
 8004908:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800490a:	6800      	ldr	r0, [r0, #0]
 800490c:	f7ff fcfa 	bl	8004304 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004910:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004912:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004914:	69d9      	ldr	r1, [r3, #28]
 8004916:	f041 0108 	orr.w	r1, r1, #8
 800491a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800491c:	69d9      	ldr	r1, [r3, #28]
 800491e:	f021 0104 	bic.w	r1, r1, #4
 8004922:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	4302      	orrs	r2, r0
 8004928:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800492a:	2300      	movs	r3, #0
 800492c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004930:	2000      	movs	r0, #0
}
 8004932:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004934:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004936:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004938:	6a1a      	ldr	r2, [r3, #32]
 800493a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800493e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004940:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004942:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004944:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004946:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800494a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800494e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004952:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004954:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004958:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800495c:	4e3c      	ldr	r6, [pc, #240]	; (8004a50 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800495e:	42b3      	cmp	r3, r6
 8004960:	d013      	beq.n	800498a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004962:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004966:	42b3      	cmp	r3, r6
 8004968:	d00f      	beq.n	800498a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800496a:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800496e:	42b3      	cmp	r3, r6
 8004970:	d00b      	beq.n	800498a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004972:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004976:	42b3      	cmp	r3, r6
 8004978:	d007      	beq.n	800498a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800497a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800497e:	42b3      	cmp	r3, r6
 8004980:	d003      	beq.n	800498a <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004982:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004986:	42b3      	cmp	r3, r6
 8004988:	d104      	bne.n	8004994 <HAL_TIM_PWM_ConfigChannel+0x1c0>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800498a:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800498c:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004990:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 8004994:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004996:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004998:	6869      	ldr	r1, [r5, #4]
 800499a:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800499c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800499e:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049a0:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049a2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80049a6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049a8:	69d9      	ldr	r1, [r3, #28]
 80049aa:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80049ae:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049b0:	69da      	ldr	r2, [r3, #28]
 80049b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80049b6:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80049b8:	2300      	movs	r3, #0
 80049ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80049be:	2000      	movs	r0, #0
}
 80049c0:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80049c2:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80049c4:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049c6:	6a1a      	ldr	r2, [r3, #32]
 80049c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049cc:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80049ce:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80049d0:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80049d2:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049d4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80049d8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80049dc:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049de:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80049e0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049e4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e8:	4e19      	ldr	r6, [pc, #100]	; (8004a50 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80049ea:	42b3      	cmp	r3, r6
 80049ec:	d013      	beq.n	8004a16 <HAL_TIM_PWM_ConfigChannel+0x242>
 80049ee:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80049f2:	42b3      	cmp	r3, r6
 80049f4:	d00f      	beq.n	8004a16 <HAL_TIM_PWM_ConfigChannel+0x242>
 80049f6:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80049fa:	42b3      	cmp	r3, r6
 80049fc:	d00b      	beq.n	8004a16 <HAL_TIM_PWM_ConfigChannel+0x242>
 80049fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004a02:	42b3      	cmp	r3, r6
 8004a04:	d007      	beq.n	8004a16 <HAL_TIM_PWM_ConfigChannel+0x242>
 8004a06:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004a0a:	42b3      	cmp	r3, r6
 8004a0c:	d003      	beq.n	8004a16 <HAL_TIM_PWM_ConfigChannel+0x242>
 8004a0e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004a12:	42b3      	cmp	r3, r6
 8004a14:	d104      	bne.n	8004a20 <HAL_TIM_PWM_ConfigChannel+0x24c>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a16:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a18:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a1c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8004a20:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004a22:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004a24:	6869      	ldr	r1, [r5, #4]
 8004a26:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8004a28:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a2a:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a2c:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a2e:	f041 0108 	orr.w	r1, r1, #8
 8004a32:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a36:	f021 0104 	bic.w	r1, r1, #4
 8004a3a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a3e:	432a      	orrs	r2, r5
 8004a40:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8004a42:	2300      	movs	r3, #0
 8004a44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004a48:	2000      	movs	r0, #0
}
 8004a4a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8004a4c:	2002      	movs	r0, #2
}
 8004a4e:	4770      	bx	lr
 8004a50:	40012c00 	.word	0x40012c00

08004a54 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d049      	beq.n	8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
{
 8004a5c:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a5e:	6803      	ldr	r3, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a60:	4d24      	ldr	r5, [pc, #144]	; (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004a62:	2202      	movs	r2, #2
 8004a64:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a68:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8004a6a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004a6c:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a6e:	d035      	beq.n	8004adc <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8004a70:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004a74:	42ab      	cmp	r3, r5
 8004a76:	d02c      	beq.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004a78:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8004a7c:	42ab      	cmp	r3, r5
 8004a7e:	d028      	beq.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a80:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a86:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8004a8c:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a8e:	d012      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004a90:	4a19      	ldr	r2, [pc, #100]	; (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00f      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004a96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00b      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004a9e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d007      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004aa6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d003      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004aae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d104      	bne.n	8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ab6:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ab8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004abc:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004abe:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004ac0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004ac8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004acc:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004ace:	4618      	mov	r0, r3
}
 8004ad0:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ad2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ad4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ad8:	432a      	orrs	r2, r5
 8004ada:	e7d1      	b.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8004adc:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ade:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ae2:	432a      	orrs	r2, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ae4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ae6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aea:	432a      	orrs	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8004aec:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aee:	e7e2      	b.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  __HAL_LOCK(htim);
 8004af0:	2002      	movs	r0, #2
}
 8004af2:	4770      	bx	lr
 8004af4:	40012c00 	.word	0x40012c00
 8004af8:	40000400 	.word	0x40000400

08004afc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b00:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b02:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8004b04:	2820      	cmp	r0, #32
 8004b06:	f040 8088 	bne.w	8004c1a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b0a:	4688      	mov	r8, r1
 8004b0c:	b109      	cbz	r1, 8004b12 <HAL_UART_Transmit+0x16>
 8004b0e:	4617      	mov	r7, r2
 8004b10:	b912      	cbnz	r2, 8004b18 <HAL_UART_Transmit+0x1c>
    {
      return  HAL_ERROR;
 8004b12:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b18:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1a:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b1e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b20:	f8c4 9084 	str.w	r9, [r4, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b24:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8004b26:	f7fd ff2d 	bl	8002984 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b2a:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8004b2c:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8004b34:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    tickstart = HAL_GetTick();
 8004b38:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b3a:	d071      	beq.n	8004c20 <HAL_UART_Transmit+0x124>
    while (huart->TxXferCount > 0U)
 8004b3c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b40:	6820      	ldr	r0, [r4, #0]
    while (huart->TxXferCount > 0U)
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	b1ab      	cbz	r3, 8004b72 <HAL_UART_Transmit+0x76>
 8004b46:	1c6a      	adds	r2, r5, #1
 8004b48:	d11c      	bne.n	8004b84 <HAL_UART_Transmit+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b4a:	69c2      	ldr	r2, [r0, #28]
 8004b4c:	0613      	lsls	r3, r2, #24
 8004b4e:	d5fc      	bpl.n	8004b4a <HAL_UART_Transmit+0x4e>
      if (pdata8bits == NULL)
 8004b50:	f1b8 0f00 	cmp.w	r8, #0
 8004b54:	d05c      	beq.n	8004c10 <HAL_UART_Transmit+0x114>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b56:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004b5a:	8503      	strh	r3, [r0, #40]	; 0x28
      huart->TxXferCount--;
 8004b5c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b68:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e9      	bne.n	8004b46 <HAL_UART_Transmit+0x4a>
 8004b72:	1c69      	adds	r1, r5, #1
 8004b74:	d15a      	bne.n	8004c2c <HAL_UART_Transmit+0x130>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b76:	69c3      	ldr	r3, [r0, #28]
 8004b78:	065a      	lsls	r2, r3, #25
 8004b7a:	d5fc      	bpl.n	8004b76 <HAL_UART_Transmit+0x7a>
    huart->gState = HAL_UART_STATE_READY;
 8004b7c:	2320      	movs	r3, #32
 8004b7e:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8004b80:	2000      	movs	r0, #0
 8004b82:	e7c7      	b.n	8004b14 <HAL_UART_Transmit+0x18>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b84:	69c3      	ldr	r3, [r0, #28]
 8004b86:	061f      	lsls	r7, r3, #24
 8004b88:	d4e2      	bmi.n	8004b50 <HAL_UART_Transmit+0x54>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b8a:	f7fd fefb 	bl	8002984 <HAL_GetTick>
 8004b8e:	1b80      	subs	r0, r0, r6
 8004b90:	4285      	cmp	r5, r0
 8004b92:	d338      	bcc.n	8004c06 <HAL_UART_Transmit+0x10a>
 8004b94:	2d00      	cmp	r5, #0
 8004b96:	d036      	beq.n	8004c06 <HAL_UART_Transmit+0x10a>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	0752      	lsls	r2, r2, #29
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	d5d1      	bpl.n	8004b46 <HAL_UART_Transmit+0x4a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	0717      	lsls	r7, r2, #28
 8004ba6:	f100 8089 	bmi.w	8004cbc <HAL_UART_Transmit+0x1c0>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	0511      	lsls	r1, r2, #20
 8004bae:	d5ca      	bpl.n	8004b46 <HAL_UART_Transmit+0x4a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bb4:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb6:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	e843 2100 	strex	r1, r2, [r3]
 8004bc2:	b139      	cbz	r1, 8004bd4 <HAL_UART_Transmit+0xd8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	e853 2f00 	ldrex	r2, [r3]
 8004bc8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	e843 2100 	strex	r1, r2, [r3]
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	d1f7      	bne.n	8004bc4 <HAL_UART_Transmit+0xc8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	f103 0208 	add.w	r2, r3, #8
 8004bd8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bdc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	f103 0008 	add.w	r0, r3, #8
 8004be4:	e840 2100 	strex	r1, r2, [r0]
 8004be8:	2900      	cmp	r1, #0
 8004bea:	d1f3      	bne.n	8004bd4 <HAL_UART_Transmit+0xd8>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bec:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004bee:	2a01      	cmp	r2, #1
 8004bf0:	d05b      	beq.n	8004caa <HAL_UART_Transmit+0x1ae>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf2:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bfa:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfc:	6623      	str	r3, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8004bfe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c02:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 8004c06:	2320      	movs	r3, #32
 8004c08:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8004c0a:	2003      	movs	r0, #3
}
 8004c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c10:	f839 3b02 	ldrh.w	r3, [r9], #2
 8004c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c18:	e79f      	b.n	8004b5a <HAL_UART_Transmit+0x5e>
    return HAL_BUSY;
 8004c1a:	2002      	movs	r0, #2
}
 8004c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c20:	6923      	ldr	r3, [r4, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d18a      	bne.n	8004b3c <HAL_UART_Transmit+0x40>
 8004c26:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8004c28:	4698      	mov	r8, r3
 8004c2a:	e787      	b.n	8004b3c <HAL_UART_Transmit+0x40>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c2c:	69c3      	ldr	r3, [r0, #28]
 8004c2e:	065b      	lsls	r3, r3, #25
 8004c30:	d4a4      	bmi.n	8004b7c <HAL_UART_Transmit+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c32:	f7fd fea7 	bl	8002984 <HAL_GetTick>
 8004c36:	1b80      	subs	r0, r0, r6
 8004c38:	4285      	cmp	r5, r0
 8004c3a:	d3e4      	bcc.n	8004c06 <HAL_UART_Transmit+0x10a>
 8004c3c:	2d00      	cmp	r5, #0
 8004c3e:	d0e2      	beq.n	8004c06 <HAL_UART_Transmit+0x10a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	0751      	lsls	r1, r2, #29
 8004c46:	4618      	mov	r0, r3
 8004c48:	d593      	bpl.n	8004b72 <HAL_UART_Transmit+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	0712      	lsls	r2, r2, #28
 8004c4e:	d463      	bmi.n	8004d18 <HAL_UART_Transmit+0x21c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c50:	69da      	ldr	r2, [r3, #28]
 8004c52:	0517      	lsls	r7, r2, #20
 8004c54:	d58d      	bpl.n	8004b72 <HAL_UART_Transmit+0x76>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c5a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c64:	e843 2100 	strex	r1, r2, [r3]
 8004c68:	b139      	cbz	r1, 8004c7a <HAL_UART_Transmit+0x17e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6a:	e853 2f00 	ldrex	r2, [r3]
 8004c6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	e843 2100 	strex	r1, r2, [r3]
 8004c76:	2900      	cmp	r1, #0
 8004c78:	d1f7      	bne.n	8004c6a <HAL_UART_Transmit+0x16e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	f103 0208 	add.w	r2, r3, #8
 8004c7e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c82:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c86:	f103 0008 	add.w	r0, r3, #8
 8004c8a:	e840 2100 	strex	r1, r2, [r0]
 8004c8e:	2900      	cmp	r1, #0
 8004c90:	d1f3      	bne.n	8004c7a <HAL_UART_Transmit+0x17e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c92:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004c94:	2a01      	cmp	r2, #1
 8004c96:	d1ac      	bne.n	8004bf2 <HAL_UART_Transmit+0xf6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c9c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	e843 2100 	strex	r1, r2, [r3]
 8004ca4:	2900      	cmp	r1, #0
 8004ca6:	d1f7      	bne.n	8004c98 <HAL_UART_Transmit+0x19c>
 8004ca8:	e7a3      	b.n	8004bf2 <HAL_UART_Transmit+0xf6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	e853 2f00 	ldrex	r2, [r3]
 8004cae:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	e843 2100 	strex	r1, r2, [r3]
 8004cb6:	2900      	cmp	r1, #0
 8004cb8:	d1f7      	bne.n	8004caa <HAL_UART_Transmit+0x1ae>
 8004cba:	e79a      	b.n	8004bf2 <HAL_UART_Transmit+0xf6>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	e843 2100 	strex	r1, r2, [r3]
 8004ccc:	2900      	cmp	r1, #0
 8004cce:	d1f7      	bne.n	8004cc0 <HAL_UART_Transmit+0x1c4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	f103 0208 	add.w	r2, r3, #8
 8004cd4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	f103 0008 	add.w	r0, r3, #8
 8004ce0:	e840 2100 	strex	r1, r2, [r0]
 8004ce4:	2900      	cmp	r1, #0
 8004ce6:	d1f3      	bne.n	8004cd0 <HAL_UART_Transmit+0x1d4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004cea:	2a01      	cmp	r2, #1
 8004cec:	d00b      	beq.n	8004d06 <HAL_UART_Transmit+0x20a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cee:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004cf0:	2120      	movs	r1, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cf2:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8004cf8:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfa:	6623      	str	r3, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 8004cfc:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d00:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
           return HAL_ERROR;
 8004d04:	e77f      	b.n	8004c06 <HAL_UART_Transmit+0x10a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d06:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0e:	e843 2100 	strex	r1, r2, [r3]
 8004d12:	2900      	cmp	r1, #0
 8004d14:	d1f7      	bne.n	8004d06 <HAL_UART_Transmit+0x20a>
 8004d16:	e7ea      	b.n	8004cee <HAL_UART_Transmit+0x1f2>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d18:	2208      	movs	r2, #8
 8004d1a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d20:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	e843 2100 	strex	r1, r2, [r3]
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	d1f7      	bne.n	8004d1c <HAL_UART_Transmit+0x220>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	f103 0208 	add.w	r2, r3, #8
 8004d30:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d34:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	f103 0008 	add.w	r0, r3, #8
 8004d3c:	e840 2100 	strex	r1, r2, [r0]
 8004d40:	2900      	cmp	r1, #0
 8004d42:	d1f3      	bne.n	8004d2c <HAL_UART_Transmit+0x230>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d44:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004d46:	2a01      	cmp	r2, #1
 8004d48:	d1d1      	bne.n	8004cee <HAL_UART_Transmit+0x1f2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d4e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	e843 2100 	strex	r1, r2, [r3]
 8004d56:	2900      	cmp	r1, #0
 8004d58:	d1f7      	bne.n	8004d4a <HAL_UART_Transmit+0x24e>
 8004d5a:	e7c8      	b.n	8004cee <HAL_UART_Transmit+0x1f2>

08004d5c <HAL_UART_TxCpltCallback>:
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop

08004d60 <HAL_UART_ErrorCallback>:
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop

08004d64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d64:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d66:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d6e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d72:	f7ff fff5 	bl	8004d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d76:	bd08      	pop	{r3, pc}

08004d78 <HAL_UARTEx_RxEventCallback>:
}
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop

08004d7c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d7c:	6803      	ldr	r3, [r0, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d80:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d82:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 8004d86:	ea12 0f0c 	tst.w	r2, ip
{
 8004d8a:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d8c:	689d      	ldr	r5, [r3, #8]
{
 8004d8e:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8004d90:	d17f      	bne.n	8004e92 <HAL_UART_IRQHandler+0x116>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d92:	0696      	lsls	r6, r2, #26
 8004d94:	d502      	bpl.n	8004d9c <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d96:	068e      	lsls	r6, r1, #26
 8004d98:	f100 8115 	bmi.w	8004fc6 <HAL_UART_IRQHandler+0x24a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d9c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004d9e:	2801      	cmp	r0, #1
 8004da0:	d024      	beq.n	8004dec <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004da2:	02d6      	lsls	r6, r2, #11
 8004da4:	d502      	bpl.n	8004dac <HAL_UART_IRQHandler+0x30>
 8004da6:	0268      	lsls	r0, r5, #9
 8004da8:	f100 8112 	bmi.w	8004fd0 <HAL_UART_IRQHandler+0x254>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004dac:	0616      	lsls	r6, r2, #24
 8004dae:	d414      	bmi.n	8004dda <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004db0:	0650      	lsls	r0, r2, #25
 8004db2:	d501      	bpl.n	8004db8 <HAL_UART_IRQHandler+0x3c>
 8004db4:	064a      	lsls	r2, r1, #25
 8004db6:	d400      	bmi.n	8004dba <HAL_UART_IRQHandler+0x3e>
}
 8004db8:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	e843 2100 	strex	r1, r2, [r3]
 8004dc6:	2900      	cmp	r1, #0
 8004dc8:	d1f7      	bne.n	8004dba <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dca:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004dcc:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004dce:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->TxISR = NULL;
 8004dd0:	66e3      	str	r3, [r4, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	f7ff ffc2 	bl	8004d5c <HAL_UART_TxCpltCallback>
}
 8004dd8:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004dda:	060d      	lsls	r5, r1, #24
 8004ddc:	d5e8      	bpl.n	8004db0 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 8004dde:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0e9      	beq.n	8004db8 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 8004de4:	4620      	mov	r0, r4
}
 8004de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8004dea:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004dec:	06d6      	lsls	r6, r2, #27
 8004dee:	d5d8      	bpl.n	8004da2 <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004df0:	06c8      	lsls	r0, r1, #27
 8004df2:	d5d6      	bpl.n	8004da2 <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004df4:	2210      	movs	r2, #16
 8004df6:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	0652      	lsls	r2, r2, #25
 8004dfc:	f140 8105 	bpl.w	800500a <HAL_UART_IRQHandler+0x28e>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e00:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004e02:	6802      	ldr	r2, [r0, #0]
 8004e04:	6852      	ldr	r2, [r2, #4]
 8004e06:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004e08:	2a00      	cmp	r2, #0
 8004e0a:	d0d5      	beq.n	8004db8 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e0c:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8004e10:	4291      	cmp	r1, r2
 8004e12:	d9d1      	bls.n	8004db8 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 8004e14:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e18:	6982      	ldr	r2, [r0, #24]
 8004e1a:	2a20      	cmp	r2, #32
 8004e1c:	d02f      	beq.n	8004e7e <HAL_UART_IRQHandler+0x102>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	e843 2100 	strex	r1, r2, [r3]
 8004e2a:	2900      	cmp	r1, #0
 8004e2c:	d1f7      	bne.n	8004e1e <HAL_UART_IRQHandler+0xa2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	f103 0208 	add.w	r2, r3, #8
 8004e32:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e36:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	f103 0508 	add.w	r5, r3, #8
 8004e3e:	e845 2100 	strex	r1, r2, [r5]
 8004e42:	2900      	cmp	r1, #0
 8004e44:	d1f3      	bne.n	8004e2e <HAL_UART_IRQHandler+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e46:	f103 0208 	add.w	r2, r3, #8
 8004e4a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	f103 0508 	add.w	r5, r3, #8
 8004e56:	e845 2100 	strex	r1, r2, [r5]
 8004e5a:	2900      	cmp	r1, #0
 8004e5c:	d1f3      	bne.n	8004e46 <HAL_UART_IRQHandler+0xca>
          huart->RxState = HAL_UART_STATE_READY;
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e64:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e6a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	e843 2100 	strex	r1, r2, [r3]
 8004e72:	2900      	cmp	r1, #0
 8004e74:	d1f7      	bne.n	8004e66 <HAL_UART_IRQHandler+0xea>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e76:	f7fd fe15 	bl	8002aa4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e7a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e7e:	2302      	movs	r3, #2
 8004e80:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e82:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8004e86:	1ac9      	subs	r1, r1, r3
 8004e88:	4620      	mov	r0, r4
 8004e8a:	b289      	uxth	r1, r1
 8004e8c:	f7ff ff74 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
}
 8004e90:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e92:	487c      	ldr	r0, [pc, #496]	; (8005084 <HAL_UART_IRQHandler+0x308>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e94:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e98:	4008      	ands	r0, r1
 8004e9a:	4330      	orrs	r0, r6
 8004e9c:	f43f af7e 	beq.w	8004d9c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ea0:	07d5      	lsls	r5, r2, #31
 8004ea2:	d509      	bpl.n	8004eb8 <HAL_UART_IRQHandler+0x13c>
 8004ea4:	05c8      	lsls	r0, r1, #23
 8004ea6:	d507      	bpl.n	8004eb8 <HAL_UART_IRQHandler+0x13c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004eac:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004eb0:	f040 0001 	orr.w	r0, r0, #1
 8004eb4:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004eb8:	0795      	lsls	r5, r2, #30
 8004eba:	d57f      	bpl.n	8004fbc <HAL_UART_IRQHandler+0x240>
 8004ebc:	b18e      	cbz	r6, 8004ee2 <HAL_UART_IRQHandler+0x166>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ebe:	2002      	movs	r0, #2
 8004ec0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ec2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004ec6:	f040 0004 	orr.w	r0, r0, #4
 8004eca:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ece:	0750      	lsls	r0, r2, #29
 8004ed0:	d507      	bpl.n	8004ee2 <HAL_UART_IRQHandler+0x166>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ed2:	2004      	movs	r0, #4
 8004ed4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ed6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004eda:	f040 0002 	orr.w	r0, r0, #2
 8004ede:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ee2:	0710      	lsls	r0, r2, #28
 8004ee4:	d50b      	bpl.n	8004efe <HAL_UART_IRQHandler+0x182>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ee6:	f001 0020 	and.w	r0, r1, #32
 8004eea:	4330      	orrs	r0, r6
 8004eec:	d007      	beq.n	8004efe <HAL_UART_IRQHandler+0x182>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004eee:	2008      	movs	r0, #8
 8004ef0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ef2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004ef6:	f040 0008 	orr.w	r0, r0, #8
 8004efa:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004efe:	0516      	lsls	r6, r2, #20
 8004f00:	d50a      	bpl.n	8004f18 <HAL_UART_IRQHandler+0x19c>
 8004f02:	014d      	lsls	r5, r1, #5
 8004f04:	d508      	bpl.n	8004f18 <HAL_UART_IRQHandler+0x19c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f06:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004f0a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f0c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004f10:	f040 0020 	orr.w	r0, r0, #32
 8004f14:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f18:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	f43f af4b 	beq.w	8004db8 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f22:	0690      	lsls	r0, r2, #26
 8004f24:	d506      	bpl.n	8004f34 <HAL_UART_IRQHandler+0x1b8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f26:	0689      	lsls	r1, r1, #26
 8004f28:	d504      	bpl.n	8004f34 <HAL_UART_IRQHandler+0x1b8>
        if (huart->RxISR != NULL)
 8004f2a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8004f2c:	b112      	cbz	r2, 8004f34 <HAL_UART_IRQHandler+0x1b8>
          huart->RxISR(huart);
 8004f2e:	4620      	mov	r0, r4
 8004f30:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f32:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8004f34:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f38:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f3a:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f3e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004f42:	4315      	orrs	r5, r2
 8004f44:	f000 8098 	beq.w	8005078 <HAL_UART_IRQHandler+0x2fc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f50:	e843 2100 	strex	r1, r2, [r3]
 8004f54:	2900      	cmp	r1, #0
 8004f56:	d1f7      	bne.n	8004f48 <HAL_UART_IRQHandler+0x1cc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	f103 0208 	add.w	r2, r3, #8
 8004f5c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f60:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	f103 0008 	add.w	r0, r3, #8
 8004f68:	e840 2100 	strex	r1, r2, [r0]
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	d1f3      	bne.n	8004f58 <HAL_UART_IRQHandler+0x1dc>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f70:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004f72:	2a01      	cmp	r2, #1
 8004f74:	d034      	beq.n	8004fe0 <HAL_UART_IRQHandler+0x264>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f76:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004f78:	2120      	movs	r1, #32
 8004f7a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7e:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f80:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8004f82:	66a2      	str	r2, [r4, #104]	; 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	064a      	lsls	r2, r1, #25
 8004f86:	d53c      	bpl.n	8005002 <HAL_UART_IRQHandler+0x286>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f88:	f103 0208 	add.w	r2, r3, #8
 8004f8c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	f103 0008 	add.w	r0, r3, #8
 8004f98:	e840 2100 	strex	r1, r2, [r0]
 8004f9c:	2900      	cmp	r1, #0
 8004f9e:	d1f3      	bne.n	8004f88 <HAL_UART_IRQHandler+0x20c>
          if (huart->hdmarx != NULL)
 8004fa0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004fa2:	b370      	cbz	r0, 8005002 <HAL_UART_IRQHandler+0x286>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fa4:	4b38      	ldr	r3, [pc, #224]	; (8005088 <HAL_UART_IRQHandler+0x30c>)
 8004fa6:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fa8:	f7fd fd9e 	bl	8002ae8 <HAL_DMA_Abort_IT>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	f43f af03 	beq.w	8004db8 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fb2:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
 8004fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004fba:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fbc:	0755      	lsls	r5, r2, #29
 8004fbe:	d590      	bpl.n	8004ee2 <HAL_UART_IRQHandler+0x166>
 8004fc0:	2e00      	cmp	r6, #0
 8004fc2:	d186      	bne.n	8004ed2 <HAL_UART_IRQHandler+0x156>
 8004fc4:	e78d      	b.n	8004ee2 <HAL_UART_IRQHandler+0x166>
      if (huart->RxISR != NULL)
 8004fc6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f47f af0c 	bne.w	8004de6 <HAL_UART_IRQHandler+0x6a>
 8004fce:	e6f3      	b.n	8004db8 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004fd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8004fd4:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004fd6:	621a      	str	r2, [r3, #32]
}
 8004fd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8004fdc:	f000 bc48 	b.w	8005870 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	e843 2100 	strex	r1, r2, [r3]
 8004fec:	2900      	cmp	r1, #0
 8004fee:	d0c2      	beq.n	8004f76 <HAL_UART_IRQHandler+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	e853 2f00 	ldrex	r2, [r3]
 8004ff4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	e843 2100 	strex	r1, r2, [r3]
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	d1ef      	bne.n	8004fe0 <HAL_UART_IRQHandler+0x264>
 8005000:	e7b9      	b.n	8004f76 <HAL_UART_IRQHandler+0x1fa>
            HAL_UART_ErrorCallback(huart);
 8005002:	4620      	mov	r0, r4
 8005004:	f7ff feac 	bl	8004d60 <HAL_UART_ErrorCallback>
}
 8005008:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800500a:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 800500e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8005012:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005014:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005016:	2a00      	cmp	r2, #0
 8005018:	f43f aece 	beq.w	8004db8 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800501c:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
 8005020:	1a51      	subs	r1, r2, r1
 8005022:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005024:	2900      	cmp	r1, #0
 8005026:	f43f aec7 	beq.w	8004db8 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800502e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	e843 2000 	strex	r0, r2, [r3]
 8005036:	2800      	cmp	r0, #0
 8005038:	d1f7      	bne.n	800502a <HAL_UART_IRQHandler+0x2ae>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503a:	f103 0208 	add.w	r2, r3, #8
 800503e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005042:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	f103 0508 	add.w	r5, r3, #8
 800504a:	e845 2000 	strex	r0, r2, [r5]
 800504e:	2800      	cmp	r0, #0
 8005050:	d1f3      	bne.n	800503a <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8005052:	2220      	movs	r2, #32
 8005054:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
        huart->RxISR = NULL;
 8005058:	66a0      	str	r0, [r4, #104]	; 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505a:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005060:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005064:	e843 2000 	strex	r0, r2, [r3]
 8005068:	2800      	cmp	r0, #0
 800506a:	d1f7      	bne.n	800505c <HAL_UART_IRQHandler+0x2e0>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800506c:	2302      	movs	r3, #2
 800506e:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005070:	4620      	mov	r0, r4
 8005072:	f7ff fe81 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
}
 8005076:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005078:	4620      	mov	r0, r4
 800507a:	f7ff fe71 	bl	8004d60 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8005082:	bd70      	pop	{r4, r5, r6, pc}
 8005084:	04000120 	.word	0x04000120
 8005088:	08004d65 	.word	0x08004d65

0800508c <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 800508c:	b508      	push	{r3, lr}
 800508e:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005094:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005098:	e843 2100 	strex	r1, r2, [r3]
 800509c:	2900      	cmp	r1, #0
 800509e:	d1f7      	bne.n	8005090 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	f103 0208 	add.w	r2, r3, #8
 80050a4:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	f103 0c08 	add.w	ip, r3, #8
 80050b0:	e84c 2100 	strex	r1, r2, [ip]
 80050b4:	2900      	cmp	r1, #0
 80050b6:	d1f3      	bne.n	80050a0 <UART_RxISR_16BIT.part.0+0x14>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050be:	6641      	str	r1, [r0, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050c0:	685a      	ldr	r2, [r3, #4]
      huart->RxISR = NULL;
 80050c2:	6681      	str	r1, [r0, #104]	; 0x68
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050c4:	0211      	lsls	r1, r2, #8
 80050c6:	d416      	bmi.n	80050f6 <UART_RxISR_16BIT.part.0+0x6a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80050ca:	2a01      	cmp	r2, #1
 80050cc:	d124      	bne.n	8005118 <UART_RxISR_16BIT.part.0+0x8c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ce:	2200      	movs	r2, #0
 80050d0:	6602      	str	r2, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050da:	e843 2100 	strex	r1, r2, [r3]
 80050de:	2900      	cmp	r1, #0
 80050e0:	d1f7      	bne.n	80050d2 <UART_RxISR_16BIT.part.0+0x46>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050e2:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050e4:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050e8:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050ea:	bf44      	itt	mi
 80050ec:	2210      	movmi	r2, #16
 80050ee:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050f0:	f7ff fe42 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050f4:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050fa:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	e843 2100 	strex	r1, r2, [r3]
 8005102:	2900      	cmp	r1, #0
 8005104:	d0e0      	beq.n	80050c8 <UART_RxISR_16BIT.part.0+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	e853 2f00 	ldrex	r2, [r3]
 800510a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	e843 2100 	strex	r1, r2, [r3]
 8005112:	2900      	cmp	r1, #0
 8005114:	d1ef      	bne.n	80050f6 <UART_RxISR_16BIT.part.0+0x6a>
 8005116:	e7d7      	b.n	80050c8 <UART_RxISR_16BIT.part.0+0x3c>
        HAL_UART_RxCpltCallback(huart);
 8005118:	f7fc fc4c 	bl	80019b4 <HAL_UART_RxCpltCallback>
}
 800511c:	bd08      	pop	{r3, pc}
 800511e:	bf00      	nop

08005120 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005120:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 8005124:	2a22      	cmp	r2, #34	; 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005126:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005128:	d004      	beq.n	8005134 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800512a:	6993      	ldr	r3, [r2, #24]
 800512c:	f043 0308 	orr.w	r3, r3, #8
 8005130:	6193      	str	r3, [r2, #24]
  }
}
 8005132:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005134:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8005136:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
 800513a:	6d41      	ldr	r1, [r0, #84]	; 0x54
 800513c:	ea02 020c 	and.w	r2, r2, ip
 8005140:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8005144:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 8005148:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800514a:	3a01      	subs	r2, #1
 800514c:	b292      	uxth	r2, r2
 800514e:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8005152:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1ea      	bne.n	8005132 <UART_RxISR_16BIT+0x12>
 800515c:	f7ff bf96 	b.w	800508c <UART_RxISR_16BIT.part.0>

08005160 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005160:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 8005164:	2a22      	cmp	r2, #34	; 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005166:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005168:	d004      	beq.n	8005174 <UART_RxISR_8BIT+0x14>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800516a:	6993      	ldr	r3, [r2, #24]
 800516c:	f043 0308 	orr.w	r3, r3, #8
 8005170:	6193      	str	r3, [r2, #24]
}
 8005172:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005174:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005176:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
 800517a:	6d41      	ldr	r1, [r0, #84]	; 0x54
 800517c:	ea02 020c 	and.w	r2, r2, ip
 8005180:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8005182:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8005186:	6d41      	ldr	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005188:	3a01      	subs	r2, #1
 800518a:	b292      	uxth	r2, r2
 800518c:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8005190:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8005194:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 8005196:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8005198:	6541      	str	r1, [r0, #84]	; 0x54
    if (huart->RxXferCount == 0U)
 800519a:	2a00      	cmp	r2, #0
 800519c:	d1e9      	bne.n	8005172 <UART_RxISR_8BIT+0x12>
 800519e:	f7ff bf75 	b.w	800508c <UART_RxISR_16BIT.part.0>
 80051a2:	bf00      	nop

080051a4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80051a6:	07da      	lsls	r2, r3, #31
{
 80051a8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051aa:	d506      	bpl.n	80051ba <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051ac:	6801      	ldr	r1, [r0, #0]
 80051ae:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80051b0:	684a      	ldr	r2, [r1, #4]
 80051b2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80051b6:	4322      	orrs	r2, r4
 80051b8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051ba:	079c      	lsls	r4, r3, #30
 80051bc:	d506      	bpl.n	80051cc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051be:	6801      	ldr	r1, [r0, #0]
 80051c0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80051c2:	684a      	ldr	r2, [r1, #4]
 80051c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051c8:	4322      	orrs	r2, r4
 80051ca:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051cc:	0759      	lsls	r1, r3, #29
 80051ce:	d506      	bpl.n	80051de <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051d0:	6801      	ldr	r1, [r0, #0]
 80051d2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80051d4:	684a      	ldr	r2, [r1, #4]
 80051d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051da:	4322      	orrs	r2, r4
 80051dc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051de:	071a      	lsls	r2, r3, #28
 80051e0:	d506      	bpl.n	80051f0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051e2:	6801      	ldr	r1, [r0, #0]
 80051e4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80051e6:	684a      	ldr	r2, [r1, #4]
 80051e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051ec:	4322      	orrs	r2, r4
 80051ee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051f0:	06dc      	lsls	r4, r3, #27
 80051f2:	d506      	bpl.n	8005202 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051f4:	6801      	ldr	r1, [r0, #0]
 80051f6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80051f8:	688a      	ldr	r2, [r1, #8]
 80051fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051fe:	4322      	orrs	r2, r4
 8005200:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005202:	0699      	lsls	r1, r3, #26
 8005204:	d506      	bpl.n	8005214 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005206:	6801      	ldr	r1, [r0, #0]
 8005208:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800520a:	688a      	ldr	r2, [r1, #8]
 800520c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005210:	4322      	orrs	r2, r4
 8005212:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005214:	065a      	lsls	r2, r3, #25
 8005216:	d509      	bpl.n	800522c <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005218:	6801      	ldr	r1, [r0, #0]
 800521a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800521c:	684a      	ldr	r2, [r1, #4]
 800521e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005222:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005224:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005228:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800522a:	d00b      	beq.n	8005244 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800522c:	061b      	lsls	r3, r3, #24
 800522e:	d506      	bpl.n	800523e <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005230:	6802      	ldr	r2, [r0, #0]
 8005232:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005234:	6853      	ldr	r3, [r2, #4]
 8005236:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800523a:	430b      	orrs	r3, r1
 800523c:	6053      	str	r3, [r2, #4]
}
 800523e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005242:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005244:	684a      	ldr	r2, [r1, #4]
 8005246:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005248:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800524c:	4322      	orrs	r2, r4
 800524e:	604a      	str	r2, [r1, #4]
 8005250:	e7ec      	b.n	800522c <UART_AdvFeatureConfig+0x88>
 8005252:	bf00      	nop

08005254 <UART_CheckIdleState>:
{
 8005254:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005256:	2300      	movs	r3, #0
{
 8005258:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 800525e:	f7fd fb91 	bl	8002984 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005262:	6822      	ldr	r2, [r4, #0]
 8005264:	6813      	ldr	r3, [r2, #0]
 8005266:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8005268:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800526a:	d40d      	bmi.n	8005288 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800526c:	6813      	ldr	r3, [r2, #0]
 800526e:	0759      	lsls	r1, r3, #29
 8005270:	d430      	bmi.n	80052d4 <UART_CheckIdleState+0x80>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005272:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005274:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8005276:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 800527a:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 800527c:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 800527e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005282:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005284:	6663      	str	r3, [r4, #100]	; 0x64
}
 8005286:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005288:	69d3      	ldr	r3, [r2, #28]
 800528a:	0298      	lsls	r0, r3, #10
 800528c:	d4ee      	bmi.n	800526c <UART_CheckIdleState+0x18>
 800528e:	e00c      	b.n	80052aa <UART_CheckIdleState+0x56>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005290:	6819      	ldr	r1, [r3, #0]
 8005292:	0749      	lsls	r1, r1, #29
 8005294:	461a      	mov	r2, r3
 8005296:	d505      	bpl.n	80052a4 <UART_CheckIdleState+0x50>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005298:	69d9      	ldr	r1, [r3, #28]
 800529a:	0708      	lsls	r0, r1, #28
 800529c:	d44e      	bmi.n	800533c <UART_CheckIdleState+0xe8>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800529e:	69d9      	ldr	r1, [r3, #28]
 80052a0:	0509      	lsls	r1, r1, #20
 80052a2:	d479      	bmi.n	8005398 <UART_CheckIdleState+0x144>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	0298      	lsls	r0, r3, #10
 80052a8:	d4e0      	bmi.n	800526c <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052aa:	f7fd fb6b 	bl	8002984 <HAL_GetTick>
 80052ae:	1b43      	subs	r3, r0, r5
 80052b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	d3eb      	bcc.n	8005290 <UART_CheckIdleState+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	e843 2100 	strex	r1, r2, [r3]
 80052c4:	2900      	cmp	r1, #0
 80052c6:	d1f7      	bne.n	80052b8 <UART_CheckIdleState+0x64>
      huart->gState = HAL_UART_STATE_READY;
 80052c8:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 80052ca:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
      huart->gState = HAL_UART_STATE_READY;
 80052ce:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80052d0:	2003      	movs	r0, #3
}
 80052d2:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052d4:	69d3      	ldr	r3, [r2, #28]
 80052d6:	025b      	lsls	r3, r3, #9
 80052d8:	d4cb      	bmi.n	8005272 <UART_CheckIdleState+0x1e>
 80052da:	e00d      	b.n	80052f8 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	0750      	lsls	r0, r2, #29
 80052e0:	d507      	bpl.n	80052f2 <UART_CheckIdleState+0x9e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	0711      	lsls	r1, r2, #28
 80052e6:	f100 8085 	bmi.w	80053f4 <UART_CheckIdleState+0x1a0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	0512      	lsls	r2, r2, #20
 80052ee:	f100 80af 	bmi.w	8005450 <UART_CheckIdleState+0x1fc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	025b      	lsls	r3, r3, #9
 80052f6:	d4bc      	bmi.n	8005272 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f8:	f7fd fb44 	bl	8002984 <HAL_GetTick>
 80052fc:	1b43      	subs	r3, r0, r5
 80052fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	d3ea      	bcc.n	80052dc <UART_CheckIdleState+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800530a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	e843 2100 	strex	r1, r2, [r3]
 8005312:	2900      	cmp	r1, #0
 8005314:	d1f7      	bne.n	8005306 <UART_CheckIdleState+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	f103 0208 	add.w	r2, r3, #8
 800531a:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	f103 0008 	add.w	r0, r3, #8
 8005326:	e840 2100 	strex	r1, r2, [r0]
 800532a:	2900      	cmp	r1, #0
 800532c:	d1f3      	bne.n	8005316 <UART_CheckIdleState+0xc2>
      huart->RxState = HAL_UART_STATE_READY;
 800532e:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 8005330:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
      huart->RxState = HAL_UART_STATE_READY;
 8005334:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 8005338:	2003      	movs	r0, #3
}
 800533a:	bd38      	pop	{r3, r4, r5, pc}
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800533c:	2208      	movs	r2, #8
 800533e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005340:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005344:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	e843 2100 	strex	r1, r2, [r3]
 800534c:	2900      	cmp	r1, #0
 800534e:	d1f7      	bne.n	8005340 <UART_CheckIdleState+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	f103 0208 	add.w	r2, r3, #8
 8005354:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005358:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535c:	f103 0008 	add.w	r0, r3, #8
 8005360:	e840 2100 	strex	r1, r2, [r0]
 8005364:	2900      	cmp	r1, #0
 8005366:	d1f3      	bne.n	8005350 <UART_CheckIdleState+0xfc>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005368:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800536a:	2a01      	cmp	r2, #1
 800536c:	d00b      	beq.n	8005386 <UART_CheckIdleState+0x132>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005370:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005372:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8005374:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8005378:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537a:	6622      	str	r2, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 800537c:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005380:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
           return HAL_ERROR;
 8005384:	e798      	b.n	80052b8 <UART_CheckIdleState+0x64>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800538a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538e:	e843 2100 	strex	r1, r2, [r3]
 8005392:	2900      	cmp	r1, #0
 8005394:	d1f7      	bne.n	8005386 <UART_CheckIdleState+0x132>
 8005396:	e7ea      	b.n	800536e <UART_CheckIdleState+0x11a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800539c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	e843 2100 	strex	r1, r2, [r3]
 80053aa:	2900      	cmp	r1, #0
 80053ac:	d1f7      	bne.n	800539e <UART_CheckIdleState+0x14a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ae:	f103 0208 	add.w	r2, r3, #8
 80053b2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	f103 0008 	add.w	r0, r3, #8
 80053be:	e840 2100 	strex	r1, r2, [r0]
 80053c2:	2900      	cmp	r1, #0
 80053c4:	d1f3      	bne.n	80053ae <UART_CheckIdleState+0x15a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80053c8:	2a01      	cmp	r2, #1
 80053ca:	d00a      	beq.n	80053e2 <UART_CheckIdleState+0x18e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053cc:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80053ce:	2120      	movs	r1, #32
 80053d0:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 80053d4:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d6:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 80053d8:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053dc:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 80053e0:	e76a      	b.n	80052b8 <UART_CheckIdleState+0x64>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	e843 2100 	strex	r1, r2, [r3]
 80053ee:	2900      	cmp	r1, #0
 80053f0:	d1f7      	bne.n	80053e2 <UART_CheckIdleState+0x18e>
 80053f2:	e7eb      	b.n	80053cc <UART_CheckIdleState+0x178>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053f4:	2208      	movs	r2, #8
 80053f6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005400:	e843 2100 	strex	r1, r2, [r3]
 8005404:	2900      	cmp	r1, #0
 8005406:	d1f7      	bne.n	80053f8 <UART_CheckIdleState+0x1a4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	f103 0208 	add.w	r2, r3, #8
 800540c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005410:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005414:	f103 0008 	add.w	r0, r3, #8
 8005418:	e840 2100 	strex	r1, r2, [r0]
 800541c:	2900      	cmp	r1, #0
 800541e:	d1f3      	bne.n	8005408 <UART_CheckIdleState+0x1b4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005420:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005422:	2a01      	cmp	r2, #1
 8005424:	d00b      	beq.n	800543e <UART_CheckIdleState+0x1ea>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005426:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005428:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800542a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800542c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8005430:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005432:	6622      	str	r2, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 8005434:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005438:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
           return HAL_ERROR;
 800543c:	e763      	b.n	8005306 <UART_CheckIdleState+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005442:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005446:	e843 2100 	strex	r1, r2, [r3]
 800544a:	2900      	cmp	r1, #0
 800544c:	d1f7      	bne.n	800543e <UART_CheckIdleState+0x1ea>
 800544e:	e7ea      	b.n	8005426 <UART_CheckIdleState+0x1d2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005454:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005456:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800545a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	e843 2100 	strex	r1, r2, [r3]
 8005462:	2900      	cmp	r1, #0
 8005464:	d1f7      	bne.n	8005456 <UART_CheckIdleState+0x202>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	f103 0208 	add.w	r2, r3, #8
 800546a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	f103 0008 	add.w	r0, r3, #8
 8005476:	e840 2100 	strex	r1, r2, [r0]
 800547a:	2900      	cmp	r1, #0
 800547c:	d1f3      	bne.n	8005466 <UART_CheckIdleState+0x212>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800547e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005480:	2a01      	cmp	r2, #1
 8005482:	d00a      	beq.n	800549a <UART_CheckIdleState+0x246>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005484:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005486:	2120      	movs	r1, #32
 8005488:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 800548c:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548e:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8005490:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005494:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 8005498:	e735      	b.n	8005306 <UART_CheckIdleState+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800549e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	e843 2100 	strex	r1, r2, [r3]
 80054a6:	2900      	cmp	r1, #0
 80054a8:	d1f7      	bne.n	800549a <UART_CheckIdleState+0x246>
 80054aa:	e7eb      	b.n	8005484 <UART_CheckIdleState+0x230>

080054ac <HAL_UART_Init>:
  if (huart == NULL)
 80054ac:	2800      	cmp	r0, #0
 80054ae:	f000 80f2 	beq.w	8005696 <HAL_UART_Init+0x1ea>
{
 80054b2:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80054b4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80054b6:	4604      	mov	r4, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d035      	beq.n	8005528 <HAL_UART_Init+0x7c>
  __HAL_UART_DISABLE(huart);
 80054bc:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054be:	6920      	ldr	r0, [r4, #16]
 80054c0:	6965      	ldr	r5, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 80054c2:	2224      	movs	r2, #36	; 0x24
 80054c4:	67e2      	str	r2, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80054c6:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054c8:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80054ca:	f021 0101 	bic.w	r1, r1, #1
 80054ce:	6019      	str	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054d0:	4302      	orrs	r2, r0
 80054d2:	432a      	orrs	r2, r5
 80054d4:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054d6:	681d      	ldr	r5, [r3, #0]
 80054d8:	4995      	ldr	r1, [pc, #596]	; (8005730 <HAL_UART_Init+0x284>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054da:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054dc:	4029      	ands	r1, r5
 80054de:	430a      	orrs	r2, r1
 80054e0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 80054e6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80054ec:	430a      	orrs	r2, r1
 80054ee:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054f0:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054f2:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054f4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80054f8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054fa:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054fc:	498d      	ldr	r1, [pc, #564]	; (8005734 <HAL_UART_Init+0x288>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054fe:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005500:	428b      	cmp	r3, r1
 8005502:	d016      	beq.n	8005532 <HAL_UART_Init+0x86>
 8005504:	4a8c      	ldr	r2, [pc, #560]	; (8005738 <HAL_UART_Init+0x28c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d03a      	beq.n	8005580 <HAL_UART_Init+0xd4>
 800550a:	4a8c      	ldr	r2, [pc, #560]	; (800573c <HAL_UART_Init+0x290>)
 800550c:	4293      	cmp	r3, r2
 800550e:	f000 80ac 	beq.w	800566a <HAL_UART_Init+0x1be>
 8005512:	4a8b      	ldr	r2, [pc, #556]	; (8005740 <HAL_UART_Init+0x294>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d065      	beq.n	80055e4 <HAL_UART_Init+0x138>
 8005518:	4a8a      	ldr	r2, [pc, #552]	; (8005744 <HAL_UART_Init+0x298>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d06f      	beq.n	80055fe <HAL_UART_Init+0x152>
  huart->RxISR = NULL;
 800551e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005520:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 8005524:	2001      	movs	r0, #1
 8005526:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8005528:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 800552c:	f7fd f8d8 	bl	80026e0 <HAL_UART_MspInit>
 8005530:	e7c4      	b.n	80054bc <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005532:	4b85      	ldr	r3, [pc, #532]	; (8005748 <HAL_UART_Init+0x29c>)
 8005534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	3b01      	subs	r3, #1
 800553c:	2b02      	cmp	r3, #2
 800553e:	d933      	bls.n	80055a8 <HAL_UART_Init+0xfc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005540:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005544:	f000 80d5 	beq.w	80056f2 <HAL_UART_Init+0x246>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005548:	f7fe fcb0 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800554c:	2800      	cmp	r0, #0
 800554e:	d16b      	bne.n	8005628 <HAL_UART_Init+0x17c>
  huart->RxISR = NULL;
 8005550:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005552:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005558:	2b00      	cmp	r3, #0
 800555a:	d179      	bne.n	8005650 <HAL_UART_Init+0x1a4>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005564:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800556c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005574:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005576:	601a      	str	r2, [r3, #0]
}
 8005578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 800557c:	f7ff be6a 	b.w	8005254 <UART_CheckIdleState>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005580:	4b71      	ldr	r3, [pc, #452]	; (8005748 <HAL_UART_Init+0x29c>)
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800558c:	d047      	beq.n	800561e <HAL_UART_Init+0x172>
 800558e:	d863      	bhi.n	8005658 <HAL_UART_Init+0x1ac>
 8005590:	2b00      	cmp	r3, #0
 8005592:	d03e      	beq.n	8005612 <HAL_UART_Init+0x166>
 8005594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005598:	d1c1      	bne.n	800551e <HAL_UART_Init+0x72>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800559a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800559e:	f000 80ab 	beq.w	80056f8 <HAL_UART_Init+0x24c>
        pclk = HAL_RCC_GetSysClockFreq();
 80055a2:	f7fe fc39 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
        break;
 80055a6:	e7d1      	b.n	800554c <HAL_UART_Init+0xa0>
 80055a8:	4a68      	ldr	r2, [pc, #416]	; (800574c <HAL_UART_Init+0x2a0>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055aa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80055ae:	5cd3      	ldrb	r3, [r2, r3]
 80055b0:	f000 80a5 	beq.w	80056fe <HAL_UART_Init+0x252>
    switch (clocksource)
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d8b2      	bhi.n	800551e <HAL_UART_Init+0x72>
 80055b8:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <HAL_UART_Init+0x114>)
 80055ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055be:	bf00      	nop
 80055c0:	08005619 	.word	0x08005619
 80055c4:	08005549 	.word	0x08005549
 80055c8:	08005667 	.word	0x08005667
 80055cc:	0800551f 	.word	0x0800551f
 80055d0:	080055a3 	.word	0x080055a3
 80055d4:	0800551f 	.word	0x0800551f
 80055d8:	0800551f 	.word	0x0800551f
 80055dc:	0800551f 	.word	0x0800551f
 80055e0:	08005625 	.word	0x08005625
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055e4:	4b58      	ldr	r3, [pc, #352]	; (8005748 <HAL_UART_Init+0x29c>)
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80055ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055f0:	d015      	beq.n	800561e <HAL_UART_Init+0x172>
 80055f2:	d84c      	bhi.n	800568e <HAL_UART_Init+0x1e2>
 80055f4:	b16b      	cbz	r3, 8005612 <HAL_UART_Init+0x166>
 80055f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055fa:	d0ce      	beq.n	800559a <HAL_UART_Init+0xee>
 80055fc:	e78f      	b.n	800551e <HAL_UART_Init+0x72>
 80055fe:	4b52      	ldr	r3, [pc, #328]	; (8005748 <HAL_UART_Init+0x29c>)
 8005600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005602:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005606:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800560a:	d008      	beq.n	800561e <HAL_UART_Init+0x172>
 800560c:	d84a      	bhi.n	80056a4 <HAL_UART_Init+0x1f8>
 800560e:	2b00      	cmp	r3, #0
 8005610:	d143      	bne.n	800569a <HAL_UART_Init+0x1ee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005612:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005616:	d049      	beq.n	80056ac <HAL_UART_Init+0x200>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005618:	f7fe fc30 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
        break;
 800561c:	e796      	b.n	800554c <HAL_UART_Init+0xa0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800561e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005622:	d061      	beq.n	80056e8 <HAL_UART_Init+0x23c>
        pclk = (uint32_t) LSE_VALUE;
 8005624:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005628:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800562a:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800562e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005632:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005636:	f1a0 0310 	sub.w	r3, r0, #16
 800563a:	4293      	cmp	r3, r2
 800563c:	f63f af6f 	bhi.w	800551e <HAL_UART_Init+0x72>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005640:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 8005642:	2300      	movs	r3, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005644:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8005646:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800564a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800564c:	2b00      	cmp	r3, #0
 800564e:	d085      	beq.n	800555c <HAL_UART_Init+0xb0>
    UART_AdvFeatureConfig(huart);
 8005650:	4620      	mov	r0, r4
 8005652:	f7ff fda7 	bl	80051a4 <UART_AdvFeatureConfig>
 8005656:	e781      	b.n	800555c <HAL_UART_Init+0xb0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005658:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800565c:	f47f af5f 	bne.w	800551e <HAL_UART_Init+0x72>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005660:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005664:	d043      	beq.n	80056ee <HAL_UART_Init+0x242>
    switch (clocksource)
 8005666:	483a      	ldr	r0, [pc, #232]	; (8005750 <HAL_UART_Init+0x2a4>)
 8005668:	e7de      	b.n	8005628 <HAL_UART_Init+0x17c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800566a:	4b37      	ldr	r3, [pc, #220]	; (8005748 <HAL_UART_Init+0x29c>)
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005672:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005676:	d0d2      	beq.n	800561e <HAL_UART_Init+0x172>
 8005678:	d805      	bhi.n	8005686 <HAL_UART_Init+0x1da>
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0c9      	beq.n	8005612 <HAL_UART_Init+0x166>
 800567e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005682:	d08a      	beq.n	800559a <HAL_UART_Init+0xee>
 8005684:	e74b      	b.n	800551e <HAL_UART_Init+0x72>
 8005686:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800568a:	d0e9      	beq.n	8005660 <HAL_UART_Init+0x1b4>
 800568c:	e747      	b.n	800551e <HAL_UART_Init+0x72>
 800568e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005692:	d0e5      	beq.n	8005660 <HAL_UART_Init+0x1b4>
 8005694:	e743      	b.n	800551e <HAL_UART_Init+0x72>
}
 8005696:	2001      	movs	r0, #1
 8005698:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 800569a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800569e:	f43f af7c 	beq.w	800559a <HAL_UART_Init+0xee>
 80056a2:	e73c      	b.n	800551e <HAL_UART_Init+0x72>
 80056a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056a8:	d0da      	beq.n	8005660 <HAL_UART_Init+0x1b4>
 80056aa:	e738      	b.n	800551e <HAL_UART_Init+0x72>
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ac:	f7fe fbe6 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80056b0:	2800      	cmp	r0, #0
 80056b2:	f43f af4d 	beq.w	8005550 <HAL_UART_Init+0xa4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056b6:	0043      	lsls	r3, r0, #1
 80056b8:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ba:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056be:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80056c2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c6:	f1a3 0210 	sub.w	r2, r3, #16
 80056ca:	428a      	cmp	r2, r1
 80056cc:	f63f af27 	bhi.w	800551e <HAL_UART_Init+0x72>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056d0:	f023 020f 	bic.w	r2, r3, #15
 80056d4:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 80056d6:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056d8:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80056dc:	4313      	orrs	r3, r2
  huart->RxISR = NULL;
 80056de:	2200      	movs	r2, #0
        huart->Instance->BRR = brrtemp;
 80056e0:	60cb      	str	r3, [r1, #12]
  huart->TxISR = NULL;
 80056e2:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
  return ret;
 80056e6:	e736      	b.n	8005556 <HAL_UART_Init+0xaa>
    switch (clocksource)
 80056e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056ec:	e7e4      	b.n	80056b8 <HAL_UART_Init+0x20c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ee:	4b19      	ldr	r3, [pc, #100]	; (8005754 <HAL_UART_Init+0x2a8>)
 80056f0:	e7e2      	b.n	80056b8 <HAL_UART_Init+0x20c>
        pclk = HAL_RCC_GetPCLK2Freq();
 80056f2:	f7fe fbdb 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
        break;
 80056f6:	e7db      	b.n	80056b0 <HAL_UART_Init+0x204>
        pclk = HAL_RCC_GetSysClockFreq();
 80056f8:	f7fe fb8e 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
        break;
 80056fc:	e7d8      	b.n	80056b0 <HAL_UART_Init+0x204>
    switch (clocksource)
 80056fe:	2b08      	cmp	r3, #8
 8005700:	f63f af0d 	bhi.w	800551e <HAL_UART_Init+0x72>
 8005704:	a201      	add	r2, pc, #4	; (adr r2, 800570c <HAL_UART_Init+0x260>)
 8005706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570a:	bf00      	nop
 800570c:	080056ad 	.word	0x080056ad
 8005710:	080056f3 	.word	0x080056f3
 8005714:	080056ef 	.word	0x080056ef
 8005718:	0800551f 	.word	0x0800551f
 800571c:	080056f9 	.word	0x080056f9
 8005720:	0800551f 	.word	0x0800551f
 8005724:	0800551f 	.word	0x0800551f
 8005728:	0800551f 	.word	0x0800551f
 800572c:	080056e9 	.word	0x080056e9
 8005730:	efff69f3 	.word	0xefff69f3
 8005734:	40013800 	.word	0x40013800
 8005738:	40004400 	.word	0x40004400
 800573c:	40004800 	.word	0x40004800
 8005740:	40004c00 	.word	0x40004c00
 8005744:	40005000 	.word	0x40005000
 8005748:	40021000 	.word	0x40021000
 800574c:	080098e8 	.word	0x080098e8
 8005750:	007a1200 	.word	0x007a1200
 8005754:	00f42400 	.word	0x00f42400

08005758 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 8005758:	6883      	ldr	r3, [r0, #8]
{
 800575a:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 800575c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 8005760:	f04f 0400 	mov.w	r4, #0
  huart->pRxBuffPtr  = pData;
 8005764:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005766:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 800576a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 800576e:	6684      	str	r4, [r0, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 8005770:	d04b      	beq.n	800580a <UART_Start_Receive_IT+0xb2>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d03f      	beq.n	80057f6 <UART_Start_Receive_IT+0x9e>
 8005776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800577a:	d051      	beq.n	8005820 <UART_Start_Receive_IT+0xc8>
 800577c:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005780:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005782:	2322      	movs	r3, #34	; 0x22
 8005784:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005786:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800578a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	f102 0308 	add.w	r3, r2, #8
 8005792:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005796:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579a:	f102 0408 	add.w	r4, r2, #8
 800579e:	e844 3100 	strex	r1, r3, [r4]
 80057a2:	2900      	cmp	r1, #0
 80057a4:	d1f3      	bne.n	800578e <UART_Start_Receive_IT+0x36>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a6:	6883      	ldr	r3, [r0, #8]
 80057a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ac:	6903      	ldr	r3, [r0, #16]
 80057ae:	d00e      	beq.n	80057ce <UART_Start_Receive_IT+0x76>
    huart->RxISR = UART_RxISR_8BIT;
 80057b0:	491f      	ldr	r1, [pc, #124]	; (8005830 <UART_Start_Receive_IT+0xd8>)
 80057b2:	6681      	str	r1, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 80057b4:	b173      	cbz	r3, 80057d4 <UART_Start_Receive_IT+0x7c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b6:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80057ba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	e842 3100 	strex	r1, r3, [r2]
 80057c2:	2900      	cmp	r1, #0
 80057c4:	d1f7      	bne.n	80057b6 <UART_Start_Receive_IT+0x5e>
}
 80057c6:	2000      	movs	r0, #0
 80057c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057cc:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ce:	bb23      	cbnz	r3, 800581a <UART_Start_Receive_IT+0xc2>
 80057d0:	4b18      	ldr	r3, [pc, #96]	; (8005834 <UART_Start_Receive_IT+0xdc>)
 80057d2:	6683      	str	r3, [r0, #104]	; 0x68
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80057d8:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	e842 3100 	strex	r1, r3, [r2]
 80057e0:	2900      	cmp	r1, #0
 80057e2:	d0f0      	beq.n	80057c6 <UART_Start_Receive_IT+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	e852 3f00 	ldrex	r3, [r2]
 80057e8:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ec:	e842 3100 	strex	r1, r3, [r2]
 80057f0:	2900      	cmp	r1, #0
 80057f2:	d1ef      	bne.n	80057d4 <UART_Start_Receive_IT+0x7c>
 80057f4:	e7e7      	b.n	80057c6 <UART_Start_Receive_IT+0x6e>
  UART_MASK_COMPUTATION(huart);
 80057f6:	6903      	ldr	r3, [r0, #16]
 80057f8:	b91b      	cbnz	r3, 8005802 <UART_Start_Receive_IT+0xaa>
 80057fa:	23ff      	movs	r3, #255	; 0xff
 80057fc:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8005800:	e7be      	b.n	8005780 <UART_Start_Receive_IT+0x28>
 8005802:	237f      	movs	r3, #127	; 0x7f
 8005804:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8005808:	e7ba      	b.n	8005780 <UART_Start_Receive_IT+0x28>
 800580a:	6903      	ldr	r3, [r0, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1f4      	bne.n	80057fa <UART_Start_Receive_IT+0xa2>
 8005810:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005814:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8005818:	e7b2      	b.n	8005780 <UART_Start_Receive_IT+0x28>
    huart->RxISR = UART_RxISR_8BIT;
 800581a:	4b05      	ldr	r3, [pc, #20]	; (8005830 <UART_Start_Receive_IT+0xd8>)
 800581c:	6683      	str	r3, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 800581e:	e7ca      	b.n	80057b6 <UART_Start_Receive_IT+0x5e>
  UART_MASK_COMPUTATION(huart);
 8005820:	6903      	ldr	r3, [r0, #16]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0ed      	beq.n	8005802 <UART_Start_Receive_IT+0xaa>
 8005826:	233f      	movs	r3, #63	; 0x3f
 8005828:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800582c:	e7a8      	b.n	8005780 <UART_Start_Receive_IT+0x28>
 800582e:	bf00      	nop
 8005830:	08005161 	.word	0x08005161
 8005834:	08005121 	.word	0x08005121

08005838 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8005838:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800583c:	2b20      	cmp	r3, #32
 800583e:	d115      	bne.n	800586c <HAL_UART_Receive_IT+0x34>
    if ((pData == NULL) || (Size == 0U))
 8005840:	b101      	cbz	r1, 8005844 <HAL_UART_Receive_IT+0xc>
 8005842:	b90a      	cbnz	r2, 8005848 <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 8005844:	2001      	movs	r0, #1
}
 8005846:	4770      	bx	lr
{
 8005848:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584a:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800584c:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584e:	6603      	str	r3, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005850:	6863      	ldr	r3, [r4, #4]
 8005852:	021b      	lsls	r3, r3, #8
 8005854:	d507      	bpl.n	8005866 <HAL_UART_Receive_IT+0x2e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800585a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	e844 3500 	strex	r5, r3, [r4]
 8005862:	2d00      	cmp	r5, #0
 8005864:	d1f7      	bne.n	8005856 <HAL_UART_Receive_IT+0x1e>
}
 8005866:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8005868:	f7ff bf76 	b.w	8005758 <UART_Start_Receive_IT>
    return HAL_BUSY;
 800586c:	2002      	movs	r0, #2
 800586e:	4770      	bx	lr

08005870 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop

08005874 <__errno>:
 8005874:	4b01      	ldr	r3, [pc, #4]	; (800587c <__errno+0x8>)
 8005876:	6818      	ldr	r0, [r3, #0]
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	2000000c 	.word	0x2000000c

08005880 <__libc_init_array>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	4d0d      	ldr	r5, [pc, #52]	; (80058b8 <__libc_init_array+0x38>)
 8005884:	4c0d      	ldr	r4, [pc, #52]	; (80058bc <__libc_init_array+0x3c>)
 8005886:	1b64      	subs	r4, r4, r5
 8005888:	10a4      	asrs	r4, r4, #2
 800588a:	2600      	movs	r6, #0
 800588c:	42a6      	cmp	r6, r4
 800588e:	d109      	bne.n	80058a4 <__libc_init_array+0x24>
 8005890:	4d0b      	ldr	r5, [pc, #44]	; (80058c0 <__libc_init_array+0x40>)
 8005892:	4c0c      	ldr	r4, [pc, #48]	; (80058c4 <__libc_init_array+0x44>)
 8005894:	f003 ff72 	bl	800977c <_init>
 8005898:	1b64      	subs	r4, r4, r5
 800589a:	10a4      	asrs	r4, r4, #2
 800589c:	2600      	movs	r6, #0
 800589e:	42a6      	cmp	r6, r4
 80058a0:	d105      	bne.n	80058ae <__libc_init_array+0x2e>
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
 80058a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a8:	4798      	blx	r3
 80058aa:	3601      	adds	r6, #1
 80058ac:	e7ee      	b.n	800588c <__libc_init_array+0xc>
 80058ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b2:	4798      	blx	r3
 80058b4:	3601      	adds	r6, #1
 80058b6:	e7f2      	b.n	800589e <__libc_init_array+0x1e>
 80058b8:	08009d48 	.word	0x08009d48
 80058bc:	08009d48 	.word	0x08009d48
 80058c0:	08009d48 	.word	0x08009d48
 80058c4:	08009d4c 	.word	0x08009d4c

080058c8 <memcpy>:
 80058c8:	440a      	add	r2, r1
 80058ca:	4291      	cmp	r1, r2
 80058cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80058d0:	d100      	bne.n	80058d4 <memcpy+0xc>
 80058d2:	4770      	bx	lr
 80058d4:	b510      	push	{r4, lr}
 80058d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058de:	4291      	cmp	r1, r2
 80058e0:	d1f9      	bne.n	80058d6 <memcpy+0xe>
 80058e2:	bd10      	pop	{r4, pc}

080058e4 <memset>:
 80058e4:	4402      	add	r2, r0
 80058e6:	4603      	mov	r3, r0
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d100      	bne.n	80058ee <memset+0xa>
 80058ec:	4770      	bx	lr
 80058ee:	f803 1b01 	strb.w	r1, [r3], #1
 80058f2:	e7f9      	b.n	80058e8 <memset+0x4>

080058f4 <_scanf_float>:
 80058f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f8:	b087      	sub	sp, #28
 80058fa:	4617      	mov	r7, r2
 80058fc:	9303      	str	r3, [sp, #12]
 80058fe:	688b      	ldr	r3, [r1, #8]
 8005900:	1e5a      	subs	r2, r3, #1
 8005902:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005906:	bf83      	ittte	hi
 8005908:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800590c:	195b      	addhi	r3, r3, r5
 800590e:	9302      	strhi	r3, [sp, #8]
 8005910:	2300      	movls	r3, #0
 8005912:	bf86      	itte	hi
 8005914:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005918:	608b      	strhi	r3, [r1, #8]
 800591a:	9302      	strls	r3, [sp, #8]
 800591c:	680b      	ldr	r3, [r1, #0]
 800591e:	468b      	mov	fp, r1
 8005920:	2500      	movs	r5, #0
 8005922:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005926:	f84b 3b1c 	str.w	r3, [fp], #28
 800592a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800592e:	4680      	mov	r8, r0
 8005930:	460c      	mov	r4, r1
 8005932:	465e      	mov	r6, fp
 8005934:	46aa      	mov	sl, r5
 8005936:	46a9      	mov	r9, r5
 8005938:	9501      	str	r5, [sp, #4]
 800593a:	68a2      	ldr	r2, [r4, #8]
 800593c:	b152      	cbz	r2, 8005954 <_scanf_float+0x60>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b4e      	cmp	r3, #78	; 0x4e
 8005944:	d864      	bhi.n	8005a10 <_scanf_float+0x11c>
 8005946:	2b40      	cmp	r3, #64	; 0x40
 8005948:	d83c      	bhi.n	80059c4 <_scanf_float+0xd0>
 800594a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800594e:	b2c8      	uxtb	r0, r1
 8005950:	280e      	cmp	r0, #14
 8005952:	d93a      	bls.n	80059ca <_scanf_float+0xd6>
 8005954:	f1b9 0f00 	cmp.w	r9, #0
 8005958:	d003      	beq.n	8005962 <_scanf_float+0x6e>
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005960:	6023      	str	r3, [r4, #0]
 8005962:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005966:	f1ba 0f01 	cmp.w	sl, #1
 800596a:	f200 8113 	bhi.w	8005b94 <_scanf_float+0x2a0>
 800596e:	455e      	cmp	r6, fp
 8005970:	f200 8105 	bhi.w	8005b7e <_scanf_float+0x28a>
 8005974:	2501      	movs	r5, #1
 8005976:	4628      	mov	r0, r5
 8005978:	b007      	add	sp, #28
 800597a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005982:	2a0d      	cmp	r2, #13
 8005984:	d8e6      	bhi.n	8005954 <_scanf_float+0x60>
 8005986:	a101      	add	r1, pc, #4	; (adr r1, 800598c <_scanf_float+0x98>)
 8005988:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800598c:	08005acb 	.word	0x08005acb
 8005990:	08005955 	.word	0x08005955
 8005994:	08005955 	.word	0x08005955
 8005998:	08005955 	.word	0x08005955
 800599c:	08005b2b 	.word	0x08005b2b
 80059a0:	08005b03 	.word	0x08005b03
 80059a4:	08005955 	.word	0x08005955
 80059a8:	08005955 	.word	0x08005955
 80059ac:	08005ad9 	.word	0x08005ad9
 80059b0:	08005955 	.word	0x08005955
 80059b4:	08005955 	.word	0x08005955
 80059b8:	08005955 	.word	0x08005955
 80059bc:	08005955 	.word	0x08005955
 80059c0:	08005a91 	.word	0x08005a91
 80059c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80059c8:	e7db      	b.n	8005982 <_scanf_float+0x8e>
 80059ca:	290e      	cmp	r1, #14
 80059cc:	d8c2      	bhi.n	8005954 <_scanf_float+0x60>
 80059ce:	a001      	add	r0, pc, #4	; (adr r0, 80059d4 <_scanf_float+0xe0>)
 80059d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80059d4:	08005a83 	.word	0x08005a83
 80059d8:	08005955 	.word	0x08005955
 80059dc:	08005a83 	.word	0x08005a83
 80059e0:	08005b17 	.word	0x08005b17
 80059e4:	08005955 	.word	0x08005955
 80059e8:	08005a31 	.word	0x08005a31
 80059ec:	08005a6d 	.word	0x08005a6d
 80059f0:	08005a6d 	.word	0x08005a6d
 80059f4:	08005a6d 	.word	0x08005a6d
 80059f8:	08005a6d 	.word	0x08005a6d
 80059fc:	08005a6d 	.word	0x08005a6d
 8005a00:	08005a6d 	.word	0x08005a6d
 8005a04:	08005a6d 	.word	0x08005a6d
 8005a08:	08005a6d 	.word	0x08005a6d
 8005a0c:	08005a6d 	.word	0x08005a6d
 8005a10:	2b6e      	cmp	r3, #110	; 0x6e
 8005a12:	d809      	bhi.n	8005a28 <_scanf_float+0x134>
 8005a14:	2b60      	cmp	r3, #96	; 0x60
 8005a16:	d8b2      	bhi.n	800597e <_scanf_float+0x8a>
 8005a18:	2b54      	cmp	r3, #84	; 0x54
 8005a1a:	d077      	beq.n	8005b0c <_scanf_float+0x218>
 8005a1c:	2b59      	cmp	r3, #89	; 0x59
 8005a1e:	d199      	bne.n	8005954 <_scanf_float+0x60>
 8005a20:	2d07      	cmp	r5, #7
 8005a22:	d197      	bne.n	8005954 <_scanf_float+0x60>
 8005a24:	2508      	movs	r5, #8
 8005a26:	e029      	b.n	8005a7c <_scanf_float+0x188>
 8005a28:	2b74      	cmp	r3, #116	; 0x74
 8005a2a:	d06f      	beq.n	8005b0c <_scanf_float+0x218>
 8005a2c:	2b79      	cmp	r3, #121	; 0x79
 8005a2e:	e7f6      	b.n	8005a1e <_scanf_float+0x12a>
 8005a30:	6821      	ldr	r1, [r4, #0]
 8005a32:	05c8      	lsls	r0, r1, #23
 8005a34:	d51a      	bpl.n	8005a6c <_scanf_float+0x178>
 8005a36:	9b02      	ldr	r3, [sp, #8]
 8005a38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005a3c:	6021      	str	r1, [r4, #0]
 8005a3e:	f109 0901 	add.w	r9, r9, #1
 8005a42:	b11b      	cbz	r3, 8005a4c <_scanf_float+0x158>
 8005a44:	3b01      	subs	r3, #1
 8005a46:	3201      	adds	r2, #1
 8005a48:	9302      	str	r3, [sp, #8]
 8005a4a:	60a2      	str	r2, [r4, #8]
 8005a4c:	68a3      	ldr	r3, [r4, #8]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	60a3      	str	r3, [r4, #8]
 8005a52:	6923      	ldr	r3, [r4, #16]
 8005a54:	3301      	adds	r3, #1
 8005a56:	6123      	str	r3, [r4, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	607b      	str	r3, [r7, #4]
 8005a60:	f340 8084 	ble.w	8005b6c <_scanf_float+0x278>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	3301      	adds	r3, #1
 8005a68:	603b      	str	r3, [r7, #0]
 8005a6a:	e766      	b.n	800593a <_scanf_float+0x46>
 8005a6c:	eb1a 0f05 	cmn.w	sl, r5
 8005a70:	f47f af70 	bne.w	8005954 <_scanf_float+0x60>
 8005a74:	6822      	ldr	r2, [r4, #0]
 8005a76:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005a7a:	6022      	str	r2, [r4, #0]
 8005a7c:	f806 3b01 	strb.w	r3, [r6], #1
 8005a80:	e7e4      	b.n	8005a4c <_scanf_float+0x158>
 8005a82:	6822      	ldr	r2, [r4, #0]
 8005a84:	0610      	lsls	r0, r2, #24
 8005a86:	f57f af65 	bpl.w	8005954 <_scanf_float+0x60>
 8005a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a8e:	e7f4      	b.n	8005a7a <_scanf_float+0x186>
 8005a90:	f1ba 0f00 	cmp.w	sl, #0
 8005a94:	d10e      	bne.n	8005ab4 <_scanf_float+0x1c0>
 8005a96:	f1b9 0f00 	cmp.w	r9, #0
 8005a9a:	d10e      	bne.n	8005aba <_scanf_float+0x1c6>
 8005a9c:	6822      	ldr	r2, [r4, #0]
 8005a9e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005aa2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005aa6:	d108      	bne.n	8005aba <_scanf_float+0x1c6>
 8005aa8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005aac:	6022      	str	r2, [r4, #0]
 8005aae:	f04f 0a01 	mov.w	sl, #1
 8005ab2:	e7e3      	b.n	8005a7c <_scanf_float+0x188>
 8005ab4:	f1ba 0f02 	cmp.w	sl, #2
 8005ab8:	d055      	beq.n	8005b66 <_scanf_float+0x272>
 8005aba:	2d01      	cmp	r5, #1
 8005abc:	d002      	beq.n	8005ac4 <_scanf_float+0x1d0>
 8005abe:	2d04      	cmp	r5, #4
 8005ac0:	f47f af48 	bne.w	8005954 <_scanf_float+0x60>
 8005ac4:	3501      	adds	r5, #1
 8005ac6:	b2ed      	uxtb	r5, r5
 8005ac8:	e7d8      	b.n	8005a7c <_scanf_float+0x188>
 8005aca:	f1ba 0f01 	cmp.w	sl, #1
 8005ace:	f47f af41 	bne.w	8005954 <_scanf_float+0x60>
 8005ad2:	f04f 0a02 	mov.w	sl, #2
 8005ad6:	e7d1      	b.n	8005a7c <_scanf_float+0x188>
 8005ad8:	b97d      	cbnz	r5, 8005afa <_scanf_float+0x206>
 8005ada:	f1b9 0f00 	cmp.w	r9, #0
 8005ade:	f47f af3c 	bne.w	800595a <_scanf_float+0x66>
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ae8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005aec:	f47f af39 	bne.w	8005962 <_scanf_float+0x6e>
 8005af0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005af4:	6022      	str	r2, [r4, #0]
 8005af6:	2501      	movs	r5, #1
 8005af8:	e7c0      	b.n	8005a7c <_scanf_float+0x188>
 8005afa:	2d03      	cmp	r5, #3
 8005afc:	d0e2      	beq.n	8005ac4 <_scanf_float+0x1d0>
 8005afe:	2d05      	cmp	r5, #5
 8005b00:	e7de      	b.n	8005ac0 <_scanf_float+0x1cc>
 8005b02:	2d02      	cmp	r5, #2
 8005b04:	f47f af26 	bne.w	8005954 <_scanf_float+0x60>
 8005b08:	2503      	movs	r5, #3
 8005b0a:	e7b7      	b.n	8005a7c <_scanf_float+0x188>
 8005b0c:	2d06      	cmp	r5, #6
 8005b0e:	f47f af21 	bne.w	8005954 <_scanf_float+0x60>
 8005b12:	2507      	movs	r5, #7
 8005b14:	e7b2      	b.n	8005a7c <_scanf_float+0x188>
 8005b16:	6822      	ldr	r2, [r4, #0]
 8005b18:	0591      	lsls	r1, r2, #22
 8005b1a:	f57f af1b 	bpl.w	8005954 <_scanf_float+0x60>
 8005b1e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005b22:	6022      	str	r2, [r4, #0]
 8005b24:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b28:	e7a8      	b.n	8005a7c <_scanf_float+0x188>
 8005b2a:	6822      	ldr	r2, [r4, #0]
 8005b2c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005b30:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005b34:	d006      	beq.n	8005b44 <_scanf_float+0x250>
 8005b36:	0550      	lsls	r0, r2, #21
 8005b38:	f57f af0c 	bpl.w	8005954 <_scanf_float+0x60>
 8005b3c:	f1b9 0f00 	cmp.w	r9, #0
 8005b40:	f43f af0f 	beq.w	8005962 <_scanf_float+0x6e>
 8005b44:	0591      	lsls	r1, r2, #22
 8005b46:	bf58      	it	pl
 8005b48:	9901      	ldrpl	r1, [sp, #4]
 8005b4a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b4e:	bf58      	it	pl
 8005b50:	eba9 0101 	subpl.w	r1, r9, r1
 8005b54:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005b58:	bf58      	it	pl
 8005b5a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005b5e:	6022      	str	r2, [r4, #0]
 8005b60:	f04f 0900 	mov.w	r9, #0
 8005b64:	e78a      	b.n	8005a7c <_scanf_float+0x188>
 8005b66:	f04f 0a03 	mov.w	sl, #3
 8005b6a:	e787      	b.n	8005a7c <_scanf_float+0x188>
 8005b6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005b70:	4639      	mov	r1, r7
 8005b72:	4640      	mov	r0, r8
 8005b74:	4798      	blx	r3
 8005b76:	2800      	cmp	r0, #0
 8005b78:	f43f aedf 	beq.w	800593a <_scanf_float+0x46>
 8005b7c:	e6ea      	b.n	8005954 <_scanf_float+0x60>
 8005b7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b86:	463a      	mov	r2, r7
 8005b88:	4640      	mov	r0, r8
 8005b8a:	4798      	blx	r3
 8005b8c:	6923      	ldr	r3, [r4, #16]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	6123      	str	r3, [r4, #16]
 8005b92:	e6ec      	b.n	800596e <_scanf_float+0x7a>
 8005b94:	1e6b      	subs	r3, r5, #1
 8005b96:	2b06      	cmp	r3, #6
 8005b98:	d825      	bhi.n	8005be6 <_scanf_float+0x2f2>
 8005b9a:	2d02      	cmp	r5, #2
 8005b9c:	d836      	bhi.n	8005c0c <_scanf_float+0x318>
 8005b9e:	455e      	cmp	r6, fp
 8005ba0:	f67f aee8 	bls.w	8005974 <_scanf_float+0x80>
 8005ba4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ba8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bac:	463a      	mov	r2, r7
 8005bae:	4640      	mov	r0, r8
 8005bb0:	4798      	blx	r3
 8005bb2:	6923      	ldr	r3, [r4, #16]
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	6123      	str	r3, [r4, #16]
 8005bb8:	e7f1      	b.n	8005b9e <_scanf_float+0x2aa>
 8005bba:	9802      	ldr	r0, [sp, #8]
 8005bbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bc0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005bc4:	9002      	str	r0, [sp, #8]
 8005bc6:	463a      	mov	r2, r7
 8005bc8:	4640      	mov	r0, r8
 8005bca:	4798      	blx	r3
 8005bcc:	6923      	ldr	r3, [r4, #16]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	6123      	str	r3, [r4, #16]
 8005bd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bd6:	fa5f fa8a 	uxtb.w	sl, sl
 8005bda:	f1ba 0f02 	cmp.w	sl, #2
 8005bde:	d1ec      	bne.n	8005bba <_scanf_float+0x2c6>
 8005be0:	3d03      	subs	r5, #3
 8005be2:	b2ed      	uxtb	r5, r5
 8005be4:	1b76      	subs	r6, r6, r5
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	05da      	lsls	r2, r3, #23
 8005bea:	d52f      	bpl.n	8005c4c <_scanf_float+0x358>
 8005bec:	055b      	lsls	r3, r3, #21
 8005bee:	d510      	bpl.n	8005c12 <_scanf_float+0x31e>
 8005bf0:	455e      	cmp	r6, fp
 8005bf2:	f67f aebf 	bls.w	8005974 <_scanf_float+0x80>
 8005bf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bfe:	463a      	mov	r2, r7
 8005c00:	4640      	mov	r0, r8
 8005c02:	4798      	blx	r3
 8005c04:	6923      	ldr	r3, [r4, #16]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	6123      	str	r3, [r4, #16]
 8005c0a:	e7f1      	b.n	8005bf0 <_scanf_float+0x2fc>
 8005c0c:	46aa      	mov	sl, r5
 8005c0e:	9602      	str	r6, [sp, #8]
 8005c10:	e7df      	b.n	8005bd2 <_scanf_float+0x2de>
 8005c12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005c16:	6923      	ldr	r3, [r4, #16]
 8005c18:	2965      	cmp	r1, #101	; 0x65
 8005c1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c1e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005c22:	6123      	str	r3, [r4, #16]
 8005c24:	d00c      	beq.n	8005c40 <_scanf_float+0x34c>
 8005c26:	2945      	cmp	r1, #69	; 0x45
 8005c28:	d00a      	beq.n	8005c40 <_scanf_float+0x34c>
 8005c2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c2e:	463a      	mov	r2, r7
 8005c30:	4640      	mov	r0, r8
 8005c32:	4798      	blx	r3
 8005c34:	6923      	ldr	r3, [r4, #16]
 8005c36:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	1eb5      	subs	r5, r6, #2
 8005c3e:	6123      	str	r3, [r4, #16]
 8005c40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c44:	463a      	mov	r2, r7
 8005c46:	4640      	mov	r0, r8
 8005c48:	4798      	blx	r3
 8005c4a:	462e      	mov	r6, r5
 8005c4c:	6825      	ldr	r5, [r4, #0]
 8005c4e:	f015 0510 	ands.w	r5, r5, #16
 8005c52:	d159      	bne.n	8005d08 <_scanf_float+0x414>
 8005c54:	7035      	strb	r5, [r6, #0]
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c60:	d11b      	bne.n	8005c9a <_scanf_float+0x3a6>
 8005c62:	9b01      	ldr	r3, [sp, #4]
 8005c64:	454b      	cmp	r3, r9
 8005c66:	eba3 0209 	sub.w	r2, r3, r9
 8005c6a:	d123      	bne.n	8005cb4 <_scanf_float+0x3c0>
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4659      	mov	r1, fp
 8005c70:	4640      	mov	r0, r8
 8005c72:	f000 ff1f 	bl	8006ab4 <_strtod_r>
 8005c76:	6822      	ldr	r2, [r4, #0]
 8005c78:	9b03      	ldr	r3, [sp, #12]
 8005c7a:	f012 0f02 	tst.w	r2, #2
 8005c7e:	ec57 6b10 	vmov	r6, r7, d0
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	d021      	beq.n	8005cca <_scanf_float+0x3d6>
 8005c86:	9903      	ldr	r1, [sp, #12]
 8005c88:	1d1a      	adds	r2, r3, #4
 8005c8a:	600a      	str	r2, [r1, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	e9c3 6700 	strd	r6, r7, [r3]
 8005c92:	68e3      	ldr	r3, [r4, #12]
 8005c94:	3301      	adds	r3, #1
 8005c96:	60e3      	str	r3, [r4, #12]
 8005c98:	e66d      	b.n	8005976 <_scanf_float+0x82>
 8005c9a:	9b04      	ldr	r3, [sp, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0e5      	beq.n	8005c6c <_scanf_float+0x378>
 8005ca0:	9905      	ldr	r1, [sp, #20]
 8005ca2:	230a      	movs	r3, #10
 8005ca4:	462a      	mov	r2, r5
 8005ca6:	3101      	adds	r1, #1
 8005ca8:	4640      	mov	r0, r8
 8005caa:	f000 ff8b 	bl	8006bc4 <_strtol_r>
 8005cae:	9b04      	ldr	r3, [sp, #16]
 8005cb0:	9e05      	ldr	r6, [sp, #20]
 8005cb2:	1ac2      	subs	r2, r0, r3
 8005cb4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005cb8:	429e      	cmp	r6, r3
 8005cba:	bf28      	it	cs
 8005cbc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005cc0:	4912      	ldr	r1, [pc, #72]	; (8005d0c <_scanf_float+0x418>)
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f000 f82c 	bl	8005d20 <siprintf>
 8005cc8:	e7d0      	b.n	8005c6c <_scanf_float+0x378>
 8005cca:	9903      	ldr	r1, [sp, #12]
 8005ccc:	f012 0f04 	tst.w	r2, #4
 8005cd0:	f103 0204 	add.w	r2, r3, #4
 8005cd4:	600a      	str	r2, [r1, #0]
 8005cd6:	d1d9      	bne.n	8005c8c <_scanf_float+0x398>
 8005cd8:	f8d3 8000 	ldr.w	r8, [r3]
 8005cdc:	ee10 2a10 	vmov	r2, s0
 8005ce0:	ee10 0a10 	vmov	r0, s0
 8005ce4:	463b      	mov	r3, r7
 8005ce6:	4639      	mov	r1, r7
 8005ce8:	f7fa ff28 	bl	8000b3c <__aeabi_dcmpun>
 8005cec:	b128      	cbz	r0, 8005cfa <_scanf_float+0x406>
 8005cee:	4808      	ldr	r0, [pc, #32]	; (8005d10 <_scanf_float+0x41c>)
 8005cf0:	f000 f810 	bl	8005d14 <nanf>
 8005cf4:	ed88 0a00 	vstr	s0, [r8]
 8005cf8:	e7cb      	b.n	8005c92 <_scanf_float+0x39e>
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	4639      	mov	r1, r7
 8005cfe:	f7fa ff7b 	bl	8000bf8 <__aeabi_d2f>
 8005d02:	f8c8 0000 	str.w	r0, [r8]
 8005d06:	e7c4      	b.n	8005c92 <_scanf_float+0x39e>
 8005d08:	2500      	movs	r5, #0
 8005d0a:	e634      	b.n	8005976 <_scanf_float+0x82>
 8005d0c:	080098f0 	.word	0x080098f0
 8005d10:	08009cdd 	.word	0x08009cdd

08005d14 <nanf>:
 8005d14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005d1c <nanf+0x8>
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	7fc00000 	.word	0x7fc00000

08005d20 <siprintf>:
 8005d20:	b40e      	push	{r1, r2, r3}
 8005d22:	b500      	push	{lr}
 8005d24:	b09c      	sub	sp, #112	; 0x70
 8005d26:	ab1d      	add	r3, sp, #116	; 0x74
 8005d28:	9002      	str	r0, [sp, #8]
 8005d2a:	9006      	str	r0, [sp, #24]
 8005d2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d30:	4809      	ldr	r0, [pc, #36]	; (8005d58 <siprintf+0x38>)
 8005d32:	9107      	str	r1, [sp, #28]
 8005d34:	9104      	str	r1, [sp, #16]
 8005d36:	4909      	ldr	r1, [pc, #36]	; (8005d5c <siprintf+0x3c>)
 8005d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d3c:	9105      	str	r1, [sp, #20]
 8005d3e:	6800      	ldr	r0, [r0, #0]
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	a902      	add	r1, sp, #8
 8005d44:	f002 f8be 	bl	8007ec4 <_svfiprintf_r>
 8005d48:	9b02      	ldr	r3, [sp, #8]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	b01c      	add	sp, #112	; 0x70
 8005d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d54:	b003      	add	sp, #12
 8005d56:	4770      	bx	lr
 8005d58:	2000000c 	.word	0x2000000c
 8005d5c:	ffff0208 	.word	0xffff0208

08005d60 <siscanf>:
 8005d60:	b40e      	push	{r1, r2, r3}
 8005d62:	b510      	push	{r4, lr}
 8005d64:	b09f      	sub	sp, #124	; 0x7c
 8005d66:	ac21      	add	r4, sp, #132	; 0x84
 8005d68:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005d6c:	f854 2b04 	ldr.w	r2, [r4], #4
 8005d70:	9201      	str	r2, [sp, #4]
 8005d72:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005d76:	9004      	str	r0, [sp, #16]
 8005d78:	9008      	str	r0, [sp, #32]
 8005d7a:	f7fa fa31 	bl	80001e0 <strlen>
 8005d7e:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <siscanf+0x50>)
 8005d80:	9005      	str	r0, [sp, #20]
 8005d82:	9009      	str	r0, [sp, #36]	; 0x24
 8005d84:	930d      	str	r3, [sp, #52]	; 0x34
 8005d86:	480b      	ldr	r0, [pc, #44]	; (8005db4 <siscanf+0x54>)
 8005d88:	9a01      	ldr	r2, [sp, #4]
 8005d8a:	6800      	ldr	r0, [r0, #0]
 8005d8c:	9403      	str	r4, [sp, #12]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	9311      	str	r3, [sp, #68]	; 0x44
 8005d92:	9316      	str	r3, [sp, #88]	; 0x58
 8005d94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d98:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005d9c:	a904      	add	r1, sp, #16
 8005d9e:	4623      	mov	r3, r4
 8005da0:	f002 f9ea 	bl	8008178 <__ssvfiscanf_r>
 8005da4:	b01f      	add	sp, #124	; 0x7c
 8005da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005daa:	b003      	add	sp, #12
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	08005ddb 	.word	0x08005ddb
 8005db4:	2000000c 	.word	0x2000000c

08005db8 <__sread>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	460c      	mov	r4, r1
 8005dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc0:	f002 fe38 	bl	8008a34 <_read_r>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	bfab      	itete	ge
 8005dc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005dca:	89a3      	ldrhlt	r3, [r4, #12]
 8005dcc:	181b      	addge	r3, r3, r0
 8005dce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dd2:	bfac      	ite	ge
 8005dd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dd6:	81a3      	strhlt	r3, [r4, #12]
 8005dd8:	bd10      	pop	{r4, pc}

08005dda <__seofread>:
 8005dda:	2000      	movs	r0, #0
 8005ddc:	4770      	bx	lr

08005dde <__swrite>:
 8005dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005de2:	461f      	mov	r7, r3
 8005de4:	898b      	ldrh	r3, [r1, #12]
 8005de6:	05db      	lsls	r3, r3, #23
 8005de8:	4605      	mov	r5, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	4616      	mov	r6, r2
 8005dee:	d505      	bpl.n	8005dfc <__swrite+0x1e>
 8005df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005df4:	2302      	movs	r3, #2
 8005df6:	2200      	movs	r2, #0
 8005df8:	f001 fa78 	bl	80072ec <_lseek_r>
 8005dfc:	89a3      	ldrh	r3, [r4, #12]
 8005dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e06:	81a3      	strh	r3, [r4, #12]
 8005e08:	4632      	mov	r2, r6
 8005e0a:	463b      	mov	r3, r7
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e12:	f000 bed9 	b.w	8006bc8 <_write_r>

08005e16 <__sseek>:
 8005e16:	b510      	push	{r4, lr}
 8005e18:	460c      	mov	r4, r1
 8005e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e1e:	f001 fa65 	bl	80072ec <_lseek_r>
 8005e22:	1c43      	adds	r3, r0, #1
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	bf15      	itete	ne
 8005e28:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e32:	81a3      	strheq	r3, [r4, #12]
 8005e34:	bf18      	it	ne
 8005e36:	81a3      	strhne	r3, [r4, #12]
 8005e38:	bd10      	pop	{r4, pc}

08005e3a <__sclose>:
 8005e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e3e:	f000 bed5 	b.w	8006bec <_close_r>

08005e42 <strncmp>:
 8005e42:	b510      	push	{r4, lr}
 8005e44:	b17a      	cbz	r2, 8005e66 <strncmp+0x24>
 8005e46:	4603      	mov	r3, r0
 8005e48:	3901      	subs	r1, #1
 8005e4a:	1884      	adds	r4, r0, r2
 8005e4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005e50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005e54:	4290      	cmp	r0, r2
 8005e56:	d101      	bne.n	8005e5c <strncmp+0x1a>
 8005e58:	42a3      	cmp	r3, r4
 8005e5a:	d101      	bne.n	8005e60 <strncmp+0x1e>
 8005e5c:	1a80      	subs	r0, r0, r2
 8005e5e:	bd10      	pop	{r4, pc}
 8005e60:	2800      	cmp	r0, #0
 8005e62:	d1f3      	bne.n	8005e4c <strncmp+0xa>
 8005e64:	e7fa      	b.n	8005e5c <strncmp+0x1a>
 8005e66:	4610      	mov	r0, r2
 8005e68:	e7f9      	b.n	8005e5e <strncmp+0x1c>

08005e6a <sulp>:
 8005e6a:	b570      	push	{r4, r5, r6, lr}
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	460d      	mov	r5, r1
 8005e70:	ec45 4b10 	vmov	d0, r4, r5
 8005e74:	4616      	mov	r6, r2
 8005e76:	f001 fdcf 	bl	8007a18 <__ulp>
 8005e7a:	ec51 0b10 	vmov	r0, r1, d0
 8005e7e:	b17e      	cbz	r6, 8005ea0 <sulp+0x36>
 8005e80:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005e84:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	dd09      	ble.n	8005ea0 <sulp+0x36>
 8005e8c:	051b      	lsls	r3, r3, #20
 8005e8e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005e92:	2400      	movs	r4, #0
 8005e94:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005e98:	4622      	mov	r2, r4
 8005e9a:	462b      	mov	r3, r5
 8005e9c:	f7fa fbb4 	bl	8000608 <__aeabi_dmul>
 8005ea0:	bd70      	pop	{r4, r5, r6, pc}
 8005ea2:	0000      	movs	r0, r0
 8005ea4:	0000      	movs	r0, r0
	...

08005ea8 <_strtod_l>:
 8005ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eac:	ed2d 8b02 	vpush	{d8}
 8005eb0:	b09d      	sub	sp, #116	; 0x74
 8005eb2:	461f      	mov	r7, r3
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	9318      	str	r3, [sp, #96]	; 0x60
 8005eb8:	4ba2      	ldr	r3, [pc, #648]	; (8006144 <_strtod_l+0x29c>)
 8005eba:	9213      	str	r2, [sp, #76]	; 0x4c
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	9305      	str	r3, [sp, #20]
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	4688      	mov	r8, r1
 8005ec6:	f7fa f98b 	bl	80001e0 <strlen>
 8005eca:	f04f 0a00 	mov.w	sl, #0
 8005ece:	4605      	mov	r5, r0
 8005ed0:	f04f 0b00 	mov.w	fp, #0
 8005ed4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005ed8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005eda:	781a      	ldrb	r2, [r3, #0]
 8005edc:	2a2b      	cmp	r2, #43	; 0x2b
 8005ede:	d04e      	beq.n	8005f7e <_strtod_l+0xd6>
 8005ee0:	d83b      	bhi.n	8005f5a <_strtod_l+0xb2>
 8005ee2:	2a0d      	cmp	r2, #13
 8005ee4:	d834      	bhi.n	8005f50 <_strtod_l+0xa8>
 8005ee6:	2a08      	cmp	r2, #8
 8005ee8:	d834      	bhi.n	8005f54 <_strtod_l+0xac>
 8005eea:	2a00      	cmp	r2, #0
 8005eec:	d03e      	beq.n	8005f6c <_strtod_l+0xc4>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	930a      	str	r3, [sp, #40]	; 0x28
 8005ef2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005ef4:	7833      	ldrb	r3, [r6, #0]
 8005ef6:	2b30      	cmp	r3, #48	; 0x30
 8005ef8:	f040 80b0 	bne.w	800605c <_strtod_l+0x1b4>
 8005efc:	7873      	ldrb	r3, [r6, #1]
 8005efe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005f02:	2b58      	cmp	r3, #88	; 0x58
 8005f04:	d168      	bne.n	8005fd8 <_strtod_l+0x130>
 8005f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f08:	9301      	str	r3, [sp, #4]
 8005f0a:	ab18      	add	r3, sp, #96	; 0x60
 8005f0c:	9702      	str	r7, [sp, #8]
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	4a8d      	ldr	r2, [pc, #564]	; (8006148 <_strtod_l+0x2a0>)
 8005f12:	ab19      	add	r3, sp, #100	; 0x64
 8005f14:	a917      	add	r1, sp, #92	; 0x5c
 8005f16:	4620      	mov	r0, r4
 8005f18:	f000 fee0 	bl	8006cdc <__gethex>
 8005f1c:	f010 0707 	ands.w	r7, r0, #7
 8005f20:	4605      	mov	r5, r0
 8005f22:	d005      	beq.n	8005f30 <_strtod_l+0x88>
 8005f24:	2f06      	cmp	r7, #6
 8005f26:	d12c      	bne.n	8005f82 <_strtod_l+0xda>
 8005f28:	3601      	adds	r6, #1
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	9617      	str	r6, [sp, #92]	; 0x5c
 8005f2e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f040 8590 	bne.w	8006a58 <_strtod_l+0xbb0>
 8005f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f3a:	b1eb      	cbz	r3, 8005f78 <_strtod_l+0xd0>
 8005f3c:	4652      	mov	r2, sl
 8005f3e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005f42:	ec43 2b10 	vmov	d0, r2, r3
 8005f46:	b01d      	add	sp, #116	; 0x74
 8005f48:	ecbd 8b02 	vpop	{d8}
 8005f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f50:	2a20      	cmp	r2, #32
 8005f52:	d1cc      	bne.n	8005eee <_strtod_l+0x46>
 8005f54:	3301      	adds	r3, #1
 8005f56:	9317      	str	r3, [sp, #92]	; 0x5c
 8005f58:	e7be      	b.n	8005ed8 <_strtod_l+0x30>
 8005f5a:	2a2d      	cmp	r2, #45	; 0x2d
 8005f5c:	d1c7      	bne.n	8005eee <_strtod_l+0x46>
 8005f5e:	2201      	movs	r2, #1
 8005f60:	920a      	str	r2, [sp, #40]	; 0x28
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f66:	785b      	ldrb	r3, [r3, #1]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1c2      	bne.n	8005ef2 <_strtod_l+0x4a>
 8005f6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f6e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f040 856e 	bne.w	8006a54 <_strtod_l+0xbac>
 8005f78:	4652      	mov	r2, sl
 8005f7a:	465b      	mov	r3, fp
 8005f7c:	e7e1      	b.n	8005f42 <_strtod_l+0x9a>
 8005f7e:	2200      	movs	r2, #0
 8005f80:	e7ee      	b.n	8005f60 <_strtod_l+0xb8>
 8005f82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005f84:	b13a      	cbz	r2, 8005f96 <_strtod_l+0xee>
 8005f86:	2135      	movs	r1, #53	; 0x35
 8005f88:	a81a      	add	r0, sp, #104	; 0x68
 8005f8a:	f001 fe50 	bl	8007c2e <__copybits>
 8005f8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f90:	4620      	mov	r0, r4
 8005f92:	f001 fa0f 	bl	80073b4 <_Bfree>
 8005f96:	3f01      	subs	r7, #1
 8005f98:	2f04      	cmp	r7, #4
 8005f9a:	d806      	bhi.n	8005faa <_strtod_l+0x102>
 8005f9c:	e8df f007 	tbb	[pc, r7]
 8005fa0:	1714030a 	.word	0x1714030a
 8005fa4:	0a          	.byte	0x0a
 8005fa5:	00          	.byte	0x00
 8005fa6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005faa:	0728      	lsls	r0, r5, #28
 8005fac:	d5c0      	bpl.n	8005f30 <_strtod_l+0x88>
 8005fae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005fb2:	e7bd      	b.n	8005f30 <_strtod_l+0x88>
 8005fb4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005fb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005fba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005fbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005fc2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005fc6:	e7f0      	b.n	8005faa <_strtod_l+0x102>
 8005fc8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800614c <_strtod_l+0x2a4>
 8005fcc:	e7ed      	b.n	8005faa <_strtod_l+0x102>
 8005fce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005fd2:	f04f 3aff 	mov.w	sl, #4294967295
 8005fd6:	e7e8      	b.n	8005faa <_strtod_l+0x102>
 8005fd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	9217      	str	r2, [sp, #92]	; 0x5c
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	2b30      	cmp	r3, #48	; 0x30
 8005fe2:	d0f9      	beq.n	8005fd8 <_strtod_l+0x130>
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d0a3      	beq.n	8005f30 <_strtod_l+0x88>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f04f 0900 	mov.w	r9, #0
 8005fee:	9304      	str	r3, [sp, #16]
 8005ff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ff2:	9308      	str	r3, [sp, #32]
 8005ff4:	f8cd 901c 	str.w	r9, [sp, #28]
 8005ff8:	464f      	mov	r7, r9
 8005ffa:	220a      	movs	r2, #10
 8005ffc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005ffe:	7806      	ldrb	r6, [r0, #0]
 8006000:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006004:	b2d9      	uxtb	r1, r3
 8006006:	2909      	cmp	r1, #9
 8006008:	d92a      	bls.n	8006060 <_strtod_l+0x1b8>
 800600a:	9905      	ldr	r1, [sp, #20]
 800600c:	462a      	mov	r2, r5
 800600e:	f7ff ff18 	bl	8005e42 <strncmp>
 8006012:	b398      	cbz	r0, 800607c <_strtod_l+0x1d4>
 8006014:	2000      	movs	r0, #0
 8006016:	4632      	mov	r2, r6
 8006018:	463d      	mov	r5, r7
 800601a:	9005      	str	r0, [sp, #20]
 800601c:	4603      	mov	r3, r0
 800601e:	2a65      	cmp	r2, #101	; 0x65
 8006020:	d001      	beq.n	8006026 <_strtod_l+0x17e>
 8006022:	2a45      	cmp	r2, #69	; 0x45
 8006024:	d118      	bne.n	8006058 <_strtod_l+0x1b0>
 8006026:	b91d      	cbnz	r5, 8006030 <_strtod_l+0x188>
 8006028:	9a04      	ldr	r2, [sp, #16]
 800602a:	4302      	orrs	r2, r0
 800602c:	d09e      	beq.n	8005f6c <_strtod_l+0xc4>
 800602e:	2500      	movs	r5, #0
 8006030:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006034:	f108 0201 	add.w	r2, r8, #1
 8006038:	9217      	str	r2, [sp, #92]	; 0x5c
 800603a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800603e:	2a2b      	cmp	r2, #43	; 0x2b
 8006040:	d075      	beq.n	800612e <_strtod_l+0x286>
 8006042:	2a2d      	cmp	r2, #45	; 0x2d
 8006044:	d07b      	beq.n	800613e <_strtod_l+0x296>
 8006046:	f04f 0c00 	mov.w	ip, #0
 800604a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800604e:	2909      	cmp	r1, #9
 8006050:	f240 8082 	bls.w	8006158 <_strtod_l+0x2b0>
 8006054:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006058:	2600      	movs	r6, #0
 800605a:	e09d      	b.n	8006198 <_strtod_l+0x2f0>
 800605c:	2300      	movs	r3, #0
 800605e:	e7c4      	b.n	8005fea <_strtod_l+0x142>
 8006060:	2f08      	cmp	r7, #8
 8006062:	bfd8      	it	le
 8006064:	9907      	ldrle	r1, [sp, #28]
 8006066:	f100 0001 	add.w	r0, r0, #1
 800606a:	bfda      	itte	le
 800606c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006070:	9307      	strle	r3, [sp, #28]
 8006072:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006076:	3701      	adds	r7, #1
 8006078:	9017      	str	r0, [sp, #92]	; 0x5c
 800607a:	e7bf      	b.n	8005ffc <_strtod_l+0x154>
 800607c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800607e:	195a      	adds	r2, r3, r5
 8006080:	9217      	str	r2, [sp, #92]	; 0x5c
 8006082:	5d5a      	ldrb	r2, [r3, r5]
 8006084:	2f00      	cmp	r7, #0
 8006086:	d037      	beq.n	80060f8 <_strtod_l+0x250>
 8006088:	9005      	str	r0, [sp, #20]
 800608a:	463d      	mov	r5, r7
 800608c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006090:	2b09      	cmp	r3, #9
 8006092:	d912      	bls.n	80060ba <_strtod_l+0x212>
 8006094:	2301      	movs	r3, #1
 8006096:	e7c2      	b.n	800601e <_strtod_l+0x176>
 8006098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	9217      	str	r2, [sp, #92]	; 0x5c
 800609e:	785a      	ldrb	r2, [r3, #1]
 80060a0:	3001      	adds	r0, #1
 80060a2:	2a30      	cmp	r2, #48	; 0x30
 80060a4:	d0f8      	beq.n	8006098 <_strtod_l+0x1f0>
 80060a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80060aa:	2b08      	cmp	r3, #8
 80060ac:	f200 84d9 	bhi.w	8006a62 <_strtod_l+0xbba>
 80060b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060b2:	9005      	str	r0, [sp, #20]
 80060b4:	2000      	movs	r0, #0
 80060b6:	9308      	str	r3, [sp, #32]
 80060b8:	4605      	mov	r5, r0
 80060ba:	3a30      	subs	r2, #48	; 0x30
 80060bc:	f100 0301 	add.w	r3, r0, #1
 80060c0:	d014      	beq.n	80060ec <_strtod_l+0x244>
 80060c2:	9905      	ldr	r1, [sp, #20]
 80060c4:	4419      	add	r1, r3
 80060c6:	9105      	str	r1, [sp, #20]
 80060c8:	462b      	mov	r3, r5
 80060ca:	eb00 0e05 	add.w	lr, r0, r5
 80060ce:	210a      	movs	r1, #10
 80060d0:	4573      	cmp	r3, lr
 80060d2:	d113      	bne.n	80060fc <_strtod_l+0x254>
 80060d4:	182b      	adds	r3, r5, r0
 80060d6:	2b08      	cmp	r3, #8
 80060d8:	f105 0501 	add.w	r5, r5, #1
 80060dc:	4405      	add	r5, r0
 80060de:	dc1c      	bgt.n	800611a <_strtod_l+0x272>
 80060e0:	9907      	ldr	r1, [sp, #28]
 80060e2:	230a      	movs	r3, #10
 80060e4:	fb03 2301 	mla	r3, r3, r1, r2
 80060e8:	9307      	str	r3, [sp, #28]
 80060ea:	2300      	movs	r3, #0
 80060ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80060ee:	1c51      	adds	r1, r2, #1
 80060f0:	9117      	str	r1, [sp, #92]	; 0x5c
 80060f2:	7852      	ldrb	r2, [r2, #1]
 80060f4:	4618      	mov	r0, r3
 80060f6:	e7c9      	b.n	800608c <_strtod_l+0x1e4>
 80060f8:	4638      	mov	r0, r7
 80060fa:	e7d2      	b.n	80060a2 <_strtod_l+0x1fa>
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	dc04      	bgt.n	800610a <_strtod_l+0x262>
 8006100:	9e07      	ldr	r6, [sp, #28]
 8006102:	434e      	muls	r6, r1
 8006104:	9607      	str	r6, [sp, #28]
 8006106:	3301      	adds	r3, #1
 8006108:	e7e2      	b.n	80060d0 <_strtod_l+0x228>
 800610a:	f103 0c01 	add.w	ip, r3, #1
 800610e:	f1bc 0f10 	cmp.w	ip, #16
 8006112:	bfd8      	it	le
 8006114:	fb01 f909 	mulle.w	r9, r1, r9
 8006118:	e7f5      	b.n	8006106 <_strtod_l+0x25e>
 800611a:	2d10      	cmp	r5, #16
 800611c:	bfdc      	itt	le
 800611e:	230a      	movle	r3, #10
 8006120:	fb03 2909 	mlale	r9, r3, r9, r2
 8006124:	e7e1      	b.n	80060ea <_strtod_l+0x242>
 8006126:	2300      	movs	r3, #0
 8006128:	9305      	str	r3, [sp, #20]
 800612a:	2301      	movs	r3, #1
 800612c:	e77c      	b.n	8006028 <_strtod_l+0x180>
 800612e:	f04f 0c00 	mov.w	ip, #0
 8006132:	f108 0202 	add.w	r2, r8, #2
 8006136:	9217      	str	r2, [sp, #92]	; 0x5c
 8006138:	f898 2002 	ldrb.w	r2, [r8, #2]
 800613c:	e785      	b.n	800604a <_strtod_l+0x1a2>
 800613e:	f04f 0c01 	mov.w	ip, #1
 8006142:	e7f6      	b.n	8006132 <_strtod_l+0x28a>
 8006144:	08009ad0 	.word	0x08009ad0
 8006148:	08009904 	.word	0x08009904
 800614c:	7ff00000 	.word	0x7ff00000
 8006150:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006152:	1c51      	adds	r1, r2, #1
 8006154:	9117      	str	r1, [sp, #92]	; 0x5c
 8006156:	7852      	ldrb	r2, [r2, #1]
 8006158:	2a30      	cmp	r2, #48	; 0x30
 800615a:	d0f9      	beq.n	8006150 <_strtod_l+0x2a8>
 800615c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006160:	2908      	cmp	r1, #8
 8006162:	f63f af79 	bhi.w	8006058 <_strtod_l+0x1b0>
 8006166:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800616a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800616c:	9206      	str	r2, [sp, #24]
 800616e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006170:	1c51      	adds	r1, r2, #1
 8006172:	9117      	str	r1, [sp, #92]	; 0x5c
 8006174:	7852      	ldrb	r2, [r2, #1]
 8006176:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800617a:	2e09      	cmp	r6, #9
 800617c:	d937      	bls.n	80061ee <_strtod_l+0x346>
 800617e:	9e06      	ldr	r6, [sp, #24]
 8006180:	1b89      	subs	r1, r1, r6
 8006182:	2908      	cmp	r1, #8
 8006184:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006188:	dc02      	bgt.n	8006190 <_strtod_l+0x2e8>
 800618a:	4576      	cmp	r6, lr
 800618c:	bfa8      	it	ge
 800618e:	4676      	movge	r6, lr
 8006190:	f1bc 0f00 	cmp.w	ip, #0
 8006194:	d000      	beq.n	8006198 <_strtod_l+0x2f0>
 8006196:	4276      	negs	r6, r6
 8006198:	2d00      	cmp	r5, #0
 800619a:	d14d      	bne.n	8006238 <_strtod_l+0x390>
 800619c:	9904      	ldr	r1, [sp, #16]
 800619e:	4301      	orrs	r1, r0
 80061a0:	f47f aec6 	bne.w	8005f30 <_strtod_l+0x88>
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f47f aee1 	bne.w	8005f6c <_strtod_l+0xc4>
 80061aa:	2a69      	cmp	r2, #105	; 0x69
 80061ac:	d027      	beq.n	80061fe <_strtod_l+0x356>
 80061ae:	dc24      	bgt.n	80061fa <_strtod_l+0x352>
 80061b0:	2a49      	cmp	r2, #73	; 0x49
 80061b2:	d024      	beq.n	80061fe <_strtod_l+0x356>
 80061b4:	2a4e      	cmp	r2, #78	; 0x4e
 80061b6:	f47f aed9 	bne.w	8005f6c <_strtod_l+0xc4>
 80061ba:	499f      	ldr	r1, [pc, #636]	; (8006438 <_strtod_l+0x590>)
 80061bc:	a817      	add	r0, sp, #92	; 0x5c
 80061be:	f000 ffe5 	bl	800718c <__match>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	f43f aed2 	beq.w	8005f6c <_strtod_l+0xc4>
 80061c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b28      	cmp	r3, #40	; 0x28
 80061ce:	d12d      	bne.n	800622c <_strtod_l+0x384>
 80061d0:	499a      	ldr	r1, [pc, #616]	; (800643c <_strtod_l+0x594>)
 80061d2:	aa1a      	add	r2, sp, #104	; 0x68
 80061d4:	a817      	add	r0, sp, #92	; 0x5c
 80061d6:	f000 ffed 	bl	80071b4 <__hexnan>
 80061da:	2805      	cmp	r0, #5
 80061dc:	d126      	bne.n	800622c <_strtod_l+0x384>
 80061de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80061e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80061e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80061ec:	e6a0      	b.n	8005f30 <_strtod_l+0x88>
 80061ee:	210a      	movs	r1, #10
 80061f0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80061f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80061f8:	e7b9      	b.n	800616e <_strtod_l+0x2c6>
 80061fa:	2a6e      	cmp	r2, #110	; 0x6e
 80061fc:	e7db      	b.n	80061b6 <_strtod_l+0x30e>
 80061fe:	4990      	ldr	r1, [pc, #576]	; (8006440 <_strtod_l+0x598>)
 8006200:	a817      	add	r0, sp, #92	; 0x5c
 8006202:	f000 ffc3 	bl	800718c <__match>
 8006206:	2800      	cmp	r0, #0
 8006208:	f43f aeb0 	beq.w	8005f6c <_strtod_l+0xc4>
 800620c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800620e:	498d      	ldr	r1, [pc, #564]	; (8006444 <_strtod_l+0x59c>)
 8006210:	3b01      	subs	r3, #1
 8006212:	a817      	add	r0, sp, #92	; 0x5c
 8006214:	9317      	str	r3, [sp, #92]	; 0x5c
 8006216:	f000 ffb9 	bl	800718c <__match>
 800621a:	b910      	cbnz	r0, 8006222 <_strtod_l+0x37a>
 800621c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800621e:	3301      	adds	r3, #1
 8006220:	9317      	str	r3, [sp, #92]	; 0x5c
 8006222:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006454 <_strtod_l+0x5ac>
 8006226:	f04f 0a00 	mov.w	sl, #0
 800622a:	e681      	b.n	8005f30 <_strtod_l+0x88>
 800622c:	4886      	ldr	r0, [pc, #536]	; (8006448 <_strtod_l+0x5a0>)
 800622e:	f002 fc13 	bl	8008a58 <nan>
 8006232:	ec5b ab10 	vmov	sl, fp, d0
 8006236:	e67b      	b.n	8005f30 <_strtod_l+0x88>
 8006238:	9b05      	ldr	r3, [sp, #20]
 800623a:	9807      	ldr	r0, [sp, #28]
 800623c:	1af3      	subs	r3, r6, r3
 800623e:	2f00      	cmp	r7, #0
 8006240:	bf08      	it	eq
 8006242:	462f      	moveq	r7, r5
 8006244:	2d10      	cmp	r5, #16
 8006246:	9306      	str	r3, [sp, #24]
 8006248:	46a8      	mov	r8, r5
 800624a:	bfa8      	it	ge
 800624c:	f04f 0810 	movge.w	r8, #16
 8006250:	f7fa f960 	bl	8000514 <__aeabi_ui2d>
 8006254:	2d09      	cmp	r5, #9
 8006256:	4682      	mov	sl, r0
 8006258:	468b      	mov	fp, r1
 800625a:	dd13      	ble.n	8006284 <_strtod_l+0x3dc>
 800625c:	4b7b      	ldr	r3, [pc, #492]	; (800644c <_strtod_l+0x5a4>)
 800625e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006262:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006266:	f7fa f9cf 	bl	8000608 <__aeabi_dmul>
 800626a:	4682      	mov	sl, r0
 800626c:	4648      	mov	r0, r9
 800626e:	468b      	mov	fp, r1
 8006270:	f7fa f950 	bl	8000514 <__aeabi_ui2d>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4650      	mov	r0, sl
 800627a:	4659      	mov	r1, fp
 800627c:	f7fa f80e 	bl	800029c <__adddf3>
 8006280:	4682      	mov	sl, r0
 8006282:	468b      	mov	fp, r1
 8006284:	2d0f      	cmp	r5, #15
 8006286:	dc38      	bgt.n	80062fa <_strtod_l+0x452>
 8006288:	9b06      	ldr	r3, [sp, #24]
 800628a:	2b00      	cmp	r3, #0
 800628c:	f43f ae50 	beq.w	8005f30 <_strtod_l+0x88>
 8006290:	dd24      	ble.n	80062dc <_strtod_l+0x434>
 8006292:	2b16      	cmp	r3, #22
 8006294:	dc0b      	bgt.n	80062ae <_strtod_l+0x406>
 8006296:	496d      	ldr	r1, [pc, #436]	; (800644c <_strtod_l+0x5a4>)
 8006298:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800629c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062a0:	4652      	mov	r2, sl
 80062a2:	465b      	mov	r3, fp
 80062a4:	f7fa f9b0 	bl	8000608 <__aeabi_dmul>
 80062a8:	4682      	mov	sl, r0
 80062aa:	468b      	mov	fp, r1
 80062ac:	e640      	b.n	8005f30 <_strtod_l+0x88>
 80062ae:	9a06      	ldr	r2, [sp, #24]
 80062b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80062b4:	4293      	cmp	r3, r2
 80062b6:	db20      	blt.n	80062fa <_strtod_l+0x452>
 80062b8:	4c64      	ldr	r4, [pc, #400]	; (800644c <_strtod_l+0x5a4>)
 80062ba:	f1c5 050f 	rsb	r5, r5, #15
 80062be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80062c2:	4652      	mov	r2, sl
 80062c4:	465b      	mov	r3, fp
 80062c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062ca:	f7fa f99d 	bl	8000608 <__aeabi_dmul>
 80062ce:	9b06      	ldr	r3, [sp, #24]
 80062d0:	1b5d      	subs	r5, r3, r5
 80062d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80062d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80062da:	e7e3      	b.n	80062a4 <_strtod_l+0x3fc>
 80062dc:	9b06      	ldr	r3, [sp, #24]
 80062de:	3316      	adds	r3, #22
 80062e0:	db0b      	blt.n	80062fa <_strtod_l+0x452>
 80062e2:	9b05      	ldr	r3, [sp, #20]
 80062e4:	1b9e      	subs	r6, r3, r6
 80062e6:	4b59      	ldr	r3, [pc, #356]	; (800644c <_strtod_l+0x5a4>)
 80062e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80062ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062f0:	4650      	mov	r0, sl
 80062f2:	4659      	mov	r1, fp
 80062f4:	f7fa fab2 	bl	800085c <__aeabi_ddiv>
 80062f8:	e7d6      	b.n	80062a8 <_strtod_l+0x400>
 80062fa:	9b06      	ldr	r3, [sp, #24]
 80062fc:	eba5 0808 	sub.w	r8, r5, r8
 8006300:	4498      	add	r8, r3
 8006302:	f1b8 0f00 	cmp.w	r8, #0
 8006306:	dd74      	ble.n	80063f2 <_strtod_l+0x54a>
 8006308:	f018 030f 	ands.w	r3, r8, #15
 800630c:	d00a      	beq.n	8006324 <_strtod_l+0x47c>
 800630e:	494f      	ldr	r1, [pc, #316]	; (800644c <_strtod_l+0x5a4>)
 8006310:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006314:	4652      	mov	r2, sl
 8006316:	465b      	mov	r3, fp
 8006318:	e9d1 0100 	ldrd	r0, r1, [r1]
 800631c:	f7fa f974 	bl	8000608 <__aeabi_dmul>
 8006320:	4682      	mov	sl, r0
 8006322:	468b      	mov	fp, r1
 8006324:	f038 080f 	bics.w	r8, r8, #15
 8006328:	d04f      	beq.n	80063ca <_strtod_l+0x522>
 800632a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800632e:	dd22      	ble.n	8006376 <_strtod_l+0x4ce>
 8006330:	2500      	movs	r5, #0
 8006332:	462e      	mov	r6, r5
 8006334:	9507      	str	r5, [sp, #28]
 8006336:	9505      	str	r5, [sp, #20]
 8006338:	2322      	movs	r3, #34	; 0x22
 800633a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006454 <_strtod_l+0x5ac>
 800633e:	6023      	str	r3, [r4, #0]
 8006340:	f04f 0a00 	mov.w	sl, #0
 8006344:	9b07      	ldr	r3, [sp, #28]
 8006346:	2b00      	cmp	r3, #0
 8006348:	f43f adf2 	beq.w	8005f30 <_strtod_l+0x88>
 800634c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800634e:	4620      	mov	r0, r4
 8006350:	f001 f830 	bl	80073b4 <_Bfree>
 8006354:	9905      	ldr	r1, [sp, #20]
 8006356:	4620      	mov	r0, r4
 8006358:	f001 f82c 	bl	80073b4 <_Bfree>
 800635c:	4631      	mov	r1, r6
 800635e:	4620      	mov	r0, r4
 8006360:	f001 f828 	bl	80073b4 <_Bfree>
 8006364:	9907      	ldr	r1, [sp, #28]
 8006366:	4620      	mov	r0, r4
 8006368:	f001 f824 	bl	80073b4 <_Bfree>
 800636c:	4629      	mov	r1, r5
 800636e:	4620      	mov	r0, r4
 8006370:	f001 f820 	bl	80073b4 <_Bfree>
 8006374:	e5dc      	b.n	8005f30 <_strtod_l+0x88>
 8006376:	4b36      	ldr	r3, [pc, #216]	; (8006450 <_strtod_l+0x5a8>)
 8006378:	9304      	str	r3, [sp, #16]
 800637a:	2300      	movs	r3, #0
 800637c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006380:	4650      	mov	r0, sl
 8006382:	4659      	mov	r1, fp
 8006384:	4699      	mov	r9, r3
 8006386:	f1b8 0f01 	cmp.w	r8, #1
 800638a:	dc21      	bgt.n	80063d0 <_strtod_l+0x528>
 800638c:	b10b      	cbz	r3, 8006392 <_strtod_l+0x4ea>
 800638e:	4682      	mov	sl, r0
 8006390:	468b      	mov	fp, r1
 8006392:	4b2f      	ldr	r3, [pc, #188]	; (8006450 <_strtod_l+0x5a8>)
 8006394:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006398:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800639c:	4652      	mov	r2, sl
 800639e:	465b      	mov	r3, fp
 80063a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80063a4:	f7fa f930 	bl	8000608 <__aeabi_dmul>
 80063a8:	4b2a      	ldr	r3, [pc, #168]	; (8006454 <_strtod_l+0x5ac>)
 80063aa:	460a      	mov	r2, r1
 80063ac:	400b      	ands	r3, r1
 80063ae:	492a      	ldr	r1, [pc, #168]	; (8006458 <_strtod_l+0x5b0>)
 80063b0:	428b      	cmp	r3, r1
 80063b2:	4682      	mov	sl, r0
 80063b4:	d8bc      	bhi.n	8006330 <_strtod_l+0x488>
 80063b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80063ba:	428b      	cmp	r3, r1
 80063bc:	bf86      	itte	hi
 80063be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800645c <_strtod_l+0x5b4>
 80063c2:	f04f 3aff 	movhi.w	sl, #4294967295
 80063c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80063ca:	2300      	movs	r3, #0
 80063cc:	9304      	str	r3, [sp, #16]
 80063ce:	e084      	b.n	80064da <_strtod_l+0x632>
 80063d0:	f018 0f01 	tst.w	r8, #1
 80063d4:	d005      	beq.n	80063e2 <_strtod_l+0x53a>
 80063d6:	9b04      	ldr	r3, [sp, #16]
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	f7fa f914 	bl	8000608 <__aeabi_dmul>
 80063e0:	2301      	movs	r3, #1
 80063e2:	9a04      	ldr	r2, [sp, #16]
 80063e4:	3208      	adds	r2, #8
 80063e6:	f109 0901 	add.w	r9, r9, #1
 80063ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80063ee:	9204      	str	r2, [sp, #16]
 80063f0:	e7c9      	b.n	8006386 <_strtod_l+0x4de>
 80063f2:	d0ea      	beq.n	80063ca <_strtod_l+0x522>
 80063f4:	f1c8 0800 	rsb	r8, r8, #0
 80063f8:	f018 020f 	ands.w	r2, r8, #15
 80063fc:	d00a      	beq.n	8006414 <_strtod_l+0x56c>
 80063fe:	4b13      	ldr	r3, [pc, #76]	; (800644c <_strtod_l+0x5a4>)
 8006400:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006404:	4650      	mov	r0, sl
 8006406:	4659      	mov	r1, fp
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f7fa fa26 	bl	800085c <__aeabi_ddiv>
 8006410:	4682      	mov	sl, r0
 8006412:	468b      	mov	fp, r1
 8006414:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006418:	d0d7      	beq.n	80063ca <_strtod_l+0x522>
 800641a:	f1b8 0f1f 	cmp.w	r8, #31
 800641e:	dd1f      	ble.n	8006460 <_strtod_l+0x5b8>
 8006420:	2500      	movs	r5, #0
 8006422:	462e      	mov	r6, r5
 8006424:	9507      	str	r5, [sp, #28]
 8006426:	9505      	str	r5, [sp, #20]
 8006428:	2322      	movs	r3, #34	; 0x22
 800642a:	f04f 0a00 	mov.w	sl, #0
 800642e:	f04f 0b00 	mov.w	fp, #0
 8006432:	6023      	str	r3, [r4, #0]
 8006434:	e786      	b.n	8006344 <_strtod_l+0x49c>
 8006436:	bf00      	nop
 8006438:	080098fe 	.word	0x080098fe
 800643c:	08009918 	.word	0x08009918
 8006440:	080098f5 	.word	0x080098f5
 8006444:	080098f8 	.word	0x080098f8
 8006448:	08009cdd 	.word	0x08009cdd
 800644c:	08009b80 	.word	0x08009b80
 8006450:	08009b58 	.word	0x08009b58
 8006454:	7ff00000 	.word	0x7ff00000
 8006458:	7ca00000 	.word	0x7ca00000
 800645c:	7fefffff 	.word	0x7fefffff
 8006460:	f018 0310 	ands.w	r3, r8, #16
 8006464:	bf18      	it	ne
 8006466:	236a      	movne	r3, #106	; 0x6a
 8006468:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006818 <_strtod_l+0x970>
 800646c:	9304      	str	r3, [sp, #16]
 800646e:	4650      	mov	r0, sl
 8006470:	4659      	mov	r1, fp
 8006472:	2300      	movs	r3, #0
 8006474:	f018 0f01 	tst.w	r8, #1
 8006478:	d004      	beq.n	8006484 <_strtod_l+0x5dc>
 800647a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800647e:	f7fa f8c3 	bl	8000608 <__aeabi_dmul>
 8006482:	2301      	movs	r3, #1
 8006484:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006488:	f109 0908 	add.w	r9, r9, #8
 800648c:	d1f2      	bne.n	8006474 <_strtod_l+0x5cc>
 800648e:	b10b      	cbz	r3, 8006494 <_strtod_l+0x5ec>
 8006490:	4682      	mov	sl, r0
 8006492:	468b      	mov	fp, r1
 8006494:	9b04      	ldr	r3, [sp, #16]
 8006496:	b1c3      	cbz	r3, 80064ca <_strtod_l+0x622>
 8006498:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800649c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	4659      	mov	r1, fp
 80064a4:	dd11      	ble.n	80064ca <_strtod_l+0x622>
 80064a6:	2b1f      	cmp	r3, #31
 80064a8:	f340 8124 	ble.w	80066f4 <_strtod_l+0x84c>
 80064ac:	2b34      	cmp	r3, #52	; 0x34
 80064ae:	bfde      	ittt	le
 80064b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80064b4:	f04f 33ff 	movle.w	r3, #4294967295
 80064b8:	fa03 f202 	lslle.w	r2, r3, r2
 80064bc:	f04f 0a00 	mov.w	sl, #0
 80064c0:	bfcc      	ite	gt
 80064c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80064c6:	ea02 0b01 	andle.w	fp, r2, r1
 80064ca:	2200      	movs	r2, #0
 80064cc:	2300      	movs	r3, #0
 80064ce:	4650      	mov	r0, sl
 80064d0:	4659      	mov	r1, fp
 80064d2:	f7fa fb01 	bl	8000ad8 <__aeabi_dcmpeq>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d1a2      	bne.n	8006420 <_strtod_l+0x578>
 80064da:	9b07      	ldr	r3, [sp, #28]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	9908      	ldr	r1, [sp, #32]
 80064e0:	462b      	mov	r3, r5
 80064e2:	463a      	mov	r2, r7
 80064e4:	4620      	mov	r0, r4
 80064e6:	f000 ffcd 	bl	8007484 <__s2b>
 80064ea:	9007      	str	r0, [sp, #28]
 80064ec:	2800      	cmp	r0, #0
 80064ee:	f43f af1f 	beq.w	8006330 <_strtod_l+0x488>
 80064f2:	9b05      	ldr	r3, [sp, #20]
 80064f4:	1b9e      	subs	r6, r3, r6
 80064f6:	9b06      	ldr	r3, [sp, #24]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	bfb4      	ite	lt
 80064fc:	4633      	movlt	r3, r6
 80064fe:	2300      	movge	r3, #0
 8006500:	930c      	str	r3, [sp, #48]	; 0x30
 8006502:	9b06      	ldr	r3, [sp, #24]
 8006504:	2500      	movs	r5, #0
 8006506:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800650a:	9312      	str	r3, [sp, #72]	; 0x48
 800650c:	462e      	mov	r6, r5
 800650e:	9b07      	ldr	r3, [sp, #28]
 8006510:	4620      	mov	r0, r4
 8006512:	6859      	ldr	r1, [r3, #4]
 8006514:	f000 ff0e 	bl	8007334 <_Balloc>
 8006518:	9005      	str	r0, [sp, #20]
 800651a:	2800      	cmp	r0, #0
 800651c:	f43f af0c 	beq.w	8006338 <_strtod_l+0x490>
 8006520:	9b07      	ldr	r3, [sp, #28]
 8006522:	691a      	ldr	r2, [r3, #16]
 8006524:	3202      	adds	r2, #2
 8006526:	f103 010c 	add.w	r1, r3, #12
 800652a:	0092      	lsls	r2, r2, #2
 800652c:	300c      	adds	r0, #12
 800652e:	f7ff f9cb 	bl	80058c8 <memcpy>
 8006532:	ec4b ab10 	vmov	d0, sl, fp
 8006536:	aa1a      	add	r2, sp, #104	; 0x68
 8006538:	a919      	add	r1, sp, #100	; 0x64
 800653a:	4620      	mov	r0, r4
 800653c:	f001 fae8 	bl	8007b10 <__d2b>
 8006540:	ec4b ab18 	vmov	d8, sl, fp
 8006544:	9018      	str	r0, [sp, #96]	; 0x60
 8006546:	2800      	cmp	r0, #0
 8006548:	f43f aef6 	beq.w	8006338 <_strtod_l+0x490>
 800654c:	2101      	movs	r1, #1
 800654e:	4620      	mov	r0, r4
 8006550:	f001 f832 	bl	80075b8 <__i2b>
 8006554:	4606      	mov	r6, r0
 8006556:	2800      	cmp	r0, #0
 8006558:	f43f aeee 	beq.w	8006338 <_strtod_l+0x490>
 800655c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800655e:	9904      	ldr	r1, [sp, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	bfab      	itete	ge
 8006564:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006566:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006568:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800656a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800656e:	bfac      	ite	ge
 8006570:	eb03 0902 	addge.w	r9, r3, r2
 8006574:	1ad7      	sublt	r7, r2, r3
 8006576:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006578:	eba3 0801 	sub.w	r8, r3, r1
 800657c:	4490      	add	r8, r2
 800657e:	4ba1      	ldr	r3, [pc, #644]	; (8006804 <_strtod_l+0x95c>)
 8006580:	f108 38ff 	add.w	r8, r8, #4294967295
 8006584:	4598      	cmp	r8, r3
 8006586:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800658a:	f280 80c7 	bge.w	800671c <_strtod_l+0x874>
 800658e:	eba3 0308 	sub.w	r3, r3, r8
 8006592:	2b1f      	cmp	r3, #31
 8006594:	eba2 0203 	sub.w	r2, r2, r3
 8006598:	f04f 0101 	mov.w	r1, #1
 800659c:	f300 80b1 	bgt.w	8006702 <_strtod_l+0x85a>
 80065a0:	fa01 f303 	lsl.w	r3, r1, r3
 80065a4:	930d      	str	r3, [sp, #52]	; 0x34
 80065a6:	2300      	movs	r3, #0
 80065a8:	9308      	str	r3, [sp, #32]
 80065aa:	eb09 0802 	add.w	r8, r9, r2
 80065ae:	9b04      	ldr	r3, [sp, #16]
 80065b0:	45c1      	cmp	r9, r8
 80065b2:	4417      	add	r7, r2
 80065b4:	441f      	add	r7, r3
 80065b6:	464b      	mov	r3, r9
 80065b8:	bfa8      	it	ge
 80065ba:	4643      	movge	r3, r8
 80065bc:	42bb      	cmp	r3, r7
 80065be:	bfa8      	it	ge
 80065c0:	463b      	movge	r3, r7
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	bfc2      	ittt	gt
 80065c6:	eba8 0803 	subgt.w	r8, r8, r3
 80065ca:	1aff      	subgt	r7, r7, r3
 80065cc:	eba9 0903 	subgt.w	r9, r9, r3
 80065d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	dd17      	ble.n	8006606 <_strtod_l+0x75e>
 80065d6:	4631      	mov	r1, r6
 80065d8:	461a      	mov	r2, r3
 80065da:	4620      	mov	r0, r4
 80065dc:	f001 f8ac 	bl	8007738 <__pow5mult>
 80065e0:	4606      	mov	r6, r0
 80065e2:	2800      	cmp	r0, #0
 80065e4:	f43f aea8 	beq.w	8006338 <_strtod_l+0x490>
 80065e8:	4601      	mov	r1, r0
 80065ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80065ec:	4620      	mov	r0, r4
 80065ee:	f000 fff9 	bl	80075e4 <__multiply>
 80065f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80065f4:	2800      	cmp	r0, #0
 80065f6:	f43f ae9f 	beq.w	8006338 <_strtod_l+0x490>
 80065fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80065fc:	4620      	mov	r0, r4
 80065fe:	f000 fed9 	bl	80073b4 <_Bfree>
 8006602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006604:	9318      	str	r3, [sp, #96]	; 0x60
 8006606:	f1b8 0f00 	cmp.w	r8, #0
 800660a:	f300 808c 	bgt.w	8006726 <_strtod_l+0x87e>
 800660e:	9b06      	ldr	r3, [sp, #24]
 8006610:	2b00      	cmp	r3, #0
 8006612:	dd08      	ble.n	8006626 <_strtod_l+0x77e>
 8006614:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006616:	9905      	ldr	r1, [sp, #20]
 8006618:	4620      	mov	r0, r4
 800661a:	f001 f88d 	bl	8007738 <__pow5mult>
 800661e:	9005      	str	r0, [sp, #20]
 8006620:	2800      	cmp	r0, #0
 8006622:	f43f ae89 	beq.w	8006338 <_strtod_l+0x490>
 8006626:	2f00      	cmp	r7, #0
 8006628:	dd08      	ble.n	800663c <_strtod_l+0x794>
 800662a:	9905      	ldr	r1, [sp, #20]
 800662c:	463a      	mov	r2, r7
 800662e:	4620      	mov	r0, r4
 8006630:	f001 f8dc 	bl	80077ec <__lshift>
 8006634:	9005      	str	r0, [sp, #20]
 8006636:	2800      	cmp	r0, #0
 8006638:	f43f ae7e 	beq.w	8006338 <_strtod_l+0x490>
 800663c:	f1b9 0f00 	cmp.w	r9, #0
 8006640:	dd08      	ble.n	8006654 <_strtod_l+0x7ac>
 8006642:	4631      	mov	r1, r6
 8006644:	464a      	mov	r2, r9
 8006646:	4620      	mov	r0, r4
 8006648:	f001 f8d0 	bl	80077ec <__lshift>
 800664c:	4606      	mov	r6, r0
 800664e:	2800      	cmp	r0, #0
 8006650:	f43f ae72 	beq.w	8006338 <_strtod_l+0x490>
 8006654:	9a05      	ldr	r2, [sp, #20]
 8006656:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006658:	4620      	mov	r0, r4
 800665a:	f001 f953 	bl	8007904 <__mdiff>
 800665e:	4605      	mov	r5, r0
 8006660:	2800      	cmp	r0, #0
 8006662:	f43f ae69 	beq.w	8006338 <_strtod_l+0x490>
 8006666:	68c3      	ldr	r3, [r0, #12]
 8006668:	930b      	str	r3, [sp, #44]	; 0x2c
 800666a:	2300      	movs	r3, #0
 800666c:	60c3      	str	r3, [r0, #12]
 800666e:	4631      	mov	r1, r6
 8006670:	f001 f92c 	bl	80078cc <__mcmp>
 8006674:	2800      	cmp	r0, #0
 8006676:	da60      	bge.n	800673a <_strtod_l+0x892>
 8006678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800667a:	ea53 030a 	orrs.w	r3, r3, sl
 800667e:	f040 8082 	bne.w	8006786 <_strtod_l+0x8de>
 8006682:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006686:	2b00      	cmp	r3, #0
 8006688:	d17d      	bne.n	8006786 <_strtod_l+0x8de>
 800668a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800668e:	0d1b      	lsrs	r3, r3, #20
 8006690:	051b      	lsls	r3, r3, #20
 8006692:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006696:	d976      	bls.n	8006786 <_strtod_l+0x8de>
 8006698:	696b      	ldr	r3, [r5, #20]
 800669a:	b913      	cbnz	r3, 80066a2 <_strtod_l+0x7fa>
 800669c:	692b      	ldr	r3, [r5, #16]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	dd71      	ble.n	8006786 <_strtod_l+0x8de>
 80066a2:	4629      	mov	r1, r5
 80066a4:	2201      	movs	r2, #1
 80066a6:	4620      	mov	r0, r4
 80066a8:	f001 f8a0 	bl	80077ec <__lshift>
 80066ac:	4631      	mov	r1, r6
 80066ae:	4605      	mov	r5, r0
 80066b0:	f001 f90c 	bl	80078cc <__mcmp>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	dd66      	ble.n	8006786 <_strtod_l+0x8de>
 80066b8:	9904      	ldr	r1, [sp, #16]
 80066ba:	4a53      	ldr	r2, [pc, #332]	; (8006808 <_strtod_l+0x960>)
 80066bc:	465b      	mov	r3, fp
 80066be:	2900      	cmp	r1, #0
 80066c0:	f000 8081 	beq.w	80067c6 <_strtod_l+0x91e>
 80066c4:	ea02 010b 	and.w	r1, r2, fp
 80066c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80066cc:	dc7b      	bgt.n	80067c6 <_strtod_l+0x91e>
 80066ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80066d2:	f77f aea9 	ble.w	8006428 <_strtod_l+0x580>
 80066d6:	4b4d      	ldr	r3, [pc, #308]	; (800680c <_strtod_l+0x964>)
 80066d8:	4650      	mov	r0, sl
 80066da:	4659      	mov	r1, fp
 80066dc:	2200      	movs	r2, #0
 80066de:	f7f9 ff93 	bl	8000608 <__aeabi_dmul>
 80066e2:	460b      	mov	r3, r1
 80066e4:	4303      	orrs	r3, r0
 80066e6:	bf08      	it	eq
 80066e8:	2322      	moveq	r3, #34	; 0x22
 80066ea:	4682      	mov	sl, r0
 80066ec:	468b      	mov	fp, r1
 80066ee:	bf08      	it	eq
 80066f0:	6023      	streq	r3, [r4, #0]
 80066f2:	e62b      	b.n	800634c <_strtod_l+0x4a4>
 80066f4:	f04f 32ff 	mov.w	r2, #4294967295
 80066f8:	fa02 f303 	lsl.w	r3, r2, r3
 80066fc:	ea03 0a0a 	and.w	sl, r3, sl
 8006700:	e6e3      	b.n	80064ca <_strtod_l+0x622>
 8006702:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006706:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800670a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800670e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006712:	fa01 f308 	lsl.w	r3, r1, r8
 8006716:	9308      	str	r3, [sp, #32]
 8006718:	910d      	str	r1, [sp, #52]	; 0x34
 800671a:	e746      	b.n	80065aa <_strtod_l+0x702>
 800671c:	2300      	movs	r3, #0
 800671e:	9308      	str	r3, [sp, #32]
 8006720:	2301      	movs	r3, #1
 8006722:	930d      	str	r3, [sp, #52]	; 0x34
 8006724:	e741      	b.n	80065aa <_strtod_l+0x702>
 8006726:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006728:	4642      	mov	r2, r8
 800672a:	4620      	mov	r0, r4
 800672c:	f001 f85e 	bl	80077ec <__lshift>
 8006730:	9018      	str	r0, [sp, #96]	; 0x60
 8006732:	2800      	cmp	r0, #0
 8006734:	f47f af6b 	bne.w	800660e <_strtod_l+0x766>
 8006738:	e5fe      	b.n	8006338 <_strtod_l+0x490>
 800673a:	465f      	mov	r7, fp
 800673c:	d16e      	bne.n	800681c <_strtod_l+0x974>
 800673e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006740:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006744:	b342      	cbz	r2, 8006798 <_strtod_l+0x8f0>
 8006746:	4a32      	ldr	r2, [pc, #200]	; (8006810 <_strtod_l+0x968>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d128      	bne.n	800679e <_strtod_l+0x8f6>
 800674c:	9b04      	ldr	r3, [sp, #16]
 800674e:	4651      	mov	r1, sl
 8006750:	b1eb      	cbz	r3, 800678e <_strtod_l+0x8e6>
 8006752:	4b2d      	ldr	r3, [pc, #180]	; (8006808 <_strtod_l+0x960>)
 8006754:	403b      	ands	r3, r7
 8006756:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800675a:	f04f 32ff 	mov.w	r2, #4294967295
 800675e:	d819      	bhi.n	8006794 <_strtod_l+0x8ec>
 8006760:	0d1b      	lsrs	r3, r3, #20
 8006762:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006766:	fa02 f303 	lsl.w	r3, r2, r3
 800676a:	4299      	cmp	r1, r3
 800676c:	d117      	bne.n	800679e <_strtod_l+0x8f6>
 800676e:	4b29      	ldr	r3, [pc, #164]	; (8006814 <_strtod_l+0x96c>)
 8006770:	429f      	cmp	r7, r3
 8006772:	d102      	bne.n	800677a <_strtod_l+0x8d2>
 8006774:	3101      	adds	r1, #1
 8006776:	f43f addf 	beq.w	8006338 <_strtod_l+0x490>
 800677a:	4b23      	ldr	r3, [pc, #140]	; (8006808 <_strtod_l+0x960>)
 800677c:	403b      	ands	r3, r7
 800677e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006782:	f04f 0a00 	mov.w	sl, #0
 8006786:	9b04      	ldr	r3, [sp, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1a4      	bne.n	80066d6 <_strtod_l+0x82e>
 800678c:	e5de      	b.n	800634c <_strtod_l+0x4a4>
 800678e:	f04f 33ff 	mov.w	r3, #4294967295
 8006792:	e7ea      	b.n	800676a <_strtod_l+0x8c2>
 8006794:	4613      	mov	r3, r2
 8006796:	e7e8      	b.n	800676a <_strtod_l+0x8c2>
 8006798:	ea53 030a 	orrs.w	r3, r3, sl
 800679c:	d08c      	beq.n	80066b8 <_strtod_l+0x810>
 800679e:	9b08      	ldr	r3, [sp, #32]
 80067a0:	b1db      	cbz	r3, 80067da <_strtod_l+0x932>
 80067a2:	423b      	tst	r3, r7
 80067a4:	d0ef      	beq.n	8006786 <_strtod_l+0x8de>
 80067a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067a8:	9a04      	ldr	r2, [sp, #16]
 80067aa:	4650      	mov	r0, sl
 80067ac:	4659      	mov	r1, fp
 80067ae:	b1c3      	cbz	r3, 80067e2 <_strtod_l+0x93a>
 80067b0:	f7ff fb5b 	bl	8005e6a <sulp>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	ec51 0b18 	vmov	r0, r1, d8
 80067bc:	f7f9 fd6e 	bl	800029c <__adddf3>
 80067c0:	4682      	mov	sl, r0
 80067c2:	468b      	mov	fp, r1
 80067c4:	e7df      	b.n	8006786 <_strtod_l+0x8de>
 80067c6:	4013      	ands	r3, r2
 80067c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80067cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80067d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80067d4:	f04f 3aff 	mov.w	sl, #4294967295
 80067d8:	e7d5      	b.n	8006786 <_strtod_l+0x8de>
 80067da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067dc:	ea13 0f0a 	tst.w	r3, sl
 80067e0:	e7e0      	b.n	80067a4 <_strtod_l+0x8fc>
 80067e2:	f7ff fb42 	bl	8005e6a <sulp>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	ec51 0b18 	vmov	r0, r1, d8
 80067ee:	f7f9 fd53 	bl	8000298 <__aeabi_dsub>
 80067f2:	2200      	movs	r2, #0
 80067f4:	2300      	movs	r3, #0
 80067f6:	4682      	mov	sl, r0
 80067f8:	468b      	mov	fp, r1
 80067fa:	f7fa f96d 	bl	8000ad8 <__aeabi_dcmpeq>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d0c1      	beq.n	8006786 <_strtod_l+0x8de>
 8006802:	e611      	b.n	8006428 <_strtod_l+0x580>
 8006804:	fffffc02 	.word	0xfffffc02
 8006808:	7ff00000 	.word	0x7ff00000
 800680c:	39500000 	.word	0x39500000
 8006810:	000fffff 	.word	0x000fffff
 8006814:	7fefffff 	.word	0x7fefffff
 8006818:	08009930 	.word	0x08009930
 800681c:	4631      	mov	r1, r6
 800681e:	4628      	mov	r0, r5
 8006820:	f001 f9d2 	bl	8007bc8 <__ratio>
 8006824:	ec59 8b10 	vmov	r8, r9, d0
 8006828:	ee10 0a10 	vmov	r0, s0
 800682c:	2200      	movs	r2, #0
 800682e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006832:	4649      	mov	r1, r9
 8006834:	f7fa f964 	bl	8000b00 <__aeabi_dcmple>
 8006838:	2800      	cmp	r0, #0
 800683a:	d07a      	beq.n	8006932 <_strtod_l+0xa8a>
 800683c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d04a      	beq.n	80068d8 <_strtod_l+0xa30>
 8006842:	4b95      	ldr	r3, [pc, #596]	; (8006a98 <_strtod_l+0xbf0>)
 8006844:	2200      	movs	r2, #0
 8006846:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800684a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006a98 <_strtod_l+0xbf0>
 800684e:	f04f 0800 	mov.w	r8, #0
 8006852:	4b92      	ldr	r3, [pc, #584]	; (8006a9c <_strtod_l+0xbf4>)
 8006854:	403b      	ands	r3, r7
 8006856:	930d      	str	r3, [sp, #52]	; 0x34
 8006858:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800685a:	4b91      	ldr	r3, [pc, #580]	; (8006aa0 <_strtod_l+0xbf8>)
 800685c:	429a      	cmp	r2, r3
 800685e:	f040 80b0 	bne.w	80069c2 <_strtod_l+0xb1a>
 8006862:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006866:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800686a:	ec4b ab10 	vmov	d0, sl, fp
 800686e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006872:	f001 f8d1 	bl	8007a18 <__ulp>
 8006876:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800687a:	ec53 2b10 	vmov	r2, r3, d0
 800687e:	f7f9 fec3 	bl	8000608 <__aeabi_dmul>
 8006882:	4652      	mov	r2, sl
 8006884:	465b      	mov	r3, fp
 8006886:	f7f9 fd09 	bl	800029c <__adddf3>
 800688a:	460b      	mov	r3, r1
 800688c:	4983      	ldr	r1, [pc, #524]	; (8006a9c <_strtod_l+0xbf4>)
 800688e:	4a85      	ldr	r2, [pc, #532]	; (8006aa4 <_strtod_l+0xbfc>)
 8006890:	4019      	ands	r1, r3
 8006892:	4291      	cmp	r1, r2
 8006894:	4682      	mov	sl, r0
 8006896:	d960      	bls.n	800695a <_strtod_l+0xab2>
 8006898:	ee18 3a90 	vmov	r3, s17
 800689c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d104      	bne.n	80068ae <_strtod_l+0xa06>
 80068a4:	ee18 3a10 	vmov	r3, s16
 80068a8:	3301      	adds	r3, #1
 80068aa:	f43f ad45 	beq.w	8006338 <_strtod_l+0x490>
 80068ae:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006ab0 <_strtod_l+0xc08>
 80068b2:	f04f 3aff 	mov.w	sl, #4294967295
 80068b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80068b8:	4620      	mov	r0, r4
 80068ba:	f000 fd7b 	bl	80073b4 <_Bfree>
 80068be:	9905      	ldr	r1, [sp, #20]
 80068c0:	4620      	mov	r0, r4
 80068c2:	f000 fd77 	bl	80073b4 <_Bfree>
 80068c6:	4631      	mov	r1, r6
 80068c8:	4620      	mov	r0, r4
 80068ca:	f000 fd73 	bl	80073b4 <_Bfree>
 80068ce:	4629      	mov	r1, r5
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 fd6f 	bl	80073b4 <_Bfree>
 80068d6:	e61a      	b.n	800650e <_strtod_l+0x666>
 80068d8:	f1ba 0f00 	cmp.w	sl, #0
 80068dc:	d11b      	bne.n	8006916 <_strtod_l+0xa6e>
 80068de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80068e2:	b9f3      	cbnz	r3, 8006922 <_strtod_l+0xa7a>
 80068e4:	4b6c      	ldr	r3, [pc, #432]	; (8006a98 <_strtod_l+0xbf0>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	4640      	mov	r0, r8
 80068ea:	4649      	mov	r1, r9
 80068ec:	f7fa f8fe 	bl	8000aec <__aeabi_dcmplt>
 80068f0:	b9d0      	cbnz	r0, 8006928 <_strtod_l+0xa80>
 80068f2:	4640      	mov	r0, r8
 80068f4:	4649      	mov	r1, r9
 80068f6:	4b6c      	ldr	r3, [pc, #432]	; (8006aa8 <_strtod_l+0xc00>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	f7f9 fe85 	bl	8000608 <__aeabi_dmul>
 80068fe:	4680      	mov	r8, r0
 8006900:	4689      	mov	r9, r1
 8006902:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006906:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800690a:	9315      	str	r3, [sp, #84]	; 0x54
 800690c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006910:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006914:	e79d      	b.n	8006852 <_strtod_l+0x9aa>
 8006916:	f1ba 0f01 	cmp.w	sl, #1
 800691a:	d102      	bne.n	8006922 <_strtod_l+0xa7a>
 800691c:	2f00      	cmp	r7, #0
 800691e:	f43f ad83 	beq.w	8006428 <_strtod_l+0x580>
 8006922:	4b62      	ldr	r3, [pc, #392]	; (8006aac <_strtod_l+0xc04>)
 8006924:	2200      	movs	r2, #0
 8006926:	e78e      	b.n	8006846 <_strtod_l+0x99e>
 8006928:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006aa8 <_strtod_l+0xc00>
 800692c:	f04f 0800 	mov.w	r8, #0
 8006930:	e7e7      	b.n	8006902 <_strtod_l+0xa5a>
 8006932:	4b5d      	ldr	r3, [pc, #372]	; (8006aa8 <_strtod_l+0xc00>)
 8006934:	4640      	mov	r0, r8
 8006936:	4649      	mov	r1, r9
 8006938:	2200      	movs	r2, #0
 800693a:	f7f9 fe65 	bl	8000608 <__aeabi_dmul>
 800693e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006940:	4680      	mov	r8, r0
 8006942:	4689      	mov	r9, r1
 8006944:	b933      	cbnz	r3, 8006954 <_strtod_l+0xaac>
 8006946:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800694a:	900e      	str	r0, [sp, #56]	; 0x38
 800694c:	930f      	str	r3, [sp, #60]	; 0x3c
 800694e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006952:	e7dd      	b.n	8006910 <_strtod_l+0xa68>
 8006954:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006958:	e7f9      	b.n	800694e <_strtod_l+0xaa6>
 800695a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800695e:	9b04      	ldr	r3, [sp, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1a8      	bne.n	80068b6 <_strtod_l+0xa0e>
 8006964:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006968:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800696a:	0d1b      	lsrs	r3, r3, #20
 800696c:	051b      	lsls	r3, r3, #20
 800696e:	429a      	cmp	r2, r3
 8006970:	d1a1      	bne.n	80068b6 <_strtod_l+0xa0e>
 8006972:	4640      	mov	r0, r8
 8006974:	4649      	mov	r1, r9
 8006976:	f7fa f9df 	bl	8000d38 <__aeabi_d2lz>
 800697a:	f7f9 fe17 	bl	80005ac <__aeabi_l2d>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4640      	mov	r0, r8
 8006984:	4649      	mov	r1, r9
 8006986:	f7f9 fc87 	bl	8000298 <__aeabi_dsub>
 800698a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800698c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006990:	ea43 030a 	orr.w	r3, r3, sl
 8006994:	4313      	orrs	r3, r2
 8006996:	4680      	mov	r8, r0
 8006998:	4689      	mov	r9, r1
 800699a:	d055      	beq.n	8006a48 <_strtod_l+0xba0>
 800699c:	a336      	add	r3, pc, #216	; (adr r3, 8006a78 <_strtod_l+0xbd0>)
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f7fa f8a3 	bl	8000aec <__aeabi_dcmplt>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	f47f acd0 	bne.w	800634c <_strtod_l+0x4a4>
 80069ac:	a334      	add	r3, pc, #208	; (adr r3, 8006a80 <_strtod_l+0xbd8>)
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	4640      	mov	r0, r8
 80069b4:	4649      	mov	r1, r9
 80069b6:	f7fa f8b7 	bl	8000b28 <__aeabi_dcmpgt>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	f43f af7b 	beq.w	80068b6 <_strtod_l+0xa0e>
 80069c0:	e4c4      	b.n	800634c <_strtod_l+0x4a4>
 80069c2:	9b04      	ldr	r3, [sp, #16]
 80069c4:	b333      	cbz	r3, 8006a14 <_strtod_l+0xb6c>
 80069c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80069cc:	d822      	bhi.n	8006a14 <_strtod_l+0xb6c>
 80069ce:	a32e      	add	r3, pc, #184	; (adr r3, 8006a88 <_strtod_l+0xbe0>)
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	4640      	mov	r0, r8
 80069d6:	4649      	mov	r1, r9
 80069d8:	f7fa f892 	bl	8000b00 <__aeabi_dcmple>
 80069dc:	b1a0      	cbz	r0, 8006a08 <_strtod_l+0xb60>
 80069de:	4649      	mov	r1, r9
 80069e0:	4640      	mov	r0, r8
 80069e2:	f7fa f8e9 	bl	8000bb8 <__aeabi_d2uiz>
 80069e6:	2801      	cmp	r0, #1
 80069e8:	bf38      	it	cc
 80069ea:	2001      	movcc	r0, #1
 80069ec:	f7f9 fd92 	bl	8000514 <__aeabi_ui2d>
 80069f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069f2:	4680      	mov	r8, r0
 80069f4:	4689      	mov	r9, r1
 80069f6:	bb23      	cbnz	r3, 8006a42 <_strtod_l+0xb9a>
 80069f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069fc:	9010      	str	r0, [sp, #64]	; 0x40
 80069fe:	9311      	str	r3, [sp, #68]	; 0x44
 8006a00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a0c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006a10:	1a9b      	subs	r3, r3, r2
 8006a12:	9309      	str	r3, [sp, #36]	; 0x24
 8006a14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a18:	eeb0 0a48 	vmov.f32	s0, s16
 8006a1c:	eef0 0a68 	vmov.f32	s1, s17
 8006a20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a24:	f000 fff8 	bl	8007a18 <__ulp>
 8006a28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a2c:	ec53 2b10 	vmov	r2, r3, d0
 8006a30:	f7f9 fdea 	bl	8000608 <__aeabi_dmul>
 8006a34:	ec53 2b18 	vmov	r2, r3, d8
 8006a38:	f7f9 fc30 	bl	800029c <__adddf3>
 8006a3c:	4682      	mov	sl, r0
 8006a3e:	468b      	mov	fp, r1
 8006a40:	e78d      	b.n	800695e <_strtod_l+0xab6>
 8006a42:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006a46:	e7db      	b.n	8006a00 <_strtod_l+0xb58>
 8006a48:	a311      	add	r3, pc, #68	; (adr r3, 8006a90 <_strtod_l+0xbe8>)
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	f7fa f84d 	bl	8000aec <__aeabi_dcmplt>
 8006a52:	e7b2      	b.n	80069ba <_strtod_l+0xb12>
 8006a54:	2300      	movs	r3, #0
 8006a56:	930a      	str	r3, [sp, #40]	; 0x28
 8006a58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	f7ff ba6b 	b.w	8005f38 <_strtod_l+0x90>
 8006a62:	2a65      	cmp	r2, #101	; 0x65
 8006a64:	f43f ab5f 	beq.w	8006126 <_strtod_l+0x27e>
 8006a68:	2a45      	cmp	r2, #69	; 0x45
 8006a6a:	f43f ab5c 	beq.w	8006126 <_strtod_l+0x27e>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	f7ff bb94 	b.w	800619c <_strtod_l+0x2f4>
 8006a74:	f3af 8000 	nop.w
 8006a78:	94a03595 	.word	0x94a03595
 8006a7c:	3fdfffff 	.word	0x3fdfffff
 8006a80:	35afe535 	.word	0x35afe535
 8006a84:	3fe00000 	.word	0x3fe00000
 8006a88:	ffc00000 	.word	0xffc00000
 8006a8c:	41dfffff 	.word	0x41dfffff
 8006a90:	94a03595 	.word	0x94a03595
 8006a94:	3fcfffff 	.word	0x3fcfffff
 8006a98:	3ff00000 	.word	0x3ff00000
 8006a9c:	7ff00000 	.word	0x7ff00000
 8006aa0:	7fe00000 	.word	0x7fe00000
 8006aa4:	7c9fffff 	.word	0x7c9fffff
 8006aa8:	3fe00000 	.word	0x3fe00000
 8006aac:	bff00000 	.word	0xbff00000
 8006ab0:	7fefffff 	.word	0x7fefffff

08006ab4 <_strtod_r>:
 8006ab4:	4b01      	ldr	r3, [pc, #4]	; (8006abc <_strtod_r+0x8>)
 8006ab6:	f7ff b9f7 	b.w	8005ea8 <_strtod_l>
 8006aba:	bf00      	nop
 8006abc:	20000074 	.word	0x20000074

08006ac0 <_strtol_l.constprop.0>:
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac6:	d001      	beq.n	8006acc <_strtol_l.constprop.0+0xc>
 8006ac8:	2b24      	cmp	r3, #36	; 0x24
 8006aca:	d906      	bls.n	8006ada <_strtol_l.constprop.0+0x1a>
 8006acc:	f7fe fed2 	bl	8005874 <__errno>
 8006ad0:	2316      	movs	r3, #22
 8006ad2:	6003      	str	r3, [r0, #0]
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ada:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006bc0 <_strtol_l.constprop.0+0x100>
 8006ade:	460d      	mov	r5, r1
 8006ae0:	462e      	mov	r6, r5
 8006ae2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ae6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006aea:	f017 0708 	ands.w	r7, r7, #8
 8006aee:	d1f7      	bne.n	8006ae0 <_strtol_l.constprop.0+0x20>
 8006af0:	2c2d      	cmp	r4, #45	; 0x2d
 8006af2:	d132      	bne.n	8006b5a <_strtol_l.constprop.0+0x9a>
 8006af4:	782c      	ldrb	r4, [r5, #0]
 8006af6:	2701      	movs	r7, #1
 8006af8:	1cb5      	adds	r5, r6, #2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d05b      	beq.n	8006bb6 <_strtol_l.constprop.0+0xf6>
 8006afe:	2b10      	cmp	r3, #16
 8006b00:	d109      	bne.n	8006b16 <_strtol_l.constprop.0+0x56>
 8006b02:	2c30      	cmp	r4, #48	; 0x30
 8006b04:	d107      	bne.n	8006b16 <_strtol_l.constprop.0+0x56>
 8006b06:	782c      	ldrb	r4, [r5, #0]
 8006b08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006b0c:	2c58      	cmp	r4, #88	; 0x58
 8006b0e:	d14d      	bne.n	8006bac <_strtol_l.constprop.0+0xec>
 8006b10:	786c      	ldrb	r4, [r5, #1]
 8006b12:	2310      	movs	r3, #16
 8006b14:	3502      	adds	r5, #2
 8006b16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006b1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b1e:	f04f 0c00 	mov.w	ip, #0
 8006b22:	fbb8 f9f3 	udiv	r9, r8, r3
 8006b26:	4666      	mov	r6, ip
 8006b28:	fb03 8a19 	mls	sl, r3, r9, r8
 8006b2c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006b30:	f1be 0f09 	cmp.w	lr, #9
 8006b34:	d816      	bhi.n	8006b64 <_strtol_l.constprop.0+0xa4>
 8006b36:	4674      	mov	r4, lr
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	dd24      	ble.n	8006b86 <_strtol_l.constprop.0+0xc6>
 8006b3c:	f1bc 0f00 	cmp.w	ip, #0
 8006b40:	db1e      	blt.n	8006b80 <_strtol_l.constprop.0+0xc0>
 8006b42:	45b1      	cmp	r9, r6
 8006b44:	d31c      	bcc.n	8006b80 <_strtol_l.constprop.0+0xc0>
 8006b46:	d101      	bne.n	8006b4c <_strtol_l.constprop.0+0x8c>
 8006b48:	45a2      	cmp	sl, r4
 8006b4a:	db19      	blt.n	8006b80 <_strtol_l.constprop.0+0xc0>
 8006b4c:	fb06 4603 	mla	r6, r6, r3, r4
 8006b50:	f04f 0c01 	mov.w	ip, #1
 8006b54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b58:	e7e8      	b.n	8006b2c <_strtol_l.constprop.0+0x6c>
 8006b5a:	2c2b      	cmp	r4, #43	; 0x2b
 8006b5c:	bf04      	itt	eq
 8006b5e:	782c      	ldrbeq	r4, [r5, #0]
 8006b60:	1cb5      	addeq	r5, r6, #2
 8006b62:	e7ca      	b.n	8006afa <_strtol_l.constprop.0+0x3a>
 8006b64:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006b68:	f1be 0f19 	cmp.w	lr, #25
 8006b6c:	d801      	bhi.n	8006b72 <_strtol_l.constprop.0+0xb2>
 8006b6e:	3c37      	subs	r4, #55	; 0x37
 8006b70:	e7e2      	b.n	8006b38 <_strtol_l.constprop.0+0x78>
 8006b72:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006b76:	f1be 0f19 	cmp.w	lr, #25
 8006b7a:	d804      	bhi.n	8006b86 <_strtol_l.constprop.0+0xc6>
 8006b7c:	3c57      	subs	r4, #87	; 0x57
 8006b7e:	e7db      	b.n	8006b38 <_strtol_l.constprop.0+0x78>
 8006b80:	f04f 3cff 	mov.w	ip, #4294967295
 8006b84:	e7e6      	b.n	8006b54 <_strtol_l.constprop.0+0x94>
 8006b86:	f1bc 0f00 	cmp.w	ip, #0
 8006b8a:	da05      	bge.n	8006b98 <_strtol_l.constprop.0+0xd8>
 8006b8c:	2322      	movs	r3, #34	; 0x22
 8006b8e:	6003      	str	r3, [r0, #0]
 8006b90:	4646      	mov	r6, r8
 8006b92:	b942      	cbnz	r2, 8006ba6 <_strtol_l.constprop.0+0xe6>
 8006b94:	4630      	mov	r0, r6
 8006b96:	e79e      	b.n	8006ad6 <_strtol_l.constprop.0+0x16>
 8006b98:	b107      	cbz	r7, 8006b9c <_strtol_l.constprop.0+0xdc>
 8006b9a:	4276      	negs	r6, r6
 8006b9c:	2a00      	cmp	r2, #0
 8006b9e:	d0f9      	beq.n	8006b94 <_strtol_l.constprop.0+0xd4>
 8006ba0:	f1bc 0f00 	cmp.w	ip, #0
 8006ba4:	d000      	beq.n	8006ba8 <_strtol_l.constprop.0+0xe8>
 8006ba6:	1e69      	subs	r1, r5, #1
 8006ba8:	6011      	str	r1, [r2, #0]
 8006baa:	e7f3      	b.n	8006b94 <_strtol_l.constprop.0+0xd4>
 8006bac:	2430      	movs	r4, #48	; 0x30
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1b1      	bne.n	8006b16 <_strtol_l.constprop.0+0x56>
 8006bb2:	2308      	movs	r3, #8
 8006bb4:	e7af      	b.n	8006b16 <_strtol_l.constprop.0+0x56>
 8006bb6:	2c30      	cmp	r4, #48	; 0x30
 8006bb8:	d0a5      	beq.n	8006b06 <_strtol_l.constprop.0+0x46>
 8006bba:	230a      	movs	r3, #10
 8006bbc:	e7ab      	b.n	8006b16 <_strtol_l.constprop.0+0x56>
 8006bbe:	bf00      	nop
 8006bc0:	08009959 	.word	0x08009959

08006bc4 <_strtol_r>:
 8006bc4:	f7ff bf7c 	b.w	8006ac0 <_strtol_l.constprop.0>

08006bc8 <_write_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4d07      	ldr	r5, [pc, #28]	; (8006be8 <_write_r+0x20>)
 8006bcc:	4604      	mov	r4, r0
 8006bce:	4608      	mov	r0, r1
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	602a      	str	r2, [r5, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f7fb fe20 	bl	800281c <_write>
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	d102      	bne.n	8006be6 <_write_r+0x1e>
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	b103      	cbz	r3, 8006be6 <_write_r+0x1e>
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	bd38      	pop	{r3, r4, r5, pc}
 8006be8:	20000608 	.word	0x20000608

08006bec <_close_r>:
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4d06      	ldr	r5, [pc, #24]	; (8006c08 <_close_r+0x1c>)
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	602b      	str	r3, [r5, #0]
 8006bf8:	f7fb fe1e 	bl	8002838 <_close>
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	d102      	bne.n	8006c06 <_close_r+0x1a>
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	b103      	cbz	r3, 8006c06 <_close_r+0x1a>
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	bd38      	pop	{r3, r4, r5, pc}
 8006c08:	20000608 	.word	0x20000608

08006c0c <rshift>:
 8006c0c:	6903      	ldr	r3, [r0, #16]
 8006c0e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006c12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c16:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006c1a:	f100 0414 	add.w	r4, r0, #20
 8006c1e:	dd45      	ble.n	8006cac <rshift+0xa0>
 8006c20:	f011 011f 	ands.w	r1, r1, #31
 8006c24:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006c28:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006c2c:	d10c      	bne.n	8006c48 <rshift+0x3c>
 8006c2e:	f100 0710 	add.w	r7, r0, #16
 8006c32:	4629      	mov	r1, r5
 8006c34:	42b1      	cmp	r1, r6
 8006c36:	d334      	bcc.n	8006ca2 <rshift+0x96>
 8006c38:	1a9b      	subs	r3, r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	1eea      	subs	r2, r5, #3
 8006c3e:	4296      	cmp	r6, r2
 8006c40:	bf38      	it	cc
 8006c42:	2300      	movcc	r3, #0
 8006c44:	4423      	add	r3, r4
 8006c46:	e015      	b.n	8006c74 <rshift+0x68>
 8006c48:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006c4c:	f1c1 0820 	rsb	r8, r1, #32
 8006c50:	40cf      	lsrs	r7, r1
 8006c52:	f105 0e04 	add.w	lr, r5, #4
 8006c56:	46a1      	mov	r9, r4
 8006c58:	4576      	cmp	r6, lr
 8006c5a:	46f4      	mov	ip, lr
 8006c5c:	d815      	bhi.n	8006c8a <rshift+0x7e>
 8006c5e:	1a9a      	subs	r2, r3, r2
 8006c60:	0092      	lsls	r2, r2, #2
 8006c62:	3a04      	subs	r2, #4
 8006c64:	3501      	adds	r5, #1
 8006c66:	42ae      	cmp	r6, r5
 8006c68:	bf38      	it	cc
 8006c6a:	2200      	movcc	r2, #0
 8006c6c:	18a3      	adds	r3, r4, r2
 8006c6e:	50a7      	str	r7, [r4, r2]
 8006c70:	b107      	cbz	r7, 8006c74 <rshift+0x68>
 8006c72:	3304      	adds	r3, #4
 8006c74:	1b1a      	subs	r2, r3, r4
 8006c76:	42a3      	cmp	r3, r4
 8006c78:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006c7c:	bf08      	it	eq
 8006c7e:	2300      	moveq	r3, #0
 8006c80:	6102      	str	r2, [r0, #16]
 8006c82:	bf08      	it	eq
 8006c84:	6143      	streq	r3, [r0, #20]
 8006c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c8a:	f8dc c000 	ldr.w	ip, [ip]
 8006c8e:	fa0c fc08 	lsl.w	ip, ip, r8
 8006c92:	ea4c 0707 	orr.w	r7, ip, r7
 8006c96:	f849 7b04 	str.w	r7, [r9], #4
 8006c9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c9e:	40cf      	lsrs	r7, r1
 8006ca0:	e7da      	b.n	8006c58 <rshift+0x4c>
 8006ca2:	f851 cb04 	ldr.w	ip, [r1], #4
 8006ca6:	f847 cf04 	str.w	ip, [r7, #4]!
 8006caa:	e7c3      	b.n	8006c34 <rshift+0x28>
 8006cac:	4623      	mov	r3, r4
 8006cae:	e7e1      	b.n	8006c74 <rshift+0x68>

08006cb0 <__hexdig_fun>:
 8006cb0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006cb4:	2b09      	cmp	r3, #9
 8006cb6:	d802      	bhi.n	8006cbe <__hexdig_fun+0xe>
 8006cb8:	3820      	subs	r0, #32
 8006cba:	b2c0      	uxtb	r0, r0
 8006cbc:	4770      	bx	lr
 8006cbe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006cc2:	2b05      	cmp	r3, #5
 8006cc4:	d801      	bhi.n	8006cca <__hexdig_fun+0x1a>
 8006cc6:	3847      	subs	r0, #71	; 0x47
 8006cc8:	e7f7      	b.n	8006cba <__hexdig_fun+0xa>
 8006cca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006cce:	2b05      	cmp	r3, #5
 8006cd0:	d801      	bhi.n	8006cd6 <__hexdig_fun+0x26>
 8006cd2:	3827      	subs	r0, #39	; 0x27
 8006cd4:	e7f1      	b.n	8006cba <__hexdig_fun+0xa>
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	4770      	bx	lr
	...

08006cdc <__gethex>:
 8006cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce0:	ed2d 8b02 	vpush	{d8}
 8006ce4:	b089      	sub	sp, #36	; 0x24
 8006ce6:	ee08 0a10 	vmov	s16, r0
 8006cea:	9304      	str	r3, [sp, #16]
 8006cec:	4bb4      	ldr	r3, [pc, #720]	; (8006fc0 <__gethex+0x2e4>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	468b      	mov	fp, r1
 8006cf6:	4690      	mov	r8, r2
 8006cf8:	f7f9 fa72 	bl	80001e0 <strlen>
 8006cfc:	9b01      	ldr	r3, [sp, #4]
 8006cfe:	f8db 2000 	ldr.w	r2, [fp]
 8006d02:	4403      	add	r3, r0
 8006d04:	4682      	mov	sl, r0
 8006d06:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006d0a:	9305      	str	r3, [sp, #20]
 8006d0c:	1c93      	adds	r3, r2, #2
 8006d0e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006d12:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006d16:	32fe      	adds	r2, #254	; 0xfe
 8006d18:	18d1      	adds	r1, r2, r3
 8006d1a:	461f      	mov	r7, r3
 8006d1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006d20:	9100      	str	r1, [sp, #0]
 8006d22:	2830      	cmp	r0, #48	; 0x30
 8006d24:	d0f8      	beq.n	8006d18 <__gethex+0x3c>
 8006d26:	f7ff ffc3 	bl	8006cb0 <__hexdig_fun>
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	d13a      	bne.n	8006da6 <__gethex+0xca>
 8006d30:	9901      	ldr	r1, [sp, #4]
 8006d32:	4652      	mov	r2, sl
 8006d34:	4638      	mov	r0, r7
 8006d36:	f7ff f884 	bl	8005e42 <strncmp>
 8006d3a:	4605      	mov	r5, r0
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d168      	bne.n	8006e12 <__gethex+0x136>
 8006d40:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006d44:	eb07 060a 	add.w	r6, r7, sl
 8006d48:	f7ff ffb2 	bl	8006cb0 <__hexdig_fun>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d062      	beq.n	8006e16 <__gethex+0x13a>
 8006d50:	4633      	mov	r3, r6
 8006d52:	7818      	ldrb	r0, [r3, #0]
 8006d54:	2830      	cmp	r0, #48	; 0x30
 8006d56:	461f      	mov	r7, r3
 8006d58:	f103 0301 	add.w	r3, r3, #1
 8006d5c:	d0f9      	beq.n	8006d52 <__gethex+0x76>
 8006d5e:	f7ff ffa7 	bl	8006cb0 <__hexdig_fun>
 8006d62:	2301      	movs	r3, #1
 8006d64:	fab0 f480 	clz	r4, r0
 8006d68:	0964      	lsrs	r4, r4, #5
 8006d6a:	4635      	mov	r5, r6
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	463a      	mov	r2, r7
 8006d70:	4616      	mov	r6, r2
 8006d72:	3201      	adds	r2, #1
 8006d74:	7830      	ldrb	r0, [r6, #0]
 8006d76:	f7ff ff9b 	bl	8006cb0 <__hexdig_fun>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d1f8      	bne.n	8006d70 <__gethex+0x94>
 8006d7e:	9901      	ldr	r1, [sp, #4]
 8006d80:	4652      	mov	r2, sl
 8006d82:	4630      	mov	r0, r6
 8006d84:	f7ff f85d 	bl	8005e42 <strncmp>
 8006d88:	b980      	cbnz	r0, 8006dac <__gethex+0xd0>
 8006d8a:	b94d      	cbnz	r5, 8006da0 <__gethex+0xc4>
 8006d8c:	eb06 050a 	add.w	r5, r6, sl
 8006d90:	462a      	mov	r2, r5
 8006d92:	4616      	mov	r6, r2
 8006d94:	3201      	adds	r2, #1
 8006d96:	7830      	ldrb	r0, [r6, #0]
 8006d98:	f7ff ff8a 	bl	8006cb0 <__hexdig_fun>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d1f8      	bne.n	8006d92 <__gethex+0xb6>
 8006da0:	1bad      	subs	r5, r5, r6
 8006da2:	00ad      	lsls	r5, r5, #2
 8006da4:	e004      	b.n	8006db0 <__gethex+0xd4>
 8006da6:	2400      	movs	r4, #0
 8006da8:	4625      	mov	r5, r4
 8006daa:	e7e0      	b.n	8006d6e <__gethex+0x92>
 8006dac:	2d00      	cmp	r5, #0
 8006dae:	d1f7      	bne.n	8006da0 <__gethex+0xc4>
 8006db0:	7833      	ldrb	r3, [r6, #0]
 8006db2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006db6:	2b50      	cmp	r3, #80	; 0x50
 8006db8:	d13b      	bne.n	8006e32 <__gethex+0x156>
 8006dba:	7873      	ldrb	r3, [r6, #1]
 8006dbc:	2b2b      	cmp	r3, #43	; 0x2b
 8006dbe:	d02c      	beq.n	8006e1a <__gethex+0x13e>
 8006dc0:	2b2d      	cmp	r3, #45	; 0x2d
 8006dc2:	d02e      	beq.n	8006e22 <__gethex+0x146>
 8006dc4:	1c71      	adds	r1, r6, #1
 8006dc6:	f04f 0900 	mov.w	r9, #0
 8006dca:	7808      	ldrb	r0, [r1, #0]
 8006dcc:	f7ff ff70 	bl	8006cb0 <__hexdig_fun>
 8006dd0:	1e43      	subs	r3, r0, #1
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b18      	cmp	r3, #24
 8006dd6:	d82c      	bhi.n	8006e32 <__gethex+0x156>
 8006dd8:	f1a0 0210 	sub.w	r2, r0, #16
 8006ddc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006de0:	f7ff ff66 	bl	8006cb0 <__hexdig_fun>
 8006de4:	1e43      	subs	r3, r0, #1
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b18      	cmp	r3, #24
 8006dea:	d91d      	bls.n	8006e28 <__gethex+0x14c>
 8006dec:	f1b9 0f00 	cmp.w	r9, #0
 8006df0:	d000      	beq.n	8006df4 <__gethex+0x118>
 8006df2:	4252      	negs	r2, r2
 8006df4:	4415      	add	r5, r2
 8006df6:	f8cb 1000 	str.w	r1, [fp]
 8006dfa:	b1e4      	cbz	r4, 8006e36 <__gethex+0x15a>
 8006dfc:	9b00      	ldr	r3, [sp, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bf14      	ite	ne
 8006e02:	2700      	movne	r7, #0
 8006e04:	2706      	moveq	r7, #6
 8006e06:	4638      	mov	r0, r7
 8006e08:	b009      	add	sp, #36	; 0x24
 8006e0a:	ecbd 8b02 	vpop	{d8}
 8006e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e12:	463e      	mov	r6, r7
 8006e14:	4625      	mov	r5, r4
 8006e16:	2401      	movs	r4, #1
 8006e18:	e7ca      	b.n	8006db0 <__gethex+0xd4>
 8006e1a:	f04f 0900 	mov.w	r9, #0
 8006e1e:	1cb1      	adds	r1, r6, #2
 8006e20:	e7d3      	b.n	8006dca <__gethex+0xee>
 8006e22:	f04f 0901 	mov.w	r9, #1
 8006e26:	e7fa      	b.n	8006e1e <__gethex+0x142>
 8006e28:	230a      	movs	r3, #10
 8006e2a:	fb03 0202 	mla	r2, r3, r2, r0
 8006e2e:	3a10      	subs	r2, #16
 8006e30:	e7d4      	b.n	8006ddc <__gethex+0x100>
 8006e32:	4631      	mov	r1, r6
 8006e34:	e7df      	b.n	8006df6 <__gethex+0x11a>
 8006e36:	1bf3      	subs	r3, r6, r7
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	2b07      	cmp	r3, #7
 8006e3e:	dc0b      	bgt.n	8006e58 <__gethex+0x17c>
 8006e40:	ee18 0a10 	vmov	r0, s16
 8006e44:	f000 fa76 	bl	8007334 <_Balloc>
 8006e48:	4604      	mov	r4, r0
 8006e4a:	b940      	cbnz	r0, 8006e5e <__gethex+0x182>
 8006e4c:	4b5d      	ldr	r3, [pc, #372]	; (8006fc4 <__gethex+0x2e8>)
 8006e4e:	4602      	mov	r2, r0
 8006e50:	21de      	movs	r1, #222	; 0xde
 8006e52:	485d      	ldr	r0, [pc, #372]	; (8006fc8 <__gethex+0x2ec>)
 8006e54:	f001 ff0c 	bl	8008c70 <__assert_func>
 8006e58:	3101      	adds	r1, #1
 8006e5a:	105b      	asrs	r3, r3, #1
 8006e5c:	e7ee      	b.n	8006e3c <__gethex+0x160>
 8006e5e:	f100 0914 	add.w	r9, r0, #20
 8006e62:	f04f 0b00 	mov.w	fp, #0
 8006e66:	f1ca 0301 	rsb	r3, sl, #1
 8006e6a:	f8cd 9008 	str.w	r9, [sp, #8]
 8006e6e:	f8cd b000 	str.w	fp, [sp]
 8006e72:	9306      	str	r3, [sp, #24]
 8006e74:	42b7      	cmp	r7, r6
 8006e76:	d340      	bcc.n	8006efa <__gethex+0x21e>
 8006e78:	9802      	ldr	r0, [sp, #8]
 8006e7a:	9b00      	ldr	r3, [sp, #0]
 8006e7c:	f840 3b04 	str.w	r3, [r0], #4
 8006e80:	eba0 0009 	sub.w	r0, r0, r9
 8006e84:	1080      	asrs	r0, r0, #2
 8006e86:	0146      	lsls	r6, r0, #5
 8006e88:	6120      	str	r0, [r4, #16]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fb44 	bl	8007518 <__hi0bits>
 8006e90:	1a30      	subs	r0, r6, r0
 8006e92:	f8d8 6000 	ldr.w	r6, [r8]
 8006e96:	42b0      	cmp	r0, r6
 8006e98:	dd63      	ble.n	8006f62 <__gethex+0x286>
 8006e9a:	1b87      	subs	r7, r0, r6
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f000 fee8 	bl	8007c74 <__any_on>
 8006ea4:	4682      	mov	sl, r0
 8006ea6:	b1a8      	cbz	r0, 8006ed4 <__gethex+0x1f8>
 8006ea8:	1e7b      	subs	r3, r7, #1
 8006eaa:	1159      	asrs	r1, r3, #5
 8006eac:	f003 021f 	and.w	r2, r3, #31
 8006eb0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006eb4:	f04f 0a01 	mov.w	sl, #1
 8006eb8:	fa0a f202 	lsl.w	r2, sl, r2
 8006ebc:	420a      	tst	r2, r1
 8006ebe:	d009      	beq.n	8006ed4 <__gethex+0x1f8>
 8006ec0:	4553      	cmp	r3, sl
 8006ec2:	dd05      	ble.n	8006ed0 <__gethex+0x1f4>
 8006ec4:	1eb9      	subs	r1, r7, #2
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f000 fed4 	bl	8007c74 <__any_on>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d145      	bne.n	8006f5c <__gethex+0x280>
 8006ed0:	f04f 0a02 	mov.w	sl, #2
 8006ed4:	4639      	mov	r1, r7
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f7ff fe98 	bl	8006c0c <rshift>
 8006edc:	443d      	add	r5, r7
 8006ede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ee2:	42ab      	cmp	r3, r5
 8006ee4:	da4c      	bge.n	8006f80 <__gethex+0x2a4>
 8006ee6:	ee18 0a10 	vmov	r0, s16
 8006eea:	4621      	mov	r1, r4
 8006eec:	f000 fa62 	bl	80073b4 <_Bfree>
 8006ef0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	27a3      	movs	r7, #163	; 0xa3
 8006ef8:	e785      	b.n	8006e06 <__gethex+0x12a>
 8006efa:	1e73      	subs	r3, r6, #1
 8006efc:	9a05      	ldr	r2, [sp, #20]
 8006efe:	9303      	str	r3, [sp, #12]
 8006f00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d019      	beq.n	8006f3c <__gethex+0x260>
 8006f08:	f1bb 0f20 	cmp.w	fp, #32
 8006f0c:	d107      	bne.n	8006f1e <__gethex+0x242>
 8006f0e:	9b02      	ldr	r3, [sp, #8]
 8006f10:	9a00      	ldr	r2, [sp, #0]
 8006f12:	f843 2b04 	str.w	r2, [r3], #4
 8006f16:	9302      	str	r3, [sp, #8]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	469b      	mov	fp, r3
 8006f1e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006f22:	f7ff fec5 	bl	8006cb0 <__hexdig_fun>
 8006f26:	9b00      	ldr	r3, [sp, #0]
 8006f28:	f000 000f 	and.w	r0, r0, #15
 8006f2c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006f30:	4303      	orrs	r3, r0
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	f10b 0b04 	add.w	fp, fp, #4
 8006f38:	9b03      	ldr	r3, [sp, #12]
 8006f3a:	e00d      	b.n	8006f58 <__gethex+0x27c>
 8006f3c:	9b03      	ldr	r3, [sp, #12]
 8006f3e:	9a06      	ldr	r2, [sp, #24]
 8006f40:	4413      	add	r3, r2
 8006f42:	42bb      	cmp	r3, r7
 8006f44:	d3e0      	bcc.n	8006f08 <__gethex+0x22c>
 8006f46:	4618      	mov	r0, r3
 8006f48:	9901      	ldr	r1, [sp, #4]
 8006f4a:	9307      	str	r3, [sp, #28]
 8006f4c:	4652      	mov	r2, sl
 8006f4e:	f7fe ff78 	bl	8005e42 <strncmp>
 8006f52:	9b07      	ldr	r3, [sp, #28]
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d1d7      	bne.n	8006f08 <__gethex+0x22c>
 8006f58:	461e      	mov	r6, r3
 8006f5a:	e78b      	b.n	8006e74 <__gethex+0x198>
 8006f5c:	f04f 0a03 	mov.w	sl, #3
 8006f60:	e7b8      	b.n	8006ed4 <__gethex+0x1f8>
 8006f62:	da0a      	bge.n	8006f7a <__gethex+0x29e>
 8006f64:	1a37      	subs	r7, r6, r0
 8006f66:	4621      	mov	r1, r4
 8006f68:	ee18 0a10 	vmov	r0, s16
 8006f6c:	463a      	mov	r2, r7
 8006f6e:	f000 fc3d 	bl	80077ec <__lshift>
 8006f72:	1bed      	subs	r5, r5, r7
 8006f74:	4604      	mov	r4, r0
 8006f76:	f100 0914 	add.w	r9, r0, #20
 8006f7a:	f04f 0a00 	mov.w	sl, #0
 8006f7e:	e7ae      	b.n	8006ede <__gethex+0x202>
 8006f80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006f84:	42a8      	cmp	r0, r5
 8006f86:	dd72      	ble.n	800706e <__gethex+0x392>
 8006f88:	1b45      	subs	r5, r0, r5
 8006f8a:	42ae      	cmp	r6, r5
 8006f8c:	dc36      	bgt.n	8006ffc <__gethex+0x320>
 8006f8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d02a      	beq.n	8006fec <__gethex+0x310>
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d02c      	beq.n	8006ff4 <__gethex+0x318>
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d11c      	bne.n	8006fd8 <__gethex+0x2fc>
 8006f9e:	42ae      	cmp	r6, r5
 8006fa0:	d11a      	bne.n	8006fd8 <__gethex+0x2fc>
 8006fa2:	2e01      	cmp	r6, #1
 8006fa4:	d112      	bne.n	8006fcc <__gethex+0x2f0>
 8006fa6:	9a04      	ldr	r2, [sp, #16]
 8006fa8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	2301      	movs	r3, #1
 8006fb0:	6123      	str	r3, [r4, #16]
 8006fb2:	f8c9 3000 	str.w	r3, [r9]
 8006fb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006fb8:	2762      	movs	r7, #98	; 0x62
 8006fba:	601c      	str	r4, [r3, #0]
 8006fbc:	e723      	b.n	8006e06 <__gethex+0x12a>
 8006fbe:	bf00      	nop
 8006fc0:	08009ad0 	.word	0x08009ad0
 8006fc4:	08009a59 	.word	0x08009a59
 8006fc8:	08009a6a 	.word	0x08009a6a
 8006fcc:	1e71      	subs	r1, r6, #1
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f000 fe50 	bl	8007c74 <__any_on>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d1e6      	bne.n	8006fa6 <__gethex+0x2ca>
 8006fd8:	ee18 0a10 	vmov	r0, s16
 8006fdc:	4621      	mov	r1, r4
 8006fde:	f000 f9e9 	bl	80073b4 <_Bfree>
 8006fe2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	2750      	movs	r7, #80	; 0x50
 8006fea:	e70c      	b.n	8006e06 <__gethex+0x12a>
 8006fec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1f2      	bne.n	8006fd8 <__gethex+0x2fc>
 8006ff2:	e7d8      	b.n	8006fa6 <__gethex+0x2ca>
 8006ff4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1d5      	bne.n	8006fa6 <__gethex+0x2ca>
 8006ffa:	e7ed      	b.n	8006fd8 <__gethex+0x2fc>
 8006ffc:	1e6f      	subs	r7, r5, #1
 8006ffe:	f1ba 0f00 	cmp.w	sl, #0
 8007002:	d131      	bne.n	8007068 <__gethex+0x38c>
 8007004:	b127      	cbz	r7, 8007010 <__gethex+0x334>
 8007006:	4639      	mov	r1, r7
 8007008:	4620      	mov	r0, r4
 800700a:	f000 fe33 	bl	8007c74 <__any_on>
 800700e:	4682      	mov	sl, r0
 8007010:	117b      	asrs	r3, r7, #5
 8007012:	2101      	movs	r1, #1
 8007014:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007018:	f007 071f 	and.w	r7, r7, #31
 800701c:	fa01 f707 	lsl.w	r7, r1, r7
 8007020:	421f      	tst	r7, r3
 8007022:	4629      	mov	r1, r5
 8007024:	4620      	mov	r0, r4
 8007026:	bf18      	it	ne
 8007028:	f04a 0a02 	orrne.w	sl, sl, #2
 800702c:	1b76      	subs	r6, r6, r5
 800702e:	f7ff fded 	bl	8006c0c <rshift>
 8007032:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007036:	2702      	movs	r7, #2
 8007038:	f1ba 0f00 	cmp.w	sl, #0
 800703c:	d048      	beq.n	80070d0 <__gethex+0x3f4>
 800703e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007042:	2b02      	cmp	r3, #2
 8007044:	d015      	beq.n	8007072 <__gethex+0x396>
 8007046:	2b03      	cmp	r3, #3
 8007048:	d017      	beq.n	800707a <__gethex+0x39e>
 800704a:	2b01      	cmp	r3, #1
 800704c:	d109      	bne.n	8007062 <__gethex+0x386>
 800704e:	f01a 0f02 	tst.w	sl, #2
 8007052:	d006      	beq.n	8007062 <__gethex+0x386>
 8007054:	f8d9 0000 	ldr.w	r0, [r9]
 8007058:	ea4a 0a00 	orr.w	sl, sl, r0
 800705c:	f01a 0f01 	tst.w	sl, #1
 8007060:	d10e      	bne.n	8007080 <__gethex+0x3a4>
 8007062:	f047 0710 	orr.w	r7, r7, #16
 8007066:	e033      	b.n	80070d0 <__gethex+0x3f4>
 8007068:	f04f 0a01 	mov.w	sl, #1
 800706c:	e7d0      	b.n	8007010 <__gethex+0x334>
 800706e:	2701      	movs	r7, #1
 8007070:	e7e2      	b.n	8007038 <__gethex+0x35c>
 8007072:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007074:	f1c3 0301 	rsb	r3, r3, #1
 8007078:	9315      	str	r3, [sp, #84]	; 0x54
 800707a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800707c:	2b00      	cmp	r3, #0
 800707e:	d0f0      	beq.n	8007062 <__gethex+0x386>
 8007080:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007084:	f104 0314 	add.w	r3, r4, #20
 8007088:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800708c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007090:	f04f 0c00 	mov.w	ip, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f853 2b04 	ldr.w	r2, [r3], #4
 800709a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800709e:	d01c      	beq.n	80070da <__gethex+0x3fe>
 80070a0:	3201      	adds	r2, #1
 80070a2:	6002      	str	r2, [r0, #0]
 80070a4:	2f02      	cmp	r7, #2
 80070a6:	f104 0314 	add.w	r3, r4, #20
 80070aa:	d13f      	bne.n	800712c <__gethex+0x450>
 80070ac:	f8d8 2000 	ldr.w	r2, [r8]
 80070b0:	3a01      	subs	r2, #1
 80070b2:	42b2      	cmp	r2, r6
 80070b4:	d10a      	bne.n	80070cc <__gethex+0x3f0>
 80070b6:	1171      	asrs	r1, r6, #5
 80070b8:	2201      	movs	r2, #1
 80070ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070be:	f006 061f 	and.w	r6, r6, #31
 80070c2:	fa02 f606 	lsl.w	r6, r2, r6
 80070c6:	421e      	tst	r6, r3
 80070c8:	bf18      	it	ne
 80070ca:	4617      	movne	r7, r2
 80070cc:	f047 0720 	orr.w	r7, r7, #32
 80070d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070d2:	601c      	str	r4, [r3, #0]
 80070d4:	9b04      	ldr	r3, [sp, #16]
 80070d6:	601d      	str	r5, [r3, #0]
 80070d8:	e695      	b.n	8006e06 <__gethex+0x12a>
 80070da:	4299      	cmp	r1, r3
 80070dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80070e0:	d8d8      	bhi.n	8007094 <__gethex+0x3b8>
 80070e2:	68a3      	ldr	r3, [r4, #8]
 80070e4:	459b      	cmp	fp, r3
 80070e6:	db19      	blt.n	800711c <__gethex+0x440>
 80070e8:	6861      	ldr	r1, [r4, #4]
 80070ea:	ee18 0a10 	vmov	r0, s16
 80070ee:	3101      	adds	r1, #1
 80070f0:	f000 f920 	bl	8007334 <_Balloc>
 80070f4:	4681      	mov	r9, r0
 80070f6:	b918      	cbnz	r0, 8007100 <__gethex+0x424>
 80070f8:	4b1a      	ldr	r3, [pc, #104]	; (8007164 <__gethex+0x488>)
 80070fa:	4602      	mov	r2, r0
 80070fc:	2184      	movs	r1, #132	; 0x84
 80070fe:	e6a8      	b.n	8006e52 <__gethex+0x176>
 8007100:	6922      	ldr	r2, [r4, #16]
 8007102:	3202      	adds	r2, #2
 8007104:	f104 010c 	add.w	r1, r4, #12
 8007108:	0092      	lsls	r2, r2, #2
 800710a:	300c      	adds	r0, #12
 800710c:	f7fe fbdc 	bl	80058c8 <memcpy>
 8007110:	4621      	mov	r1, r4
 8007112:	ee18 0a10 	vmov	r0, s16
 8007116:	f000 f94d 	bl	80073b4 <_Bfree>
 800711a:	464c      	mov	r4, r9
 800711c:	6923      	ldr	r3, [r4, #16]
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007124:	6122      	str	r2, [r4, #16]
 8007126:	2201      	movs	r2, #1
 8007128:	615a      	str	r2, [r3, #20]
 800712a:	e7bb      	b.n	80070a4 <__gethex+0x3c8>
 800712c:	6922      	ldr	r2, [r4, #16]
 800712e:	455a      	cmp	r2, fp
 8007130:	dd0b      	ble.n	800714a <__gethex+0x46e>
 8007132:	2101      	movs	r1, #1
 8007134:	4620      	mov	r0, r4
 8007136:	f7ff fd69 	bl	8006c0c <rshift>
 800713a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800713e:	3501      	adds	r5, #1
 8007140:	42ab      	cmp	r3, r5
 8007142:	f6ff aed0 	blt.w	8006ee6 <__gethex+0x20a>
 8007146:	2701      	movs	r7, #1
 8007148:	e7c0      	b.n	80070cc <__gethex+0x3f0>
 800714a:	f016 061f 	ands.w	r6, r6, #31
 800714e:	d0fa      	beq.n	8007146 <__gethex+0x46a>
 8007150:	4453      	add	r3, sl
 8007152:	f1c6 0620 	rsb	r6, r6, #32
 8007156:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800715a:	f000 f9dd 	bl	8007518 <__hi0bits>
 800715e:	42b0      	cmp	r0, r6
 8007160:	dbe7      	blt.n	8007132 <__gethex+0x456>
 8007162:	e7f0      	b.n	8007146 <__gethex+0x46a>
 8007164:	08009a59 	.word	0x08009a59

08007168 <L_shift>:
 8007168:	f1c2 0208 	rsb	r2, r2, #8
 800716c:	0092      	lsls	r2, r2, #2
 800716e:	b570      	push	{r4, r5, r6, lr}
 8007170:	f1c2 0620 	rsb	r6, r2, #32
 8007174:	6843      	ldr	r3, [r0, #4]
 8007176:	6804      	ldr	r4, [r0, #0]
 8007178:	fa03 f506 	lsl.w	r5, r3, r6
 800717c:	432c      	orrs	r4, r5
 800717e:	40d3      	lsrs	r3, r2
 8007180:	6004      	str	r4, [r0, #0]
 8007182:	f840 3f04 	str.w	r3, [r0, #4]!
 8007186:	4288      	cmp	r0, r1
 8007188:	d3f4      	bcc.n	8007174 <L_shift+0xc>
 800718a:	bd70      	pop	{r4, r5, r6, pc}

0800718c <__match>:
 800718c:	b530      	push	{r4, r5, lr}
 800718e:	6803      	ldr	r3, [r0, #0]
 8007190:	3301      	adds	r3, #1
 8007192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007196:	b914      	cbnz	r4, 800719e <__match+0x12>
 8007198:	6003      	str	r3, [r0, #0]
 800719a:	2001      	movs	r0, #1
 800719c:	bd30      	pop	{r4, r5, pc}
 800719e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80071a6:	2d19      	cmp	r5, #25
 80071a8:	bf98      	it	ls
 80071aa:	3220      	addls	r2, #32
 80071ac:	42a2      	cmp	r2, r4
 80071ae:	d0f0      	beq.n	8007192 <__match+0x6>
 80071b0:	2000      	movs	r0, #0
 80071b2:	e7f3      	b.n	800719c <__match+0x10>

080071b4 <__hexnan>:
 80071b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b8:	680b      	ldr	r3, [r1, #0]
 80071ba:	115e      	asrs	r6, r3, #5
 80071bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80071c0:	f013 031f 	ands.w	r3, r3, #31
 80071c4:	b087      	sub	sp, #28
 80071c6:	bf18      	it	ne
 80071c8:	3604      	addne	r6, #4
 80071ca:	2500      	movs	r5, #0
 80071cc:	1f37      	subs	r7, r6, #4
 80071ce:	4690      	mov	r8, r2
 80071d0:	6802      	ldr	r2, [r0, #0]
 80071d2:	9301      	str	r3, [sp, #4]
 80071d4:	4682      	mov	sl, r0
 80071d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80071da:	46b9      	mov	r9, r7
 80071dc:	463c      	mov	r4, r7
 80071de:	9502      	str	r5, [sp, #8]
 80071e0:	46ab      	mov	fp, r5
 80071e2:	7851      	ldrb	r1, [r2, #1]
 80071e4:	1c53      	adds	r3, r2, #1
 80071e6:	9303      	str	r3, [sp, #12]
 80071e8:	b341      	cbz	r1, 800723c <__hexnan+0x88>
 80071ea:	4608      	mov	r0, r1
 80071ec:	9205      	str	r2, [sp, #20]
 80071ee:	9104      	str	r1, [sp, #16]
 80071f0:	f7ff fd5e 	bl	8006cb0 <__hexdig_fun>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d14f      	bne.n	8007298 <__hexnan+0xe4>
 80071f8:	9904      	ldr	r1, [sp, #16]
 80071fa:	9a05      	ldr	r2, [sp, #20]
 80071fc:	2920      	cmp	r1, #32
 80071fe:	d818      	bhi.n	8007232 <__hexnan+0x7e>
 8007200:	9b02      	ldr	r3, [sp, #8]
 8007202:	459b      	cmp	fp, r3
 8007204:	dd13      	ble.n	800722e <__hexnan+0x7a>
 8007206:	454c      	cmp	r4, r9
 8007208:	d206      	bcs.n	8007218 <__hexnan+0x64>
 800720a:	2d07      	cmp	r5, #7
 800720c:	dc04      	bgt.n	8007218 <__hexnan+0x64>
 800720e:	462a      	mov	r2, r5
 8007210:	4649      	mov	r1, r9
 8007212:	4620      	mov	r0, r4
 8007214:	f7ff ffa8 	bl	8007168 <L_shift>
 8007218:	4544      	cmp	r4, r8
 800721a:	d950      	bls.n	80072be <__hexnan+0x10a>
 800721c:	2300      	movs	r3, #0
 800721e:	f1a4 0904 	sub.w	r9, r4, #4
 8007222:	f844 3c04 	str.w	r3, [r4, #-4]
 8007226:	f8cd b008 	str.w	fp, [sp, #8]
 800722a:	464c      	mov	r4, r9
 800722c:	461d      	mov	r5, r3
 800722e:	9a03      	ldr	r2, [sp, #12]
 8007230:	e7d7      	b.n	80071e2 <__hexnan+0x2e>
 8007232:	2929      	cmp	r1, #41	; 0x29
 8007234:	d156      	bne.n	80072e4 <__hexnan+0x130>
 8007236:	3202      	adds	r2, #2
 8007238:	f8ca 2000 	str.w	r2, [sl]
 800723c:	f1bb 0f00 	cmp.w	fp, #0
 8007240:	d050      	beq.n	80072e4 <__hexnan+0x130>
 8007242:	454c      	cmp	r4, r9
 8007244:	d206      	bcs.n	8007254 <__hexnan+0xa0>
 8007246:	2d07      	cmp	r5, #7
 8007248:	dc04      	bgt.n	8007254 <__hexnan+0xa0>
 800724a:	462a      	mov	r2, r5
 800724c:	4649      	mov	r1, r9
 800724e:	4620      	mov	r0, r4
 8007250:	f7ff ff8a 	bl	8007168 <L_shift>
 8007254:	4544      	cmp	r4, r8
 8007256:	d934      	bls.n	80072c2 <__hexnan+0x10e>
 8007258:	f1a8 0204 	sub.w	r2, r8, #4
 800725c:	4623      	mov	r3, r4
 800725e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007262:	f842 1f04 	str.w	r1, [r2, #4]!
 8007266:	429f      	cmp	r7, r3
 8007268:	d2f9      	bcs.n	800725e <__hexnan+0xaa>
 800726a:	1b3b      	subs	r3, r7, r4
 800726c:	f023 0303 	bic.w	r3, r3, #3
 8007270:	3304      	adds	r3, #4
 8007272:	3401      	adds	r4, #1
 8007274:	3e03      	subs	r6, #3
 8007276:	42b4      	cmp	r4, r6
 8007278:	bf88      	it	hi
 800727a:	2304      	movhi	r3, #4
 800727c:	4443      	add	r3, r8
 800727e:	2200      	movs	r2, #0
 8007280:	f843 2b04 	str.w	r2, [r3], #4
 8007284:	429f      	cmp	r7, r3
 8007286:	d2fb      	bcs.n	8007280 <__hexnan+0xcc>
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	b91b      	cbnz	r3, 8007294 <__hexnan+0xe0>
 800728c:	4547      	cmp	r7, r8
 800728e:	d127      	bne.n	80072e0 <__hexnan+0x12c>
 8007290:	2301      	movs	r3, #1
 8007292:	603b      	str	r3, [r7, #0]
 8007294:	2005      	movs	r0, #5
 8007296:	e026      	b.n	80072e6 <__hexnan+0x132>
 8007298:	3501      	adds	r5, #1
 800729a:	2d08      	cmp	r5, #8
 800729c:	f10b 0b01 	add.w	fp, fp, #1
 80072a0:	dd06      	ble.n	80072b0 <__hexnan+0xfc>
 80072a2:	4544      	cmp	r4, r8
 80072a4:	d9c3      	bls.n	800722e <__hexnan+0x7a>
 80072a6:	2300      	movs	r3, #0
 80072a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80072ac:	2501      	movs	r5, #1
 80072ae:	3c04      	subs	r4, #4
 80072b0:	6822      	ldr	r2, [r4, #0]
 80072b2:	f000 000f 	and.w	r0, r0, #15
 80072b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80072ba:	6022      	str	r2, [r4, #0]
 80072bc:	e7b7      	b.n	800722e <__hexnan+0x7a>
 80072be:	2508      	movs	r5, #8
 80072c0:	e7b5      	b.n	800722e <__hexnan+0x7a>
 80072c2:	9b01      	ldr	r3, [sp, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0df      	beq.n	8007288 <__hexnan+0xd4>
 80072c8:	f04f 32ff 	mov.w	r2, #4294967295
 80072cc:	f1c3 0320 	rsb	r3, r3, #32
 80072d0:	fa22 f303 	lsr.w	r3, r2, r3
 80072d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80072d8:	401a      	ands	r2, r3
 80072da:	f846 2c04 	str.w	r2, [r6, #-4]
 80072de:	e7d3      	b.n	8007288 <__hexnan+0xd4>
 80072e0:	3f04      	subs	r7, #4
 80072e2:	e7d1      	b.n	8007288 <__hexnan+0xd4>
 80072e4:	2004      	movs	r0, #4
 80072e6:	b007      	add	sp, #28
 80072e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080072ec <_lseek_r>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4d07      	ldr	r5, [pc, #28]	; (800730c <_lseek_r+0x20>)
 80072f0:	4604      	mov	r4, r0
 80072f2:	4608      	mov	r0, r1
 80072f4:	4611      	mov	r1, r2
 80072f6:	2200      	movs	r2, #0
 80072f8:	602a      	str	r2, [r5, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	f7fb faa8 	bl	8002850 <_lseek>
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	d102      	bne.n	800730a <_lseek_r+0x1e>
 8007304:	682b      	ldr	r3, [r5, #0]
 8007306:	b103      	cbz	r3, 800730a <_lseek_r+0x1e>
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	20000608 	.word	0x20000608

08007310 <__ascii_mbtowc>:
 8007310:	b082      	sub	sp, #8
 8007312:	b901      	cbnz	r1, 8007316 <__ascii_mbtowc+0x6>
 8007314:	a901      	add	r1, sp, #4
 8007316:	b142      	cbz	r2, 800732a <__ascii_mbtowc+0x1a>
 8007318:	b14b      	cbz	r3, 800732e <__ascii_mbtowc+0x1e>
 800731a:	7813      	ldrb	r3, [r2, #0]
 800731c:	600b      	str	r3, [r1, #0]
 800731e:	7812      	ldrb	r2, [r2, #0]
 8007320:	1e10      	subs	r0, r2, #0
 8007322:	bf18      	it	ne
 8007324:	2001      	movne	r0, #1
 8007326:	b002      	add	sp, #8
 8007328:	4770      	bx	lr
 800732a:	4610      	mov	r0, r2
 800732c:	e7fb      	b.n	8007326 <__ascii_mbtowc+0x16>
 800732e:	f06f 0001 	mvn.w	r0, #1
 8007332:	e7f8      	b.n	8007326 <__ascii_mbtowc+0x16>

08007334 <_Balloc>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007338:	4604      	mov	r4, r0
 800733a:	460d      	mov	r5, r1
 800733c:	b976      	cbnz	r6, 800735c <_Balloc+0x28>
 800733e:	2010      	movs	r0, #16
 8007340:	f001 fe80 	bl	8009044 <malloc>
 8007344:	4602      	mov	r2, r0
 8007346:	6260      	str	r0, [r4, #36]	; 0x24
 8007348:	b920      	cbnz	r0, 8007354 <_Balloc+0x20>
 800734a:	4b18      	ldr	r3, [pc, #96]	; (80073ac <_Balloc+0x78>)
 800734c:	4818      	ldr	r0, [pc, #96]	; (80073b0 <_Balloc+0x7c>)
 800734e:	2166      	movs	r1, #102	; 0x66
 8007350:	f001 fc8e 	bl	8008c70 <__assert_func>
 8007354:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007358:	6006      	str	r6, [r0, #0]
 800735a:	60c6      	str	r6, [r0, #12]
 800735c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800735e:	68f3      	ldr	r3, [r6, #12]
 8007360:	b183      	cbz	r3, 8007384 <_Balloc+0x50>
 8007362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800736a:	b9b8      	cbnz	r0, 800739c <_Balloc+0x68>
 800736c:	2101      	movs	r1, #1
 800736e:	fa01 f605 	lsl.w	r6, r1, r5
 8007372:	1d72      	adds	r2, r6, #5
 8007374:	0092      	lsls	r2, r2, #2
 8007376:	4620      	mov	r0, r4
 8007378:	f000 fc9d 	bl	8007cb6 <_calloc_r>
 800737c:	b160      	cbz	r0, 8007398 <_Balloc+0x64>
 800737e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007382:	e00e      	b.n	80073a2 <_Balloc+0x6e>
 8007384:	2221      	movs	r2, #33	; 0x21
 8007386:	2104      	movs	r1, #4
 8007388:	4620      	mov	r0, r4
 800738a:	f000 fc94 	bl	8007cb6 <_calloc_r>
 800738e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007390:	60f0      	str	r0, [r6, #12]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1e4      	bne.n	8007362 <_Balloc+0x2e>
 8007398:	2000      	movs	r0, #0
 800739a:	bd70      	pop	{r4, r5, r6, pc}
 800739c:	6802      	ldr	r2, [r0, #0]
 800739e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073a2:	2300      	movs	r3, #0
 80073a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073a8:	e7f7      	b.n	800739a <_Balloc+0x66>
 80073aa:	bf00      	nop
 80073ac:	08009ae4 	.word	0x08009ae4
 80073b0:	08009afb 	.word	0x08009afb

080073b4 <_Bfree>:
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073b8:	4605      	mov	r5, r0
 80073ba:	460c      	mov	r4, r1
 80073bc:	b976      	cbnz	r6, 80073dc <_Bfree+0x28>
 80073be:	2010      	movs	r0, #16
 80073c0:	f001 fe40 	bl	8009044 <malloc>
 80073c4:	4602      	mov	r2, r0
 80073c6:	6268      	str	r0, [r5, #36]	; 0x24
 80073c8:	b920      	cbnz	r0, 80073d4 <_Bfree+0x20>
 80073ca:	4b09      	ldr	r3, [pc, #36]	; (80073f0 <_Bfree+0x3c>)
 80073cc:	4809      	ldr	r0, [pc, #36]	; (80073f4 <_Bfree+0x40>)
 80073ce:	218a      	movs	r1, #138	; 0x8a
 80073d0:	f001 fc4e 	bl	8008c70 <__assert_func>
 80073d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073d8:	6006      	str	r6, [r0, #0]
 80073da:	60c6      	str	r6, [r0, #12]
 80073dc:	b13c      	cbz	r4, 80073ee <_Bfree+0x3a>
 80073de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073e0:	6862      	ldr	r2, [r4, #4]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073e8:	6021      	str	r1, [r4, #0]
 80073ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073ee:	bd70      	pop	{r4, r5, r6, pc}
 80073f0:	08009ae4 	.word	0x08009ae4
 80073f4:	08009afb 	.word	0x08009afb

080073f8 <__multadd>:
 80073f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073fc:	690d      	ldr	r5, [r1, #16]
 80073fe:	4607      	mov	r7, r0
 8007400:	460c      	mov	r4, r1
 8007402:	461e      	mov	r6, r3
 8007404:	f101 0c14 	add.w	ip, r1, #20
 8007408:	2000      	movs	r0, #0
 800740a:	f8dc 3000 	ldr.w	r3, [ip]
 800740e:	b299      	uxth	r1, r3
 8007410:	fb02 6101 	mla	r1, r2, r1, r6
 8007414:	0c1e      	lsrs	r6, r3, #16
 8007416:	0c0b      	lsrs	r3, r1, #16
 8007418:	fb02 3306 	mla	r3, r2, r6, r3
 800741c:	b289      	uxth	r1, r1
 800741e:	3001      	adds	r0, #1
 8007420:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007424:	4285      	cmp	r5, r0
 8007426:	f84c 1b04 	str.w	r1, [ip], #4
 800742a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800742e:	dcec      	bgt.n	800740a <__multadd+0x12>
 8007430:	b30e      	cbz	r6, 8007476 <__multadd+0x7e>
 8007432:	68a3      	ldr	r3, [r4, #8]
 8007434:	42ab      	cmp	r3, r5
 8007436:	dc19      	bgt.n	800746c <__multadd+0x74>
 8007438:	6861      	ldr	r1, [r4, #4]
 800743a:	4638      	mov	r0, r7
 800743c:	3101      	adds	r1, #1
 800743e:	f7ff ff79 	bl	8007334 <_Balloc>
 8007442:	4680      	mov	r8, r0
 8007444:	b928      	cbnz	r0, 8007452 <__multadd+0x5a>
 8007446:	4602      	mov	r2, r0
 8007448:	4b0c      	ldr	r3, [pc, #48]	; (800747c <__multadd+0x84>)
 800744a:	480d      	ldr	r0, [pc, #52]	; (8007480 <__multadd+0x88>)
 800744c:	21b5      	movs	r1, #181	; 0xb5
 800744e:	f001 fc0f 	bl	8008c70 <__assert_func>
 8007452:	6922      	ldr	r2, [r4, #16]
 8007454:	3202      	adds	r2, #2
 8007456:	f104 010c 	add.w	r1, r4, #12
 800745a:	0092      	lsls	r2, r2, #2
 800745c:	300c      	adds	r0, #12
 800745e:	f7fe fa33 	bl	80058c8 <memcpy>
 8007462:	4621      	mov	r1, r4
 8007464:	4638      	mov	r0, r7
 8007466:	f7ff ffa5 	bl	80073b4 <_Bfree>
 800746a:	4644      	mov	r4, r8
 800746c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007470:	3501      	adds	r5, #1
 8007472:	615e      	str	r6, [r3, #20]
 8007474:	6125      	str	r5, [r4, #16]
 8007476:	4620      	mov	r0, r4
 8007478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800747c:	08009a59 	.word	0x08009a59
 8007480:	08009afb 	.word	0x08009afb

08007484 <__s2b>:
 8007484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007488:	460c      	mov	r4, r1
 800748a:	4615      	mov	r5, r2
 800748c:	461f      	mov	r7, r3
 800748e:	2209      	movs	r2, #9
 8007490:	3308      	adds	r3, #8
 8007492:	4606      	mov	r6, r0
 8007494:	fb93 f3f2 	sdiv	r3, r3, r2
 8007498:	2100      	movs	r1, #0
 800749a:	2201      	movs	r2, #1
 800749c:	429a      	cmp	r2, r3
 800749e:	db09      	blt.n	80074b4 <__s2b+0x30>
 80074a0:	4630      	mov	r0, r6
 80074a2:	f7ff ff47 	bl	8007334 <_Balloc>
 80074a6:	b940      	cbnz	r0, 80074ba <__s2b+0x36>
 80074a8:	4602      	mov	r2, r0
 80074aa:	4b19      	ldr	r3, [pc, #100]	; (8007510 <__s2b+0x8c>)
 80074ac:	4819      	ldr	r0, [pc, #100]	; (8007514 <__s2b+0x90>)
 80074ae:	21ce      	movs	r1, #206	; 0xce
 80074b0:	f001 fbde 	bl	8008c70 <__assert_func>
 80074b4:	0052      	lsls	r2, r2, #1
 80074b6:	3101      	adds	r1, #1
 80074b8:	e7f0      	b.n	800749c <__s2b+0x18>
 80074ba:	9b08      	ldr	r3, [sp, #32]
 80074bc:	6143      	str	r3, [r0, #20]
 80074be:	2d09      	cmp	r5, #9
 80074c0:	f04f 0301 	mov.w	r3, #1
 80074c4:	6103      	str	r3, [r0, #16]
 80074c6:	dd16      	ble.n	80074f6 <__s2b+0x72>
 80074c8:	f104 0909 	add.w	r9, r4, #9
 80074cc:	46c8      	mov	r8, r9
 80074ce:	442c      	add	r4, r5
 80074d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80074d4:	4601      	mov	r1, r0
 80074d6:	3b30      	subs	r3, #48	; 0x30
 80074d8:	220a      	movs	r2, #10
 80074da:	4630      	mov	r0, r6
 80074dc:	f7ff ff8c 	bl	80073f8 <__multadd>
 80074e0:	45a0      	cmp	r8, r4
 80074e2:	d1f5      	bne.n	80074d0 <__s2b+0x4c>
 80074e4:	f1a5 0408 	sub.w	r4, r5, #8
 80074e8:	444c      	add	r4, r9
 80074ea:	1b2d      	subs	r5, r5, r4
 80074ec:	1963      	adds	r3, r4, r5
 80074ee:	42bb      	cmp	r3, r7
 80074f0:	db04      	blt.n	80074fc <__s2b+0x78>
 80074f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074f6:	340a      	adds	r4, #10
 80074f8:	2509      	movs	r5, #9
 80074fa:	e7f6      	b.n	80074ea <__s2b+0x66>
 80074fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007500:	4601      	mov	r1, r0
 8007502:	3b30      	subs	r3, #48	; 0x30
 8007504:	220a      	movs	r2, #10
 8007506:	4630      	mov	r0, r6
 8007508:	f7ff ff76 	bl	80073f8 <__multadd>
 800750c:	e7ee      	b.n	80074ec <__s2b+0x68>
 800750e:	bf00      	nop
 8007510:	08009a59 	.word	0x08009a59
 8007514:	08009afb 	.word	0x08009afb

08007518 <__hi0bits>:
 8007518:	0c03      	lsrs	r3, r0, #16
 800751a:	041b      	lsls	r3, r3, #16
 800751c:	b9d3      	cbnz	r3, 8007554 <__hi0bits+0x3c>
 800751e:	0400      	lsls	r0, r0, #16
 8007520:	2310      	movs	r3, #16
 8007522:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007526:	bf04      	itt	eq
 8007528:	0200      	lsleq	r0, r0, #8
 800752a:	3308      	addeq	r3, #8
 800752c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007530:	bf04      	itt	eq
 8007532:	0100      	lsleq	r0, r0, #4
 8007534:	3304      	addeq	r3, #4
 8007536:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800753a:	bf04      	itt	eq
 800753c:	0080      	lsleq	r0, r0, #2
 800753e:	3302      	addeq	r3, #2
 8007540:	2800      	cmp	r0, #0
 8007542:	db05      	blt.n	8007550 <__hi0bits+0x38>
 8007544:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007548:	f103 0301 	add.w	r3, r3, #1
 800754c:	bf08      	it	eq
 800754e:	2320      	moveq	r3, #32
 8007550:	4618      	mov	r0, r3
 8007552:	4770      	bx	lr
 8007554:	2300      	movs	r3, #0
 8007556:	e7e4      	b.n	8007522 <__hi0bits+0xa>

08007558 <__lo0bits>:
 8007558:	6803      	ldr	r3, [r0, #0]
 800755a:	f013 0207 	ands.w	r2, r3, #7
 800755e:	4601      	mov	r1, r0
 8007560:	d00b      	beq.n	800757a <__lo0bits+0x22>
 8007562:	07da      	lsls	r2, r3, #31
 8007564:	d423      	bmi.n	80075ae <__lo0bits+0x56>
 8007566:	0798      	lsls	r0, r3, #30
 8007568:	bf49      	itett	mi
 800756a:	085b      	lsrmi	r3, r3, #1
 800756c:	089b      	lsrpl	r3, r3, #2
 800756e:	2001      	movmi	r0, #1
 8007570:	600b      	strmi	r3, [r1, #0]
 8007572:	bf5c      	itt	pl
 8007574:	600b      	strpl	r3, [r1, #0]
 8007576:	2002      	movpl	r0, #2
 8007578:	4770      	bx	lr
 800757a:	b298      	uxth	r0, r3
 800757c:	b9a8      	cbnz	r0, 80075aa <__lo0bits+0x52>
 800757e:	0c1b      	lsrs	r3, r3, #16
 8007580:	2010      	movs	r0, #16
 8007582:	b2da      	uxtb	r2, r3
 8007584:	b90a      	cbnz	r2, 800758a <__lo0bits+0x32>
 8007586:	3008      	adds	r0, #8
 8007588:	0a1b      	lsrs	r3, r3, #8
 800758a:	071a      	lsls	r2, r3, #28
 800758c:	bf04      	itt	eq
 800758e:	091b      	lsreq	r3, r3, #4
 8007590:	3004      	addeq	r0, #4
 8007592:	079a      	lsls	r2, r3, #30
 8007594:	bf04      	itt	eq
 8007596:	089b      	lsreq	r3, r3, #2
 8007598:	3002      	addeq	r0, #2
 800759a:	07da      	lsls	r2, r3, #31
 800759c:	d403      	bmi.n	80075a6 <__lo0bits+0x4e>
 800759e:	085b      	lsrs	r3, r3, #1
 80075a0:	f100 0001 	add.w	r0, r0, #1
 80075a4:	d005      	beq.n	80075b2 <__lo0bits+0x5a>
 80075a6:	600b      	str	r3, [r1, #0]
 80075a8:	4770      	bx	lr
 80075aa:	4610      	mov	r0, r2
 80075ac:	e7e9      	b.n	8007582 <__lo0bits+0x2a>
 80075ae:	2000      	movs	r0, #0
 80075b0:	4770      	bx	lr
 80075b2:	2020      	movs	r0, #32
 80075b4:	4770      	bx	lr
	...

080075b8 <__i2b>:
 80075b8:	b510      	push	{r4, lr}
 80075ba:	460c      	mov	r4, r1
 80075bc:	2101      	movs	r1, #1
 80075be:	f7ff feb9 	bl	8007334 <_Balloc>
 80075c2:	4602      	mov	r2, r0
 80075c4:	b928      	cbnz	r0, 80075d2 <__i2b+0x1a>
 80075c6:	4b05      	ldr	r3, [pc, #20]	; (80075dc <__i2b+0x24>)
 80075c8:	4805      	ldr	r0, [pc, #20]	; (80075e0 <__i2b+0x28>)
 80075ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80075ce:	f001 fb4f 	bl	8008c70 <__assert_func>
 80075d2:	2301      	movs	r3, #1
 80075d4:	6144      	str	r4, [r0, #20]
 80075d6:	6103      	str	r3, [r0, #16]
 80075d8:	bd10      	pop	{r4, pc}
 80075da:	bf00      	nop
 80075dc:	08009a59 	.word	0x08009a59
 80075e0:	08009afb 	.word	0x08009afb

080075e4 <__multiply>:
 80075e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e8:	4691      	mov	r9, r2
 80075ea:	690a      	ldr	r2, [r1, #16]
 80075ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	bfb8      	it	lt
 80075f4:	460b      	movlt	r3, r1
 80075f6:	460c      	mov	r4, r1
 80075f8:	bfbc      	itt	lt
 80075fa:	464c      	movlt	r4, r9
 80075fc:	4699      	movlt	r9, r3
 80075fe:	6927      	ldr	r7, [r4, #16]
 8007600:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007604:	68a3      	ldr	r3, [r4, #8]
 8007606:	6861      	ldr	r1, [r4, #4]
 8007608:	eb07 060a 	add.w	r6, r7, sl
 800760c:	42b3      	cmp	r3, r6
 800760e:	b085      	sub	sp, #20
 8007610:	bfb8      	it	lt
 8007612:	3101      	addlt	r1, #1
 8007614:	f7ff fe8e 	bl	8007334 <_Balloc>
 8007618:	b930      	cbnz	r0, 8007628 <__multiply+0x44>
 800761a:	4602      	mov	r2, r0
 800761c:	4b44      	ldr	r3, [pc, #272]	; (8007730 <__multiply+0x14c>)
 800761e:	4845      	ldr	r0, [pc, #276]	; (8007734 <__multiply+0x150>)
 8007620:	f240 115d 	movw	r1, #349	; 0x15d
 8007624:	f001 fb24 	bl	8008c70 <__assert_func>
 8007628:	f100 0514 	add.w	r5, r0, #20
 800762c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007630:	462b      	mov	r3, r5
 8007632:	2200      	movs	r2, #0
 8007634:	4543      	cmp	r3, r8
 8007636:	d321      	bcc.n	800767c <__multiply+0x98>
 8007638:	f104 0314 	add.w	r3, r4, #20
 800763c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007640:	f109 0314 	add.w	r3, r9, #20
 8007644:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007648:	9202      	str	r2, [sp, #8]
 800764a:	1b3a      	subs	r2, r7, r4
 800764c:	3a15      	subs	r2, #21
 800764e:	f022 0203 	bic.w	r2, r2, #3
 8007652:	3204      	adds	r2, #4
 8007654:	f104 0115 	add.w	r1, r4, #21
 8007658:	428f      	cmp	r7, r1
 800765a:	bf38      	it	cc
 800765c:	2204      	movcc	r2, #4
 800765e:	9201      	str	r2, [sp, #4]
 8007660:	9a02      	ldr	r2, [sp, #8]
 8007662:	9303      	str	r3, [sp, #12]
 8007664:	429a      	cmp	r2, r3
 8007666:	d80c      	bhi.n	8007682 <__multiply+0x9e>
 8007668:	2e00      	cmp	r6, #0
 800766a:	dd03      	ble.n	8007674 <__multiply+0x90>
 800766c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007670:	2b00      	cmp	r3, #0
 8007672:	d05a      	beq.n	800772a <__multiply+0x146>
 8007674:	6106      	str	r6, [r0, #16]
 8007676:	b005      	add	sp, #20
 8007678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767c:	f843 2b04 	str.w	r2, [r3], #4
 8007680:	e7d8      	b.n	8007634 <__multiply+0x50>
 8007682:	f8b3 a000 	ldrh.w	sl, [r3]
 8007686:	f1ba 0f00 	cmp.w	sl, #0
 800768a:	d024      	beq.n	80076d6 <__multiply+0xf2>
 800768c:	f104 0e14 	add.w	lr, r4, #20
 8007690:	46a9      	mov	r9, r5
 8007692:	f04f 0c00 	mov.w	ip, #0
 8007696:	f85e 2b04 	ldr.w	r2, [lr], #4
 800769a:	f8d9 1000 	ldr.w	r1, [r9]
 800769e:	fa1f fb82 	uxth.w	fp, r2
 80076a2:	b289      	uxth	r1, r1
 80076a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80076a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80076ac:	f8d9 2000 	ldr.w	r2, [r9]
 80076b0:	4461      	add	r1, ip
 80076b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80076b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80076ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80076be:	b289      	uxth	r1, r1
 80076c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80076c4:	4577      	cmp	r7, lr
 80076c6:	f849 1b04 	str.w	r1, [r9], #4
 80076ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80076ce:	d8e2      	bhi.n	8007696 <__multiply+0xb2>
 80076d0:	9a01      	ldr	r2, [sp, #4]
 80076d2:	f845 c002 	str.w	ip, [r5, r2]
 80076d6:	9a03      	ldr	r2, [sp, #12]
 80076d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80076dc:	3304      	adds	r3, #4
 80076de:	f1b9 0f00 	cmp.w	r9, #0
 80076e2:	d020      	beq.n	8007726 <__multiply+0x142>
 80076e4:	6829      	ldr	r1, [r5, #0]
 80076e6:	f104 0c14 	add.w	ip, r4, #20
 80076ea:	46ae      	mov	lr, r5
 80076ec:	f04f 0a00 	mov.w	sl, #0
 80076f0:	f8bc b000 	ldrh.w	fp, [ip]
 80076f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80076f8:	fb09 220b 	mla	r2, r9, fp, r2
 80076fc:	4492      	add	sl, r2
 80076fe:	b289      	uxth	r1, r1
 8007700:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007704:	f84e 1b04 	str.w	r1, [lr], #4
 8007708:	f85c 2b04 	ldr.w	r2, [ip], #4
 800770c:	f8be 1000 	ldrh.w	r1, [lr]
 8007710:	0c12      	lsrs	r2, r2, #16
 8007712:	fb09 1102 	mla	r1, r9, r2, r1
 8007716:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800771a:	4567      	cmp	r7, ip
 800771c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007720:	d8e6      	bhi.n	80076f0 <__multiply+0x10c>
 8007722:	9a01      	ldr	r2, [sp, #4]
 8007724:	50a9      	str	r1, [r5, r2]
 8007726:	3504      	adds	r5, #4
 8007728:	e79a      	b.n	8007660 <__multiply+0x7c>
 800772a:	3e01      	subs	r6, #1
 800772c:	e79c      	b.n	8007668 <__multiply+0x84>
 800772e:	bf00      	nop
 8007730:	08009a59 	.word	0x08009a59
 8007734:	08009afb 	.word	0x08009afb

08007738 <__pow5mult>:
 8007738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800773c:	4615      	mov	r5, r2
 800773e:	f012 0203 	ands.w	r2, r2, #3
 8007742:	4606      	mov	r6, r0
 8007744:	460f      	mov	r7, r1
 8007746:	d007      	beq.n	8007758 <__pow5mult+0x20>
 8007748:	4c25      	ldr	r4, [pc, #148]	; (80077e0 <__pow5mult+0xa8>)
 800774a:	3a01      	subs	r2, #1
 800774c:	2300      	movs	r3, #0
 800774e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007752:	f7ff fe51 	bl	80073f8 <__multadd>
 8007756:	4607      	mov	r7, r0
 8007758:	10ad      	asrs	r5, r5, #2
 800775a:	d03d      	beq.n	80077d8 <__pow5mult+0xa0>
 800775c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800775e:	b97c      	cbnz	r4, 8007780 <__pow5mult+0x48>
 8007760:	2010      	movs	r0, #16
 8007762:	f001 fc6f 	bl	8009044 <malloc>
 8007766:	4602      	mov	r2, r0
 8007768:	6270      	str	r0, [r6, #36]	; 0x24
 800776a:	b928      	cbnz	r0, 8007778 <__pow5mult+0x40>
 800776c:	4b1d      	ldr	r3, [pc, #116]	; (80077e4 <__pow5mult+0xac>)
 800776e:	481e      	ldr	r0, [pc, #120]	; (80077e8 <__pow5mult+0xb0>)
 8007770:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007774:	f001 fa7c 	bl	8008c70 <__assert_func>
 8007778:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800777c:	6004      	str	r4, [r0, #0]
 800777e:	60c4      	str	r4, [r0, #12]
 8007780:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007784:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007788:	b94c      	cbnz	r4, 800779e <__pow5mult+0x66>
 800778a:	f240 2171 	movw	r1, #625	; 0x271
 800778e:	4630      	mov	r0, r6
 8007790:	f7ff ff12 	bl	80075b8 <__i2b>
 8007794:	2300      	movs	r3, #0
 8007796:	f8c8 0008 	str.w	r0, [r8, #8]
 800779a:	4604      	mov	r4, r0
 800779c:	6003      	str	r3, [r0, #0]
 800779e:	f04f 0900 	mov.w	r9, #0
 80077a2:	07eb      	lsls	r3, r5, #31
 80077a4:	d50a      	bpl.n	80077bc <__pow5mult+0x84>
 80077a6:	4639      	mov	r1, r7
 80077a8:	4622      	mov	r2, r4
 80077aa:	4630      	mov	r0, r6
 80077ac:	f7ff ff1a 	bl	80075e4 <__multiply>
 80077b0:	4639      	mov	r1, r7
 80077b2:	4680      	mov	r8, r0
 80077b4:	4630      	mov	r0, r6
 80077b6:	f7ff fdfd 	bl	80073b4 <_Bfree>
 80077ba:	4647      	mov	r7, r8
 80077bc:	106d      	asrs	r5, r5, #1
 80077be:	d00b      	beq.n	80077d8 <__pow5mult+0xa0>
 80077c0:	6820      	ldr	r0, [r4, #0]
 80077c2:	b938      	cbnz	r0, 80077d4 <__pow5mult+0x9c>
 80077c4:	4622      	mov	r2, r4
 80077c6:	4621      	mov	r1, r4
 80077c8:	4630      	mov	r0, r6
 80077ca:	f7ff ff0b 	bl	80075e4 <__multiply>
 80077ce:	6020      	str	r0, [r4, #0]
 80077d0:	f8c0 9000 	str.w	r9, [r0]
 80077d4:	4604      	mov	r4, r0
 80077d6:	e7e4      	b.n	80077a2 <__pow5mult+0x6a>
 80077d8:	4638      	mov	r0, r7
 80077da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077de:	bf00      	nop
 80077e0:	08009c48 	.word	0x08009c48
 80077e4:	08009ae4 	.word	0x08009ae4
 80077e8:	08009afb 	.word	0x08009afb

080077ec <__lshift>:
 80077ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f0:	460c      	mov	r4, r1
 80077f2:	6849      	ldr	r1, [r1, #4]
 80077f4:	6923      	ldr	r3, [r4, #16]
 80077f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077fa:	68a3      	ldr	r3, [r4, #8]
 80077fc:	4607      	mov	r7, r0
 80077fe:	4691      	mov	r9, r2
 8007800:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007804:	f108 0601 	add.w	r6, r8, #1
 8007808:	42b3      	cmp	r3, r6
 800780a:	db0b      	blt.n	8007824 <__lshift+0x38>
 800780c:	4638      	mov	r0, r7
 800780e:	f7ff fd91 	bl	8007334 <_Balloc>
 8007812:	4605      	mov	r5, r0
 8007814:	b948      	cbnz	r0, 800782a <__lshift+0x3e>
 8007816:	4602      	mov	r2, r0
 8007818:	4b2a      	ldr	r3, [pc, #168]	; (80078c4 <__lshift+0xd8>)
 800781a:	482b      	ldr	r0, [pc, #172]	; (80078c8 <__lshift+0xdc>)
 800781c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007820:	f001 fa26 	bl	8008c70 <__assert_func>
 8007824:	3101      	adds	r1, #1
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	e7ee      	b.n	8007808 <__lshift+0x1c>
 800782a:	2300      	movs	r3, #0
 800782c:	f100 0114 	add.w	r1, r0, #20
 8007830:	f100 0210 	add.w	r2, r0, #16
 8007834:	4618      	mov	r0, r3
 8007836:	4553      	cmp	r3, sl
 8007838:	db37      	blt.n	80078aa <__lshift+0xbe>
 800783a:	6920      	ldr	r0, [r4, #16]
 800783c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007840:	f104 0314 	add.w	r3, r4, #20
 8007844:	f019 091f 	ands.w	r9, r9, #31
 8007848:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800784c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007850:	d02f      	beq.n	80078b2 <__lshift+0xc6>
 8007852:	f1c9 0e20 	rsb	lr, r9, #32
 8007856:	468a      	mov	sl, r1
 8007858:	f04f 0c00 	mov.w	ip, #0
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	fa02 f209 	lsl.w	r2, r2, r9
 8007862:	ea42 020c 	orr.w	r2, r2, ip
 8007866:	f84a 2b04 	str.w	r2, [sl], #4
 800786a:	f853 2b04 	ldr.w	r2, [r3], #4
 800786e:	4298      	cmp	r0, r3
 8007870:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007874:	d8f2      	bhi.n	800785c <__lshift+0x70>
 8007876:	1b03      	subs	r3, r0, r4
 8007878:	3b15      	subs	r3, #21
 800787a:	f023 0303 	bic.w	r3, r3, #3
 800787e:	3304      	adds	r3, #4
 8007880:	f104 0215 	add.w	r2, r4, #21
 8007884:	4290      	cmp	r0, r2
 8007886:	bf38      	it	cc
 8007888:	2304      	movcc	r3, #4
 800788a:	f841 c003 	str.w	ip, [r1, r3]
 800788e:	f1bc 0f00 	cmp.w	ip, #0
 8007892:	d001      	beq.n	8007898 <__lshift+0xac>
 8007894:	f108 0602 	add.w	r6, r8, #2
 8007898:	3e01      	subs	r6, #1
 800789a:	4638      	mov	r0, r7
 800789c:	612e      	str	r6, [r5, #16]
 800789e:	4621      	mov	r1, r4
 80078a0:	f7ff fd88 	bl	80073b4 <_Bfree>
 80078a4:	4628      	mov	r0, r5
 80078a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80078ae:	3301      	adds	r3, #1
 80078b0:	e7c1      	b.n	8007836 <__lshift+0x4a>
 80078b2:	3904      	subs	r1, #4
 80078b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80078bc:	4298      	cmp	r0, r3
 80078be:	d8f9      	bhi.n	80078b4 <__lshift+0xc8>
 80078c0:	e7ea      	b.n	8007898 <__lshift+0xac>
 80078c2:	bf00      	nop
 80078c4:	08009a59 	.word	0x08009a59
 80078c8:	08009afb 	.word	0x08009afb

080078cc <__mcmp>:
 80078cc:	b530      	push	{r4, r5, lr}
 80078ce:	6902      	ldr	r2, [r0, #16]
 80078d0:	690c      	ldr	r4, [r1, #16]
 80078d2:	1b12      	subs	r2, r2, r4
 80078d4:	d10e      	bne.n	80078f4 <__mcmp+0x28>
 80078d6:	f100 0314 	add.w	r3, r0, #20
 80078da:	3114      	adds	r1, #20
 80078dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80078e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80078e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80078e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80078ec:	42a5      	cmp	r5, r4
 80078ee:	d003      	beq.n	80078f8 <__mcmp+0x2c>
 80078f0:	d305      	bcc.n	80078fe <__mcmp+0x32>
 80078f2:	2201      	movs	r2, #1
 80078f4:	4610      	mov	r0, r2
 80078f6:	bd30      	pop	{r4, r5, pc}
 80078f8:	4283      	cmp	r3, r0
 80078fa:	d3f3      	bcc.n	80078e4 <__mcmp+0x18>
 80078fc:	e7fa      	b.n	80078f4 <__mcmp+0x28>
 80078fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007902:	e7f7      	b.n	80078f4 <__mcmp+0x28>

08007904 <__mdiff>:
 8007904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007908:	460c      	mov	r4, r1
 800790a:	4606      	mov	r6, r0
 800790c:	4611      	mov	r1, r2
 800790e:	4620      	mov	r0, r4
 8007910:	4690      	mov	r8, r2
 8007912:	f7ff ffdb 	bl	80078cc <__mcmp>
 8007916:	1e05      	subs	r5, r0, #0
 8007918:	d110      	bne.n	800793c <__mdiff+0x38>
 800791a:	4629      	mov	r1, r5
 800791c:	4630      	mov	r0, r6
 800791e:	f7ff fd09 	bl	8007334 <_Balloc>
 8007922:	b930      	cbnz	r0, 8007932 <__mdiff+0x2e>
 8007924:	4b3a      	ldr	r3, [pc, #232]	; (8007a10 <__mdiff+0x10c>)
 8007926:	4602      	mov	r2, r0
 8007928:	f240 2132 	movw	r1, #562	; 0x232
 800792c:	4839      	ldr	r0, [pc, #228]	; (8007a14 <__mdiff+0x110>)
 800792e:	f001 f99f 	bl	8008c70 <__assert_func>
 8007932:	2301      	movs	r3, #1
 8007934:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800793c:	bfa4      	itt	ge
 800793e:	4643      	movge	r3, r8
 8007940:	46a0      	movge	r8, r4
 8007942:	4630      	mov	r0, r6
 8007944:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007948:	bfa6      	itte	ge
 800794a:	461c      	movge	r4, r3
 800794c:	2500      	movge	r5, #0
 800794e:	2501      	movlt	r5, #1
 8007950:	f7ff fcf0 	bl	8007334 <_Balloc>
 8007954:	b920      	cbnz	r0, 8007960 <__mdiff+0x5c>
 8007956:	4b2e      	ldr	r3, [pc, #184]	; (8007a10 <__mdiff+0x10c>)
 8007958:	4602      	mov	r2, r0
 800795a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800795e:	e7e5      	b.n	800792c <__mdiff+0x28>
 8007960:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007964:	6926      	ldr	r6, [r4, #16]
 8007966:	60c5      	str	r5, [r0, #12]
 8007968:	f104 0914 	add.w	r9, r4, #20
 800796c:	f108 0514 	add.w	r5, r8, #20
 8007970:	f100 0e14 	add.w	lr, r0, #20
 8007974:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007978:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800797c:	f108 0210 	add.w	r2, r8, #16
 8007980:	46f2      	mov	sl, lr
 8007982:	2100      	movs	r1, #0
 8007984:	f859 3b04 	ldr.w	r3, [r9], #4
 8007988:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800798c:	fa1f f883 	uxth.w	r8, r3
 8007990:	fa11 f18b 	uxtah	r1, r1, fp
 8007994:	0c1b      	lsrs	r3, r3, #16
 8007996:	eba1 0808 	sub.w	r8, r1, r8
 800799a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800799e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80079a2:	fa1f f888 	uxth.w	r8, r8
 80079a6:	1419      	asrs	r1, r3, #16
 80079a8:	454e      	cmp	r6, r9
 80079aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80079ae:	f84a 3b04 	str.w	r3, [sl], #4
 80079b2:	d8e7      	bhi.n	8007984 <__mdiff+0x80>
 80079b4:	1b33      	subs	r3, r6, r4
 80079b6:	3b15      	subs	r3, #21
 80079b8:	f023 0303 	bic.w	r3, r3, #3
 80079bc:	3304      	adds	r3, #4
 80079be:	3415      	adds	r4, #21
 80079c0:	42a6      	cmp	r6, r4
 80079c2:	bf38      	it	cc
 80079c4:	2304      	movcc	r3, #4
 80079c6:	441d      	add	r5, r3
 80079c8:	4473      	add	r3, lr
 80079ca:	469e      	mov	lr, r3
 80079cc:	462e      	mov	r6, r5
 80079ce:	4566      	cmp	r6, ip
 80079d0:	d30e      	bcc.n	80079f0 <__mdiff+0xec>
 80079d2:	f10c 0203 	add.w	r2, ip, #3
 80079d6:	1b52      	subs	r2, r2, r5
 80079d8:	f022 0203 	bic.w	r2, r2, #3
 80079dc:	3d03      	subs	r5, #3
 80079de:	45ac      	cmp	ip, r5
 80079e0:	bf38      	it	cc
 80079e2:	2200      	movcc	r2, #0
 80079e4:	441a      	add	r2, r3
 80079e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80079ea:	b17b      	cbz	r3, 8007a0c <__mdiff+0x108>
 80079ec:	6107      	str	r7, [r0, #16]
 80079ee:	e7a3      	b.n	8007938 <__mdiff+0x34>
 80079f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80079f4:	fa11 f288 	uxtah	r2, r1, r8
 80079f8:	1414      	asrs	r4, r2, #16
 80079fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80079fe:	b292      	uxth	r2, r2
 8007a00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007a04:	f84e 2b04 	str.w	r2, [lr], #4
 8007a08:	1421      	asrs	r1, r4, #16
 8007a0a:	e7e0      	b.n	80079ce <__mdiff+0xca>
 8007a0c:	3f01      	subs	r7, #1
 8007a0e:	e7ea      	b.n	80079e6 <__mdiff+0xe2>
 8007a10:	08009a59 	.word	0x08009a59
 8007a14:	08009afb 	.word	0x08009afb

08007a18 <__ulp>:
 8007a18:	b082      	sub	sp, #8
 8007a1a:	ed8d 0b00 	vstr	d0, [sp]
 8007a1e:	9b01      	ldr	r3, [sp, #4]
 8007a20:	4912      	ldr	r1, [pc, #72]	; (8007a6c <__ulp+0x54>)
 8007a22:	4019      	ands	r1, r3
 8007a24:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007a28:	2900      	cmp	r1, #0
 8007a2a:	dd05      	ble.n	8007a38 <__ulp+0x20>
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	ec43 2b10 	vmov	d0, r2, r3
 8007a34:	b002      	add	sp, #8
 8007a36:	4770      	bx	lr
 8007a38:	4249      	negs	r1, r1
 8007a3a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007a3e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007a42:	f04f 0200 	mov.w	r2, #0
 8007a46:	f04f 0300 	mov.w	r3, #0
 8007a4a:	da04      	bge.n	8007a56 <__ulp+0x3e>
 8007a4c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007a50:	fa41 f300 	asr.w	r3, r1, r0
 8007a54:	e7ec      	b.n	8007a30 <__ulp+0x18>
 8007a56:	f1a0 0114 	sub.w	r1, r0, #20
 8007a5a:	291e      	cmp	r1, #30
 8007a5c:	bfda      	itte	le
 8007a5e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007a62:	fa20 f101 	lsrle.w	r1, r0, r1
 8007a66:	2101      	movgt	r1, #1
 8007a68:	460a      	mov	r2, r1
 8007a6a:	e7e1      	b.n	8007a30 <__ulp+0x18>
 8007a6c:	7ff00000 	.word	0x7ff00000

08007a70 <__b2d>:
 8007a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a72:	6905      	ldr	r5, [r0, #16]
 8007a74:	f100 0714 	add.w	r7, r0, #20
 8007a78:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007a7c:	1f2e      	subs	r6, r5, #4
 8007a7e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007a82:	4620      	mov	r0, r4
 8007a84:	f7ff fd48 	bl	8007518 <__hi0bits>
 8007a88:	f1c0 0320 	rsb	r3, r0, #32
 8007a8c:	280a      	cmp	r0, #10
 8007a8e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007b0c <__b2d+0x9c>
 8007a92:	600b      	str	r3, [r1, #0]
 8007a94:	dc14      	bgt.n	8007ac0 <__b2d+0x50>
 8007a96:	f1c0 0e0b 	rsb	lr, r0, #11
 8007a9a:	fa24 f10e 	lsr.w	r1, r4, lr
 8007a9e:	42b7      	cmp	r7, r6
 8007aa0:	ea41 030c 	orr.w	r3, r1, ip
 8007aa4:	bf34      	ite	cc
 8007aa6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007aaa:	2100      	movcs	r1, #0
 8007aac:	3015      	adds	r0, #21
 8007aae:	fa04 f000 	lsl.w	r0, r4, r0
 8007ab2:	fa21 f10e 	lsr.w	r1, r1, lr
 8007ab6:	ea40 0201 	orr.w	r2, r0, r1
 8007aba:	ec43 2b10 	vmov	d0, r2, r3
 8007abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac0:	42b7      	cmp	r7, r6
 8007ac2:	bf3a      	itte	cc
 8007ac4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007ac8:	f1a5 0608 	subcc.w	r6, r5, #8
 8007acc:	2100      	movcs	r1, #0
 8007ace:	380b      	subs	r0, #11
 8007ad0:	d017      	beq.n	8007b02 <__b2d+0x92>
 8007ad2:	f1c0 0c20 	rsb	ip, r0, #32
 8007ad6:	fa04 f500 	lsl.w	r5, r4, r0
 8007ada:	42be      	cmp	r6, r7
 8007adc:	fa21 f40c 	lsr.w	r4, r1, ip
 8007ae0:	ea45 0504 	orr.w	r5, r5, r4
 8007ae4:	bf8c      	ite	hi
 8007ae6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007aea:	2400      	movls	r4, #0
 8007aec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007af0:	fa01 f000 	lsl.w	r0, r1, r0
 8007af4:	fa24 f40c 	lsr.w	r4, r4, ip
 8007af8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007afc:	ea40 0204 	orr.w	r2, r0, r4
 8007b00:	e7db      	b.n	8007aba <__b2d+0x4a>
 8007b02:	ea44 030c 	orr.w	r3, r4, ip
 8007b06:	460a      	mov	r2, r1
 8007b08:	e7d7      	b.n	8007aba <__b2d+0x4a>
 8007b0a:	bf00      	nop
 8007b0c:	3ff00000 	.word	0x3ff00000

08007b10 <__d2b>:
 8007b10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b14:	4689      	mov	r9, r1
 8007b16:	2101      	movs	r1, #1
 8007b18:	ec57 6b10 	vmov	r6, r7, d0
 8007b1c:	4690      	mov	r8, r2
 8007b1e:	f7ff fc09 	bl	8007334 <_Balloc>
 8007b22:	4604      	mov	r4, r0
 8007b24:	b930      	cbnz	r0, 8007b34 <__d2b+0x24>
 8007b26:	4602      	mov	r2, r0
 8007b28:	4b25      	ldr	r3, [pc, #148]	; (8007bc0 <__d2b+0xb0>)
 8007b2a:	4826      	ldr	r0, [pc, #152]	; (8007bc4 <__d2b+0xb4>)
 8007b2c:	f240 310a 	movw	r1, #778	; 0x30a
 8007b30:	f001 f89e 	bl	8008c70 <__assert_func>
 8007b34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007b38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b3c:	bb35      	cbnz	r5, 8007b8c <__d2b+0x7c>
 8007b3e:	2e00      	cmp	r6, #0
 8007b40:	9301      	str	r3, [sp, #4]
 8007b42:	d028      	beq.n	8007b96 <__d2b+0x86>
 8007b44:	4668      	mov	r0, sp
 8007b46:	9600      	str	r6, [sp, #0]
 8007b48:	f7ff fd06 	bl	8007558 <__lo0bits>
 8007b4c:	9900      	ldr	r1, [sp, #0]
 8007b4e:	b300      	cbz	r0, 8007b92 <__d2b+0x82>
 8007b50:	9a01      	ldr	r2, [sp, #4]
 8007b52:	f1c0 0320 	rsb	r3, r0, #32
 8007b56:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5a:	430b      	orrs	r3, r1
 8007b5c:	40c2      	lsrs	r2, r0
 8007b5e:	6163      	str	r3, [r4, #20]
 8007b60:	9201      	str	r2, [sp, #4]
 8007b62:	9b01      	ldr	r3, [sp, #4]
 8007b64:	61a3      	str	r3, [r4, #24]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	bf14      	ite	ne
 8007b6a:	2202      	movne	r2, #2
 8007b6c:	2201      	moveq	r2, #1
 8007b6e:	6122      	str	r2, [r4, #16]
 8007b70:	b1d5      	cbz	r5, 8007ba8 <__d2b+0x98>
 8007b72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b76:	4405      	add	r5, r0
 8007b78:	f8c9 5000 	str.w	r5, [r9]
 8007b7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b80:	f8c8 0000 	str.w	r0, [r8]
 8007b84:	4620      	mov	r0, r4
 8007b86:	b003      	add	sp, #12
 8007b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b90:	e7d5      	b.n	8007b3e <__d2b+0x2e>
 8007b92:	6161      	str	r1, [r4, #20]
 8007b94:	e7e5      	b.n	8007b62 <__d2b+0x52>
 8007b96:	a801      	add	r0, sp, #4
 8007b98:	f7ff fcde 	bl	8007558 <__lo0bits>
 8007b9c:	9b01      	ldr	r3, [sp, #4]
 8007b9e:	6163      	str	r3, [r4, #20]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	6122      	str	r2, [r4, #16]
 8007ba4:	3020      	adds	r0, #32
 8007ba6:	e7e3      	b.n	8007b70 <__d2b+0x60>
 8007ba8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007bb0:	f8c9 0000 	str.w	r0, [r9]
 8007bb4:	6918      	ldr	r0, [r3, #16]
 8007bb6:	f7ff fcaf 	bl	8007518 <__hi0bits>
 8007bba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bbe:	e7df      	b.n	8007b80 <__d2b+0x70>
 8007bc0:	08009a59 	.word	0x08009a59
 8007bc4:	08009afb 	.word	0x08009afb

08007bc8 <__ratio>:
 8007bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bcc:	4688      	mov	r8, r1
 8007bce:	4669      	mov	r1, sp
 8007bd0:	4681      	mov	r9, r0
 8007bd2:	f7ff ff4d 	bl	8007a70 <__b2d>
 8007bd6:	a901      	add	r1, sp, #4
 8007bd8:	4640      	mov	r0, r8
 8007bda:	ec55 4b10 	vmov	r4, r5, d0
 8007bde:	f7ff ff47 	bl	8007a70 <__b2d>
 8007be2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007be6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007bea:	eba3 0c02 	sub.w	ip, r3, r2
 8007bee:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007bf2:	1a9b      	subs	r3, r3, r2
 8007bf4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007bf8:	ec51 0b10 	vmov	r0, r1, d0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	bfd6      	itet	le
 8007c00:	460a      	movle	r2, r1
 8007c02:	462a      	movgt	r2, r5
 8007c04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007c08:	468b      	mov	fp, r1
 8007c0a:	462f      	mov	r7, r5
 8007c0c:	bfd4      	ite	le
 8007c0e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007c12:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007c16:	4620      	mov	r0, r4
 8007c18:	ee10 2a10 	vmov	r2, s0
 8007c1c:	465b      	mov	r3, fp
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f8 fe1c 	bl	800085c <__aeabi_ddiv>
 8007c24:	ec41 0b10 	vmov	d0, r0, r1
 8007c28:	b003      	add	sp, #12
 8007c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c2e <__copybits>:
 8007c2e:	3901      	subs	r1, #1
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	1149      	asrs	r1, r1, #5
 8007c34:	6914      	ldr	r4, [r2, #16]
 8007c36:	3101      	adds	r1, #1
 8007c38:	f102 0314 	add.w	r3, r2, #20
 8007c3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007c44:	1f05      	subs	r5, r0, #4
 8007c46:	42a3      	cmp	r3, r4
 8007c48:	d30c      	bcc.n	8007c64 <__copybits+0x36>
 8007c4a:	1aa3      	subs	r3, r4, r2
 8007c4c:	3b11      	subs	r3, #17
 8007c4e:	f023 0303 	bic.w	r3, r3, #3
 8007c52:	3211      	adds	r2, #17
 8007c54:	42a2      	cmp	r2, r4
 8007c56:	bf88      	it	hi
 8007c58:	2300      	movhi	r3, #0
 8007c5a:	4418      	add	r0, r3
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	4288      	cmp	r0, r1
 8007c60:	d305      	bcc.n	8007c6e <__copybits+0x40>
 8007c62:	bd70      	pop	{r4, r5, r6, pc}
 8007c64:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c68:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c6c:	e7eb      	b.n	8007c46 <__copybits+0x18>
 8007c6e:	f840 3b04 	str.w	r3, [r0], #4
 8007c72:	e7f4      	b.n	8007c5e <__copybits+0x30>

08007c74 <__any_on>:
 8007c74:	f100 0214 	add.w	r2, r0, #20
 8007c78:	6900      	ldr	r0, [r0, #16]
 8007c7a:	114b      	asrs	r3, r1, #5
 8007c7c:	4298      	cmp	r0, r3
 8007c7e:	b510      	push	{r4, lr}
 8007c80:	db11      	blt.n	8007ca6 <__any_on+0x32>
 8007c82:	dd0a      	ble.n	8007c9a <__any_on+0x26>
 8007c84:	f011 011f 	ands.w	r1, r1, #31
 8007c88:	d007      	beq.n	8007c9a <__any_on+0x26>
 8007c8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007c8e:	fa24 f001 	lsr.w	r0, r4, r1
 8007c92:	fa00 f101 	lsl.w	r1, r0, r1
 8007c96:	428c      	cmp	r4, r1
 8007c98:	d10b      	bne.n	8007cb2 <__any_on+0x3e>
 8007c9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d803      	bhi.n	8007caa <__any_on+0x36>
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	bd10      	pop	{r4, pc}
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	e7f7      	b.n	8007c9a <__any_on+0x26>
 8007caa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cae:	2900      	cmp	r1, #0
 8007cb0:	d0f5      	beq.n	8007c9e <__any_on+0x2a>
 8007cb2:	2001      	movs	r0, #1
 8007cb4:	e7f6      	b.n	8007ca4 <__any_on+0x30>

08007cb6 <_calloc_r>:
 8007cb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cb8:	fba1 2402 	umull	r2, r4, r1, r2
 8007cbc:	b94c      	cbnz	r4, 8007cd2 <_calloc_r+0x1c>
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	9201      	str	r2, [sp, #4]
 8007cc2:	f000 f82f 	bl	8007d24 <_malloc_r>
 8007cc6:	9a01      	ldr	r2, [sp, #4]
 8007cc8:	4605      	mov	r5, r0
 8007cca:	b930      	cbnz	r0, 8007cda <_calloc_r+0x24>
 8007ccc:	4628      	mov	r0, r5
 8007cce:	b003      	add	sp, #12
 8007cd0:	bd30      	pop	{r4, r5, pc}
 8007cd2:	220c      	movs	r2, #12
 8007cd4:	6002      	str	r2, [r0, #0]
 8007cd6:	2500      	movs	r5, #0
 8007cd8:	e7f8      	b.n	8007ccc <_calloc_r+0x16>
 8007cda:	4621      	mov	r1, r4
 8007cdc:	f7fd fe02 	bl	80058e4 <memset>
 8007ce0:	e7f4      	b.n	8007ccc <_calloc_r+0x16>
	...

08007ce4 <sbrk_aligned>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	4e0e      	ldr	r6, [pc, #56]	; (8007d20 <sbrk_aligned+0x3c>)
 8007ce8:	460c      	mov	r4, r1
 8007cea:	6831      	ldr	r1, [r6, #0]
 8007cec:	4605      	mov	r5, r0
 8007cee:	b911      	cbnz	r1, 8007cf6 <sbrk_aligned+0x12>
 8007cf0:	f000 feba 	bl	8008a68 <_sbrk_r>
 8007cf4:	6030      	str	r0, [r6, #0]
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	f000 feb5 	bl	8008a68 <_sbrk_r>
 8007cfe:	1c43      	adds	r3, r0, #1
 8007d00:	d00a      	beq.n	8007d18 <sbrk_aligned+0x34>
 8007d02:	1cc4      	adds	r4, r0, #3
 8007d04:	f024 0403 	bic.w	r4, r4, #3
 8007d08:	42a0      	cmp	r0, r4
 8007d0a:	d007      	beq.n	8007d1c <sbrk_aligned+0x38>
 8007d0c:	1a21      	subs	r1, r4, r0
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f000 feaa 	bl	8008a68 <_sbrk_r>
 8007d14:	3001      	adds	r0, #1
 8007d16:	d101      	bne.n	8007d1c <sbrk_aligned+0x38>
 8007d18:	f04f 34ff 	mov.w	r4, #4294967295
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}
 8007d20:	20000604 	.word	0x20000604

08007d24 <_malloc_r>:
 8007d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d28:	1ccd      	adds	r5, r1, #3
 8007d2a:	f025 0503 	bic.w	r5, r5, #3
 8007d2e:	3508      	adds	r5, #8
 8007d30:	2d0c      	cmp	r5, #12
 8007d32:	bf38      	it	cc
 8007d34:	250c      	movcc	r5, #12
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	4607      	mov	r7, r0
 8007d3a:	db01      	blt.n	8007d40 <_malloc_r+0x1c>
 8007d3c:	42a9      	cmp	r1, r5
 8007d3e:	d905      	bls.n	8007d4c <_malloc_r+0x28>
 8007d40:	230c      	movs	r3, #12
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	2600      	movs	r6, #0
 8007d46:	4630      	mov	r0, r6
 8007d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d4c:	4e2e      	ldr	r6, [pc, #184]	; (8007e08 <_malloc_r+0xe4>)
 8007d4e:	f001 f99b 	bl	8009088 <__malloc_lock>
 8007d52:	6833      	ldr	r3, [r6, #0]
 8007d54:	461c      	mov	r4, r3
 8007d56:	bb34      	cbnz	r4, 8007da6 <_malloc_r+0x82>
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	f7ff ffc2 	bl	8007ce4 <sbrk_aligned>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	4604      	mov	r4, r0
 8007d64:	d14d      	bne.n	8007e02 <_malloc_r+0xde>
 8007d66:	6834      	ldr	r4, [r6, #0]
 8007d68:	4626      	mov	r6, r4
 8007d6a:	2e00      	cmp	r6, #0
 8007d6c:	d140      	bne.n	8007df0 <_malloc_r+0xcc>
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	4631      	mov	r1, r6
 8007d72:	4638      	mov	r0, r7
 8007d74:	eb04 0803 	add.w	r8, r4, r3
 8007d78:	f000 fe76 	bl	8008a68 <_sbrk_r>
 8007d7c:	4580      	cmp	r8, r0
 8007d7e:	d13a      	bne.n	8007df6 <_malloc_r+0xd2>
 8007d80:	6821      	ldr	r1, [r4, #0]
 8007d82:	3503      	adds	r5, #3
 8007d84:	1a6d      	subs	r5, r5, r1
 8007d86:	f025 0503 	bic.w	r5, r5, #3
 8007d8a:	3508      	adds	r5, #8
 8007d8c:	2d0c      	cmp	r5, #12
 8007d8e:	bf38      	it	cc
 8007d90:	250c      	movcc	r5, #12
 8007d92:	4629      	mov	r1, r5
 8007d94:	4638      	mov	r0, r7
 8007d96:	f7ff ffa5 	bl	8007ce4 <sbrk_aligned>
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	d02b      	beq.n	8007df6 <_malloc_r+0xd2>
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	442b      	add	r3, r5
 8007da2:	6023      	str	r3, [r4, #0]
 8007da4:	e00e      	b.n	8007dc4 <_malloc_r+0xa0>
 8007da6:	6822      	ldr	r2, [r4, #0]
 8007da8:	1b52      	subs	r2, r2, r5
 8007daa:	d41e      	bmi.n	8007dea <_malloc_r+0xc6>
 8007dac:	2a0b      	cmp	r2, #11
 8007dae:	d916      	bls.n	8007dde <_malloc_r+0xba>
 8007db0:	1961      	adds	r1, r4, r5
 8007db2:	42a3      	cmp	r3, r4
 8007db4:	6025      	str	r5, [r4, #0]
 8007db6:	bf18      	it	ne
 8007db8:	6059      	strne	r1, [r3, #4]
 8007dba:	6863      	ldr	r3, [r4, #4]
 8007dbc:	bf08      	it	eq
 8007dbe:	6031      	streq	r1, [r6, #0]
 8007dc0:	5162      	str	r2, [r4, r5]
 8007dc2:	604b      	str	r3, [r1, #4]
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	f104 060b 	add.w	r6, r4, #11
 8007dca:	f001 f963 	bl	8009094 <__malloc_unlock>
 8007dce:	f026 0607 	bic.w	r6, r6, #7
 8007dd2:	1d23      	adds	r3, r4, #4
 8007dd4:	1af2      	subs	r2, r6, r3
 8007dd6:	d0b6      	beq.n	8007d46 <_malloc_r+0x22>
 8007dd8:	1b9b      	subs	r3, r3, r6
 8007dda:	50a3      	str	r3, [r4, r2]
 8007ddc:	e7b3      	b.n	8007d46 <_malloc_r+0x22>
 8007dde:	6862      	ldr	r2, [r4, #4]
 8007de0:	42a3      	cmp	r3, r4
 8007de2:	bf0c      	ite	eq
 8007de4:	6032      	streq	r2, [r6, #0]
 8007de6:	605a      	strne	r2, [r3, #4]
 8007de8:	e7ec      	b.n	8007dc4 <_malloc_r+0xa0>
 8007dea:	4623      	mov	r3, r4
 8007dec:	6864      	ldr	r4, [r4, #4]
 8007dee:	e7b2      	b.n	8007d56 <_malloc_r+0x32>
 8007df0:	4634      	mov	r4, r6
 8007df2:	6876      	ldr	r6, [r6, #4]
 8007df4:	e7b9      	b.n	8007d6a <_malloc_r+0x46>
 8007df6:	230c      	movs	r3, #12
 8007df8:	603b      	str	r3, [r7, #0]
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	f001 f94a 	bl	8009094 <__malloc_unlock>
 8007e00:	e7a1      	b.n	8007d46 <_malloc_r+0x22>
 8007e02:	6025      	str	r5, [r4, #0]
 8007e04:	e7de      	b.n	8007dc4 <_malloc_r+0xa0>
 8007e06:	bf00      	nop
 8007e08:	20000600 	.word	0x20000600

08007e0c <__ssputs_r>:
 8007e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e10:	688e      	ldr	r6, [r1, #8]
 8007e12:	429e      	cmp	r6, r3
 8007e14:	4682      	mov	sl, r0
 8007e16:	460c      	mov	r4, r1
 8007e18:	4690      	mov	r8, r2
 8007e1a:	461f      	mov	r7, r3
 8007e1c:	d838      	bhi.n	8007e90 <__ssputs_r+0x84>
 8007e1e:	898a      	ldrh	r2, [r1, #12]
 8007e20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e24:	d032      	beq.n	8007e8c <__ssputs_r+0x80>
 8007e26:	6825      	ldr	r5, [r4, #0]
 8007e28:	6909      	ldr	r1, [r1, #16]
 8007e2a:	eba5 0901 	sub.w	r9, r5, r1
 8007e2e:	6965      	ldr	r5, [r4, #20]
 8007e30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e38:	3301      	adds	r3, #1
 8007e3a:	444b      	add	r3, r9
 8007e3c:	106d      	asrs	r5, r5, #1
 8007e3e:	429d      	cmp	r5, r3
 8007e40:	bf38      	it	cc
 8007e42:	461d      	movcc	r5, r3
 8007e44:	0553      	lsls	r3, r2, #21
 8007e46:	d531      	bpl.n	8007eac <__ssputs_r+0xa0>
 8007e48:	4629      	mov	r1, r5
 8007e4a:	f7ff ff6b 	bl	8007d24 <_malloc_r>
 8007e4e:	4606      	mov	r6, r0
 8007e50:	b950      	cbnz	r0, 8007e68 <__ssputs_r+0x5c>
 8007e52:	230c      	movs	r3, #12
 8007e54:	f8ca 3000 	str.w	r3, [sl]
 8007e58:	89a3      	ldrh	r3, [r4, #12]
 8007e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e5e:	81a3      	strh	r3, [r4, #12]
 8007e60:	f04f 30ff 	mov.w	r0, #4294967295
 8007e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e68:	6921      	ldr	r1, [r4, #16]
 8007e6a:	464a      	mov	r2, r9
 8007e6c:	f7fd fd2c 	bl	80058c8 <memcpy>
 8007e70:	89a3      	ldrh	r3, [r4, #12]
 8007e72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e7a:	81a3      	strh	r3, [r4, #12]
 8007e7c:	6126      	str	r6, [r4, #16]
 8007e7e:	6165      	str	r5, [r4, #20]
 8007e80:	444e      	add	r6, r9
 8007e82:	eba5 0509 	sub.w	r5, r5, r9
 8007e86:	6026      	str	r6, [r4, #0]
 8007e88:	60a5      	str	r5, [r4, #8]
 8007e8a:	463e      	mov	r6, r7
 8007e8c:	42be      	cmp	r6, r7
 8007e8e:	d900      	bls.n	8007e92 <__ssputs_r+0x86>
 8007e90:	463e      	mov	r6, r7
 8007e92:	6820      	ldr	r0, [r4, #0]
 8007e94:	4632      	mov	r2, r6
 8007e96:	4641      	mov	r1, r8
 8007e98:	f001 f8dc 	bl	8009054 <memmove>
 8007e9c:	68a3      	ldr	r3, [r4, #8]
 8007e9e:	1b9b      	subs	r3, r3, r6
 8007ea0:	60a3      	str	r3, [r4, #8]
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	4433      	add	r3, r6
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	e7db      	b.n	8007e64 <__ssputs_r+0x58>
 8007eac:	462a      	mov	r2, r5
 8007eae:	f001 f943 	bl	8009138 <_realloc_r>
 8007eb2:	4606      	mov	r6, r0
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d1e1      	bne.n	8007e7c <__ssputs_r+0x70>
 8007eb8:	6921      	ldr	r1, [r4, #16]
 8007eba:	4650      	mov	r0, sl
 8007ebc:	f001 f8f0 	bl	80090a0 <_free_r>
 8007ec0:	e7c7      	b.n	8007e52 <__ssputs_r+0x46>
	...

08007ec4 <_svfiprintf_r>:
 8007ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec8:	4698      	mov	r8, r3
 8007eca:	898b      	ldrh	r3, [r1, #12]
 8007ecc:	061b      	lsls	r3, r3, #24
 8007ece:	b09d      	sub	sp, #116	; 0x74
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	460d      	mov	r5, r1
 8007ed4:	4614      	mov	r4, r2
 8007ed6:	d50e      	bpl.n	8007ef6 <_svfiprintf_r+0x32>
 8007ed8:	690b      	ldr	r3, [r1, #16]
 8007eda:	b963      	cbnz	r3, 8007ef6 <_svfiprintf_r+0x32>
 8007edc:	2140      	movs	r1, #64	; 0x40
 8007ede:	f7ff ff21 	bl	8007d24 <_malloc_r>
 8007ee2:	6028      	str	r0, [r5, #0]
 8007ee4:	6128      	str	r0, [r5, #16]
 8007ee6:	b920      	cbnz	r0, 8007ef2 <_svfiprintf_r+0x2e>
 8007ee8:	230c      	movs	r3, #12
 8007eea:	603b      	str	r3, [r7, #0]
 8007eec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef0:	e0d1      	b.n	8008096 <_svfiprintf_r+0x1d2>
 8007ef2:	2340      	movs	r3, #64	; 0x40
 8007ef4:	616b      	str	r3, [r5, #20]
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8007efa:	2320      	movs	r3, #32
 8007efc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f00:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f04:	2330      	movs	r3, #48	; 0x30
 8007f06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80080b0 <_svfiprintf_r+0x1ec>
 8007f0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f0e:	f04f 0901 	mov.w	r9, #1
 8007f12:	4623      	mov	r3, r4
 8007f14:	469a      	mov	sl, r3
 8007f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f1a:	b10a      	cbz	r2, 8007f20 <_svfiprintf_r+0x5c>
 8007f1c:	2a25      	cmp	r2, #37	; 0x25
 8007f1e:	d1f9      	bne.n	8007f14 <_svfiprintf_r+0x50>
 8007f20:	ebba 0b04 	subs.w	fp, sl, r4
 8007f24:	d00b      	beq.n	8007f3e <_svfiprintf_r+0x7a>
 8007f26:	465b      	mov	r3, fp
 8007f28:	4622      	mov	r2, r4
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	4638      	mov	r0, r7
 8007f2e:	f7ff ff6d 	bl	8007e0c <__ssputs_r>
 8007f32:	3001      	adds	r0, #1
 8007f34:	f000 80aa 	beq.w	800808c <_svfiprintf_r+0x1c8>
 8007f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f3a:	445a      	add	r2, fp
 8007f3c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f000 80a2 	beq.w	800808c <_svfiprintf_r+0x1c8>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f52:	f10a 0a01 	add.w	sl, sl, #1
 8007f56:	9304      	str	r3, [sp, #16]
 8007f58:	9307      	str	r3, [sp, #28]
 8007f5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f5e:	931a      	str	r3, [sp, #104]	; 0x68
 8007f60:	4654      	mov	r4, sl
 8007f62:	2205      	movs	r2, #5
 8007f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f68:	4851      	ldr	r0, [pc, #324]	; (80080b0 <_svfiprintf_r+0x1ec>)
 8007f6a:	f7f8 f941 	bl	80001f0 <memchr>
 8007f6e:	9a04      	ldr	r2, [sp, #16]
 8007f70:	b9d8      	cbnz	r0, 8007faa <_svfiprintf_r+0xe6>
 8007f72:	06d0      	lsls	r0, r2, #27
 8007f74:	bf44      	itt	mi
 8007f76:	2320      	movmi	r3, #32
 8007f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f7c:	0711      	lsls	r1, r2, #28
 8007f7e:	bf44      	itt	mi
 8007f80:	232b      	movmi	r3, #43	; 0x2b
 8007f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f86:	f89a 3000 	ldrb.w	r3, [sl]
 8007f8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f8c:	d015      	beq.n	8007fba <_svfiprintf_r+0xf6>
 8007f8e:	9a07      	ldr	r2, [sp, #28]
 8007f90:	4654      	mov	r4, sl
 8007f92:	2000      	movs	r0, #0
 8007f94:	f04f 0c0a 	mov.w	ip, #10
 8007f98:	4621      	mov	r1, r4
 8007f9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f9e:	3b30      	subs	r3, #48	; 0x30
 8007fa0:	2b09      	cmp	r3, #9
 8007fa2:	d94e      	bls.n	8008042 <_svfiprintf_r+0x17e>
 8007fa4:	b1b0      	cbz	r0, 8007fd4 <_svfiprintf_r+0x110>
 8007fa6:	9207      	str	r2, [sp, #28]
 8007fa8:	e014      	b.n	8007fd4 <_svfiprintf_r+0x110>
 8007faa:	eba0 0308 	sub.w	r3, r0, r8
 8007fae:	fa09 f303 	lsl.w	r3, r9, r3
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	9304      	str	r3, [sp, #16]
 8007fb6:	46a2      	mov	sl, r4
 8007fb8:	e7d2      	b.n	8007f60 <_svfiprintf_r+0x9c>
 8007fba:	9b03      	ldr	r3, [sp, #12]
 8007fbc:	1d19      	adds	r1, r3, #4
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	9103      	str	r1, [sp, #12]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	bfbb      	ittet	lt
 8007fc6:	425b      	neglt	r3, r3
 8007fc8:	f042 0202 	orrlt.w	r2, r2, #2
 8007fcc:	9307      	strge	r3, [sp, #28]
 8007fce:	9307      	strlt	r3, [sp, #28]
 8007fd0:	bfb8      	it	lt
 8007fd2:	9204      	strlt	r2, [sp, #16]
 8007fd4:	7823      	ldrb	r3, [r4, #0]
 8007fd6:	2b2e      	cmp	r3, #46	; 0x2e
 8007fd8:	d10c      	bne.n	8007ff4 <_svfiprintf_r+0x130>
 8007fda:	7863      	ldrb	r3, [r4, #1]
 8007fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8007fde:	d135      	bne.n	800804c <_svfiprintf_r+0x188>
 8007fe0:	9b03      	ldr	r3, [sp, #12]
 8007fe2:	1d1a      	adds	r2, r3, #4
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	9203      	str	r2, [sp, #12]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	bfb8      	it	lt
 8007fec:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ff0:	3402      	adds	r4, #2
 8007ff2:	9305      	str	r3, [sp, #20]
 8007ff4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80080c0 <_svfiprintf_r+0x1fc>
 8007ff8:	7821      	ldrb	r1, [r4, #0]
 8007ffa:	2203      	movs	r2, #3
 8007ffc:	4650      	mov	r0, sl
 8007ffe:	f7f8 f8f7 	bl	80001f0 <memchr>
 8008002:	b140      	cbz	r0, 8008016 <_svfiprintf_r+0x152>
 8008004:	2340      	movs	r3, #64	; 0x40
 8008006:	eba0 000a 	sub.w	r0, r0, sl
 800800a:	fa03 f000 	lsl.w	r0, r3, r0
 800800e:	9b04      	ldr	r3, [sp, #16]
 8008010:	4303      	orrs	r3, r0
 8008012:	3401      	adds	r4, #1
 8008014:	9304      	str	r3, [sp, #16]
 8008016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800801a:	4826      	ldr	r0, [pc, #152]	; (80080b4 <_svfiprintf_r+0x1f0>)
 800801c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008020:	2206      	movs	r2, #6
 8008022:	f7f8 f8e5 	bl	80001f0 <memchr>
 8008026:	2800      	cmp	r0, #0
 8008028:	d038      	beq.n	800809c <_svfiprintf_r+0x1d8>
 800802a:	4b23      	ldr	r3, [pc, #140]	; (80080b8 <_svfiprintf_r+0x1f4>)
 800802c:	bb1b      	cbnz	r3, 8008076 <_svfiprintf_r+0x1b2>
 800802e:	9b03      	ldr	r3, [sp, #12]
 8008030:	3307      	adds	r3, #7
 8008032:	f023 0307 	bic.w	r3, r3, #7
 8008036:	3308      	adds	r3, #8
 8008038:	9303      	str	r3, [sp, #12]
 800803a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800803c:	4433      	add	r3, r6
 800803e:	9309      	str	r3, [sp, #36]	; 0x24
 8008040:	e767      	b.n	8007f12 <_svfiprintf_r+0x4e>
 8008042:	fb0c 3202 	mla	r2, ip, r2, r3
 8008046:	460c      	mov	r4, r1
 8008048:	2001      	movs	r0, #1
 800804a:	e7a5      	b.n	8007f98 <_svfiprintf_r+0xd4>
 800804c:	2300      	movs	r3, #0
 800804e:	3401      	adds	r4, #1
 8008050:	9305      	str	r3, [sp, #20]
 8008052:	4619      	mov	r1, r3
 8008054:	f04f 0c0a 	mov.w	ip, #10
 8008058:	4620      	mov	r0, r4
 800805a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800805e:	3a30      	subs	r2, #48	; 0x30
 8008060:	2a09      	cmp	r2, #9
 8008062:	d903      	bls.n	800806c <_svfiprintf_r+0x1a8>
 8008064:	2b00      	cmp	r3, #0
 8008066:	d0c5      	beq.n	8007ff4 <_svfiprintf_r+0x130>
 8008068:	9105      	str	r1, [sp, #20]
 800806a:	e7c3      	b.n	8007ff4 <_svfiprintf_r+0x130>
 800806c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008070:	4604      	mov	r4, r0
 8008072:	2301      	movs	r3, #1
 8008074:	e7f0      	b.n	8008058 <_svfiprintf_r+0x194>
 8008076:	ab03      	add	r3, sp, #12
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	462a      	mov	r2, r5
 800807c:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <_svfiprintf_r+0x1f8>)
 800807e:	a904      	add	r1, sp, #16
 8008080:	4638      	mov	r0, r7
 8008082:	f3af 8000 	nop.w
 8008086:	1c42      	adds	r2, r0, #1
 8008088:	4606      	mov	r6, r0
 800808a:	d1d6      	bne.n	800803a <_svfiprintf_r+0x176>
 800808c:	89ab      	ldrh	r3, [r5, #12]
 800808e:	065b      	lsls	r3, r3, #25
 8008090:	f53f af2c 	bmi.w	8007eec <_svfiprintf_r+0x28>
 8008094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008096:	b01d      	add	sp, #116	; 0x74
 8008098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800809c:	ab03      	add	r3, sp, #12
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	462a      	mov	r2, r5
 80080a2:	4b06      	ldr	r3, [pc, #24]	; (80080bc <_svfiprintf_r+0x1f8>)
 80080a4:	a904      	add	r1, sp, #16
 80080a6:	4638      	mov	r0, r7
 80080a8:	f000 fa4c 	bl	8008544 <_printf_i>
 80080ac:	e7eb      	b.n	8008086 <_svfiprintf_r+0x1c2>
 80080ae:	bf00      	nop
 80080b0:	08009c54 	.word	0x08009c54
 80080b4:	08009c5e 	.word	0x08009c5e
 80080b8:	00000000 	.word	0x00000000
 80080bc:	08007e0d 	.word	0x08007e0d
 80080c0:	08009c5a 	.word	0x08009c5a

080080c4 <_sungetc_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	1c4b      	adds	r3, r1, #1
 80080c8:	4614      	mov	r4, r2
 80080ca:	d103      	bne.n	80080d4 <_sungetc_r+0x10>
 80080cc:	f04f 35ff 	mov.w	r5, #4294967295
 80080d0:	4628      	mov	r0, r5
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	8993      	ldrh	r3, [r2, #12]
 80080d6:	f023 0320 	bic.w	r3, r3, #32
 80080da:	8193      	strh	r3, [r2, #12]
 80080dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080de:	6852      	ldr	r2, [r2, #4]
 80080e0:	b2cd      	uxtb	r5, r1
 80080e2:	b18b      	cbz	r3, 8008108 <_sungetc_r+0x44>
 80080e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80080e6:	4293      	cmp	r3, r2
 80080e8:	dd08      	ble.n	80080fc <_sungetc_r+0x38>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	1e5a      	subs	r2, r3, #1
 80080ee:	6022      	str	r2, [r4, #0]
 80080f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80080f4:	6863      	ldr	r3, [r4, #4]
 80080f6:	3301      	adds	r3, #1
 80080f8:	6063      	str	r3, [r4, #4]
 80080fa:	e7e9      	b.n	80080d0 <_sungetc_r+0xc>
 80080fc:	4621      	mov	r1, r4
 80080fe:	f000 fd6f 	bl	8008be0 <__submore>
 8008102:	2800      	cmp	r0, #0
 8008104:	d0f1      	beq.n	80080ea <_sungetc_r+0x26>
 8008106:	e7e1      	b.n	80080cc <_sungetc_r+0x8>
 8008108:	6921      	ldr	r1, [r4, #16]
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	b151      	cbz	r1, 8008124 <_sungetc_r+0x60>
 800810e:	4299      	cmp	r1, r3
 8008110:	d208      	bcs.n	8008124 <_sungetc_r+0x60>
 8008112:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008116:	42a9      	cmp	r1, r5
 8008118:	d104      	bne.n	8008124 <_sungetc_r+0x60>
 800811a:	3b01      	subs	r3, #1
 800811c:	3201      	adds	r2, #1
 800811e:	6023      	str	r3, [r4, #0]
 8008120:	6062      	str	r2, [r4, #4]
 8008122:	e7d5      	b.n	80080d0 <_sungetc_r+0xc>
 8008124:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800812c:	6363      	str	r3, [r4, #52]	; 0x34
 800812e:	2303      	movs	r3, #3
 8008130:	63a3      	str	r3, [r4, #56]	; 0x38
 8008132:	4623      	mov	r3, r4
 8008134:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	2301      	movs	r3, #1
 800813c:	e7dc      	b.n	80080f8 <_sungetc_r+0x34>

0800813e <__ssrefill_r>:
 800813e:	b510      	push	{r4, lr}
 8008140:	460c      	mov	r4, r1
 8008142:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008144:	b169      	cbz	r1, 8008162 <__ssrefill_r+0x24>
 8008146:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800814a:	4299      	cmp	r1, r3
 800814c:	d001      	beq.n	8008152 <__ssrefill_r+0x14>
 800814e:	f000 ffa7 	bl	80090a0 <_free_r>
 8008152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008154:	6063      	str	r3, [r4, #4]
 8008156:	2000      	movs	r0, #0
 8008158:	6360      	str	r0, [r4, #52]	; 0x34
 800815a:	b113      	cbz	r3, 8008162 <__ssrefill_r+0x24>
 800815c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800815e:	6023      	str	r3, [r4, #0]
 8008160:	bd10      	pop	{r4, pc}
 8008162:	6923      	ldr	r3, [r4, #16]
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	2300      	movs	r3, #0
 8008168:	6063      	str	r3, [r4, #4]
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	f043 0320 	orr.w	r3, r3, #32
 8008170:	81a3      	strh	r3, [r4, #12]
 8008172:	f04f 30ff 	mov.w	r0, #4294967295
 8008176:	e7f3      	b.n	8008160 <__ssrefill_r+0x22>

08008178 <__ssvfiscanf_r>:
 8008178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800817c:	460c      	mov	r4, r1
 800817e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008182:	2100      	movs	r1, #0
 8008184:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008188:	49a6      	ldr	r1, [pc, #664]	; (8008424 <__ssvfiscanf_r+0x2ac>)
 800818a:	91a0      	str	r1, [sp, #640]	; 0x280
 800818c:	f10d 0804 	add.w	r8, sp, #4
 8008190:	49a5      	ldr	r1, [pc, #660]	; (8008428 <__ssvfiscanf_r+0x2b0>)
 8008192:	4fa6      	ldr	r7, [pc, #664]	; (800842c <__ssvfiscanf_r+0x2b4>)
 8008194:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008430 <__ssvfiscanf_r+0x2b8>
 8008198:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800819c:	4606      	mov	r6, r0
 800819e:	91a1      	str	r1, [sp, #644]	; 0x284
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	7813      	ldrb	r3, [r2, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 815a 	beq.w	800845e <__ssvfiscanf_r+0x2e6>
 80081aa:	5dd9      	ldrb	r1, [r3, r7]
 80081ac:	f011 0108 	ands.w	r1, r1, #8
 80081b0:	f102 0501 	add.w	r5, r2, #1
 80081b4:	d019      	beq.n	80081ea <__ssvfiscanf_r+0x72>
 80081b6:	6863      	ldr	r3, [r4, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	dd0f      	ble.n	80081dc <__ssvfiscanf_r+0x64>
 80081bc:	6823      	ldr	r3, [r4, #0]
 80081be:	781a      	ldrb	r2, [r3, #0]
 80081c0:	5cba      	ldrb	r2, [r7, r2]
 80081c2:	0712      	lsls	r2, r2, #28
 80081c4:	d401      	bmi.n	80081ca <__ssvfiscanf_r+0x52>
 80081c6:	462a      	mov	r2, r5
 80081c8:	e7eb      	b.n	80081a2 <__ssvfiscanf_r+0x2a>
 80081ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80081cc:	3201      	adds	r2, #1
 80081ce:	9245      	str	r2, [sp, #276]	; 0x114
 80081d0:	6862      	ldr	r2, [r4, #4]
 80081d2:	3301      	adds	r3, #1
 80081d4:	3a01      	subs	r2, #1
 80081d6:	6062      	str	r2, [r4, #4]
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	e7ec      	b.n	80081b6 <__ssvfiscanf_r+0x3e>
 80081dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80081de:	4621      	mov	r1, r4
 80081e0:	4630      	mov	r0, r6
 80081e2:	4798      	blx	r3
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d0e9      	beq.n	80081bc <__ssvfiscanf_r+0x44>
 80081e8:	e7ed      	b.n	80081c6 <__ssvfiscanf_r+0x4e>
 80081ea:	2b25      	cmp	r3, #37	; 0x25
 80081ec:	d012      	beq.n	8008214 <__ssvfiscanf_r+0x9c>
 80081ee:	469a      	mov	sl, r3
 80081f0:	6863      	ldr	r3, [r4, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f340 8091 	ble.w	800831a <__ssvfiscanf_r+0x1a2>
 80081f8:	6822      	ldr	r2, [r4, #0]
 80081fa:	7813      	ldrb	r3, [r2, #0]
 80081fc:	4553      	cmp	r3, sl
 80081fe:	f040 812e 	bne.w	800845e <__ssvfiscanf_r+0x2e6>
 8008202:	6863      	ldr	r3, [r4, #4]
 8008204:	3b01      	subs	r3, #1
 8008206:	6063      	str	r3, [r4, #4]
 8008208:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800820a:	3201      	adds	r2, #1
 800820c:	3301      	adds	r3, #1
 800820e:	6022      	str	r2, [r4, #0]
 8008210:	9345      	str	r3, [sp, #276]	; 0x114
 8008212:	e7d8      	b.n	80081c6 <__ssvfiscanf_r+0x4e>
 8008214:	9141      	str	r1, [sp, #260]	; 0x104
 8008216:	9143      	str	r1, [sp, #268]	; 0x10c
 8008218:	7853      	ldrb	r3, [r2, #1]
 800821a:	2b2a      	cmp	r3, #42	; 0x2a
 800821c:	bf02      	ittt	eq
 800821e:	2310      	moveq	r3, #16
 8008220:	1c95      	addeq	r5, r2, #2
 8008222:	9341      	streq	r3, [sp, #260]	; 0x104
 8008224:	220a      	movs	r2, #10
 8008226:	46aa      	mov	sl, r5
 8008228:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800822c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008230:	2b09      	cmp	r3, #9
 8008232:	d91d      	bls.n	8008270 <__ssvfiscanf_r+0xf8>
 8008234:	487e      	ldr	r0, [pc, #504]	; (8008430 <__ssvfiscanf_r+0x2b8>)
 8008236:	2203      	movs	r2, #3
 8008238:	f7f7 ffda 	bl	80001f0 <memchr>
 800823c:	b140      	cbz	r0, 8008250 <__ssvfiscanf_r+0xd8>
 800823e:	2301      	movs	r3, #1
 8008240:	eba0 0009 	sub.w	r0, r0, r9
 8008244:	fa03 f000 	lsl.w	r0, r3, r0
 8008248:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800824a:	4318      	orrs	r0, r3
 800824c:	9041      	str	r0, [sp, #260]	; 0x104
 800824e:	4655      	mov	r5, sl
 8008250:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008254:	2b78      	cmp	r3, #120	; 0x78
 8008256:	d806      	bhi.n	8008266 <__ssvfiscanf_r+0xee>
 8008258:	2b57      	cmp	r3, #87	; 0x57
 800825a:	d810      	bhi.n	800827e <__ssvfiscanf_r+0x106>
 800825c:	2b25      	cmp	r3, #37	; 0x25
 800825e:	d0c6      	beq.n	80081ee <__ssvfiscanf_r+0x76>
 8008260:	d856      	bhi.n	8008310 <__ssvfiscanf_r+0x198>
 8008262:	2b00      	cmp	r3, #0
 8008264:	d064      	beq.n	8008330 <__ssvfiscanf_r+0x1b8>
 8008266:	2303      	movs	r3, #3
 8008268:	9347      	str	r3, [sp, #284]	; 0x11c
 800826a:	230a      	movs	r3, #10
 800826c:	9342      	str	r3, [sp, #264]	; 0x108
 800826e:	e071      	b.n	8008354 <__ssvfiscanf_r+0x1dc>
 8008270:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008272:	fb02 1103 	mla	r1, r2, r3, r1
 8008276:	3930      	subs	r1, #48	; 0x30
 8008278:	9143      	str	r1, [sp, #268]	; 0x10c
 800827a:	4655      	mov	r5, sl
 800827c:	e7d3      	b.n	8008226 <__ssvfiscanf_r+0xae>
 800827e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008282:	2a20      	cmp	r2, #32
 8008284:	d8ef      	bhi.n	8008266 <__ssvfiscanf_r+0xee>
 8008286:	a101      	add	r1, pc, #4	; (adr r1, 800828c <__ssvfiscanf_r+0x114>)
 8008288:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800828c:	0800833f 	.word	0x0800833f
 8008290:	08008267 	.word	0x08008267
 8008294:	08008267 	.word	0x08008267
 8008298:	0800839d 	.word	0x0800839d
 800829c:	08008267 	.word	0x08008267
 80082a0:	08008267 	.word	0x08008267
 80082a4:	08008267 	.word	0x08008267
 80082a8:	08008267 	.word	0x08008267
 80082ac:	08008267 	.word	0x08008267
 80082b0:	08008267 	.word	0x08008267
 80082b4:	08008267 	.word	0x08008267
 80082b8:	080083b3 	.word	0x080083b3
 80082bc:	08008389 	.word	0x08008389
 80082c0:	08008317 	.word	0x08008317
 80082c4:	08008317 	.word	0x08008317
 80082c8:	08008317 	.word	0x08008317
 80082cc:	08008267 	.word	0x08008267
 80082d0:	0800838d 	.word	0x0800838d
 80082d4:	08008267 	.word	0x08008267
 80082d8:	08008267 	.word	0x08008267
 80082dc:	08008267 	.word	0x08008267
 80082e0:	08008267 	.word	0x08008267
 80082e4:	080083c3 	.word	0x080083c3
 80082e8:	08008395 	.word	0x08008395
 80082ec:	08008337 	.word	0x08008337
 80082f0:	08008267 	.word	0x08008267
 80082f4:	08008267 	.word	0x08008267
 80082f8:	080083bf 	.word	0x080083bf
 80082fc:	08008267 	.word	0x08008267
 8008300:	08008389 	.word	0x08008389
 8008304:	08008267 	.word	0x08008267
 8008308:	08008267 	.word	0x08008267
 800830c:	0800833f 	.word	0x0800833f
 8008310:	3b45      	subs	r3, #69	; 0x45
 8008312:	2b02      	cmp	r3, #2
 8008314:	d8a7      	bhi.n	8008266 <__ssvfiscanf_r+0xee>
 8008316:	2305      	movs	r3, #5
 8008318:	e01b      	b.n	8008352 <__ssvfiscanf_r+0x1da>
 800831a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800831c:	4621      	mov	r1, r4
 800831e:	4630      	mov	r0, r6
 8008320:	4798      	blx	r3
 8008322:	2800      	cmp	r0, #0
 8008324:	f43f af68 	beq.w	80081f8 <__ssvfiscanf_r+0x80>
 8008328:	9844      	ldr	r0, [sp, #272]	; 0x110
 800832a:	2800      	cmp	r0, #0
 800832c:	f040 808d 	bne.w	800844a <__ssvfiscanf_r+0x2d2>
 8008330:	f04f 30ff 	mov.w	r0, #4294967295
 8008334:	e08f      	b.n	8008456 <__ssvfiscanf_r+0x2de>
 8008336:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008338:	f042 0220 	orr.w	r2, r2, #32
 800833c:	9241      	str	r2, [sp, #260]	; 0x104
 800833e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008344:	9241      	str	r2, [sp, #260]	; 0x104
 8008346:	2210      	movs	r2, #16
 8008348:	2b6f      	cmp	r3, #111	; 0x6f
 800834a:	9242      	str	r2, [sp, #264]	; 0x108
 800834c:	bf34      	ite	cc
 800834e:	2303      	movcc	r3, #3
 8008350:	2304      	movcs	r3, #4
 8008352:	9347      	str	r3, [sp, #284]	; 0x11c
 8008354:	6863      	ldr	r3, [r4, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	dd42      	ble.n	80083e0 <__ssvfiscanf_r+0x268>
 800835a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800835c:	0659      	lsls	r1, r3, #25
 800835e:	d404      	bmi.n	800836a <__ssvfiscanf_r+0x1f2>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	781a      	ldrb	r2, [r3, #0]
 8008364:	5cba      	ldrb	r2, [r7, r2]
 8008366:	0712      	lsls	r2, r2, #28
 8008368:	d441      	bmi.n	80083ee <__ssvfiscanf_r+0x276>
 800836a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800836c:	2b02      	cmp	r3, #2
 800836e:	dc50      	bgt.n	8008412 <__ssvfiscanf_r+0x29a>
 8008370:	466b      	mov	r3, sp
 8008372:	4622      	mov	r2, r4
 8008374:	a941      	add	r1, sp, #260	; 0x104
 8008376:	4630      	mov	r0, r6
 8008378:	f000 fa0a 	bl	8008790 <_scanf_chars>
 800837c:	2801      	cmp	r0, #1
 800837e:	d06e      	beq.n	800845e <__ssvfiscanf_r+0x2e6>
 8008380:	2802      	cmp	r0, #2
 8008382:	f47f af20 	bne.w	80081c6 <__ssvfiscanf_r+0x4e>
 8008386:	e7cf      	b.n	8008328 <__ssvfiscanf_r+0x1b0>
 8008388:	220a      	movs	r2, #10
 800838a:	e7dd      	b.n	8008348 <__ssvfiscanf_r+0x1d0>
 800838c:	2300      	movs	r3, #0
 800838e:	9342      	str	r3, [sp, #264]	; 0x108
 8008390:	2303      	movs	r3, #3
 8008392:	e7de      	b.n	8008352 <__ssvfiscanf_r+0x1da>
 8008394:	2308      	movs	r3, #8
 8008396:	9342      	str	r3, [sp, #264]	; 0x108
 8008398:	2304      	movs	r3, #4
 800839a:	e7da      	b.n	8008352 <__ssvfiscanf_r+0x1da>
 800839c:	4629      	mov	r1, r5
 800839e:	4640      	mov	r0, r8
 80083a0:	f000 fb72 	bl	8008a88 <__sccl>
 80083a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80083a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083aa:	9341      	str	r3, [sp, #260]	; 0x104
 80083ac:	4605      	mov	r5, r0
 80083ae:	2301      	movs	r3, #1
 80083b0:	e7cf      	b.n	8008352 <__ssvfiscanf_r+0x1da>
 80083b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80083b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083b8:	9341      	str	r3, [sp, #260]	; 0x104
 80083ba:	2300      	movs	r3, #0
 80083bc:	e7c9      	b.n	8008352 <__ssvfiscanf_r+0x1da>
 80083be:	2302      	movs	r3, #2
 80083c0:	e7c7      	b.n	8008352 <__ssvfiscanf_r+0x1da>
 80083c2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80083c4:	06c3      	lsls	r3, r0, #27
 80083c6:	f53f aefe 	bmi.w	80081c6 <__ssvfiscanf_r+0x4e>
 80083ca:	9b00      	ldr	r3, [sp, #0]
 80083cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80083ce:	1d19      	adds	r1, r3, #4
 80083d0:	9100      	str	r1, [sp, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f010 0f01 	tst.w	r0, #1
 80083d8:	bf14      	ite	ne
 80083da:	801a      	strhne	r2, [r3, #0]
 80083dc:	601a      	streq	r2, [r3, #0]
 80083de:	e6f2      	b.n	80081c6 <__ssvfiscanf_r+0x4e>
 80083e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80083e2:	4621      	mov	r1, r4
 80083e4:	4630      	mov	r0, r6
 80083e6:	4798      	blx	r3
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d0b6      	beq.n	800835a <__ssvfiscanf_r+0x1e2>
 80083ec:	e79c      	b.n	8008328 <__ssvfiscanf_r+0x1b0>
 80083ee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80083f0:	3201      	adds	r2, #1
 80083f2:	9245      	str	r2, [sp, #276]	; 0x114
 80083f4:	6862      	ldr	r2, [r4, #4]
 80083f6:	3a01      	subs	r2, #1
 80083f8:	2a00      	cmp	r2, #0
 80083fa:	6062      	str	r2, [r4, #4]
 80083fc:	dd02      	ble.n	8008404 <__ssvfiscanf_r+0x28c>
 80083fe:	3301      	adds	r3, #1
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	e7ad      	b.n	8008360 <__ssvfiscanf_r+0x1e8>
 8008404:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008406:	4621      	mov	r1, r4
 8008408:	4630      	mov	r0, r6
 800840a:	4798      	blx	r3
 800840c:	2800      	cmp	r0, #0
 800840e:	d0a7      	beq.n	8008360 <__ssvfiscanf_r+0x1e8>
 8008410:	e78a      	b.n	8008328 <__ssvfiscanf_r+0x1b0>
 8008412:	2b04      	cmp	r3, #4
 8008414:	dc0e      	bgt.n	8008434 <__ssvfiscanf_r+0x2bc>
 8008416:	466b      	mov	r3, sp
 8008418:	4622      	mov	r2, r4
 800841a:	a941      	add	r1, sp, #260	; 0x104
 800841c:	4630      	mov	r0, r6
 800841e:	f000 fa11 	bl	8008844 <_scanf_i>
 8008422:	e7ab      	b.n	800837c <__ssvfiscanf_r+0x204>
 8008424:	080080c5 	.word	0x080080c5
 8008428:	0800813f 	.word	0x0800813f
 800842c:	08009959 	.word	0x08009959
 8008430:	08009c5a 	.word	0x08009c5a
 8008434:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <__ssvfiscanf_r+0x2ec>)
 8008436:	2b00      	cmp	r3, #0
 8008438:	f43f aec5 	beq.w	80081c6 <__ssvfiscanf_r+0x4e>
 800843c:	466b      	mov	r3, sp
 800843e:	4622      	mov	r2, r4
 8008440:	a941      	add	r1, sp, #260	; 0x104
 8008442:	4630      	mov	r0, r6
 8008444:	f7fd fa56 	bl	80058f4 <_scanf_float>
 8008448:	e798      	b.n	800837c <__ssvfiscanf_r+0x204>
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008450:	bf18      	it	ne
 8008452:	f04f 30ff 	movne.w	r0, #4294967295
 8008456:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800845a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800845e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008460:	e7f9      	b.n	8008456 <__ssvfiscanf_r+0x2de>
 8008462:	bf00      	nop
 8008464:	080058f5 	.word	0x080058f5

08008468 <_printf_common>:
 8008468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800846c:	4616      	mov	r6, r2
 800846e:	4699      	mov	r9, r3
 8008470:	688a      	ldr	r2, [r1, #8]
 8008472:	690b      	ldr	r3, [r1, #16]
 8008474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008478:	4293      	cmp	r3, r2
 800847a:	bfb8      	it	lt
 800847c:	4613      	movlt	r3, r2
 800847e:	6033      	str	r3, [r6, #0]
 8008480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008484:	4607      	mov	r7, r0
 8008486:	460c      	mov	r4, r1
 8008488:	b10a      	cbz	r2, 800848e <_printf_common+0x26>
 800848a:	3301      	adds	r3, #1
 800848c:	6033      	str	r3, [r6, #0]
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	0699      	lsls	r1, r3, #26
 8008492:	bf42      	ittt	mi
 8008494:	6833      	ldrmi	r3, [r6, #0]
 8008496:	3302      	addmi	r3, #2
 8008498:	6033      	strmi	r3, [r6, #0]
 800849a:	6825      	ldr	r5, [r4, #0]
 800849c:	f015 0506 	ands.w	r5, r5, #6
 80084a0:	d106      	bne.n	80084b0 <_printf_common+0x48>
 80084a2:	f104 0a19 	add.w	sl, r4, #25
 80084a6:	68e3      	ldr	r3, [r4, #12]
 80084a8:	6832      	ldr	r2, [r6, #0]
 80084aa:	1a9b      	subs	r3, r3, r2
 80084ac:	42ab      	cmp	r3, r5
 80084ae:	dc26      	bgt.n	80084fe <_printf_common+0x96>
 80084b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084b4:	1e13      	subs	r3, r2, #0
 80084b6:	6822      	ldr	r2, [r4, #0]
 80084b8:	bf18      	it	ne
 80084ba:	2301      	movne	r3, #1
 80084bc:	0692      	lsls	r2, r2, #26
 80084be:	d42b      	bmi.n	8008518 <_printf_common+0xb0>
 80084c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084c4:	4649      	mov	r1, r9
 80084c6:	4638      	mov	r0, r7
 80084c8:	47c0      	blx	r8
 80084ca:	3001      	adds	r0, #1
 80084cc:	d01e      	beq.n	800850c <_printf_common+0xa4>
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	68e5      	ldr	r5, [r4, #12]
 80084d2:	6832      	ldr	r2, [r6, #0]
 80084d4:	f003 0306 	and.w	r3, r3, #6
 80084d8:	2b04      	cmp	r3, #4
 80084da:	bf08      	it	eq
 80084dc:	1aad      	subeq	r5, r5, r2
 80084de:	68a3      	ldr	r3, [r4, #8]
 80084e0:	6922      	ldr	r2, [r4, #16]
 80084e2:	bf0c      	ite	eq
 80084e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084e8:	2500      	movne	r5, #0
 80084ea:	4293      	cmp	r3, r2
 80084ec:	bfc4      	itt	gt
 80084ee:	1a9b      	subgt	r3, r3, r2
 80084f0:	18ed      	addgt	r5, r5, r3
 80084f2:	2600      	movs	r6, #0
 80084f4:	341a      	adds	r4, #26
 80084f6:	42b5      	cmp	r5, r6
 80084f8:	d11a      	bne.n	8008530 <_printf_common+0xc8>
 80084fa:	2000      	movs	r0, #0
 80084fc:	e008      	b.n	8008510 <_printf_common+0xa8>
 80084fe:	2301      	movs	r3, #1
 8008500:	4652      	mov	r2, sl
 8008502:	4649      	mov	r1, r9
 8008504:	4638      	mov	r0, r7
 8008506:	47c0      	blx	r8
 8008508:	3001      	adds	r0, #1
 800850a:	d103      	bne.n	8008514 <_printf_common+0xac>
 800850c:	f04f 30ff 	mov.w	r0, #4294967295
 8008510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008514:	3501      	adds	r5, #1
 8008516:	e7c6      	b.n	80084a6 <_printf_common+0x3e>
 8008518:	18e1      	adds	r1, r4, r3
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	2030      	movs	r0, #48	; 0x30
 800851e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008522:	4422      	add	r2, r4
 8008524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800852c:	3302      	adds	r3, #2
 800852e:	e7c7      	b.n	80084c0 <_printf_common+0x58>
 8008530:	2301      	movs	r3, #1
 8008532:	4622      	mov	r2, r4
 8008534:	4649      	mov	r1, r9
 8008536:	4638      	mov	r0, r7
 8008538:	47c0      	blx	r8
 800853a:	3001      	adds	r0, #1
 800853c:	d0e6      	beq.n	800850c <_printf_common+0xa4>
 800853e:	3601      	adds	r6, #1
 8008540:	e7d9      	b.n	80084f6 <_printf_common+0x8e>
	...

08008544 <_printf_i>:
 8008544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008548:	7e0f      	ldrb	r7, [r1, #24]
 800854a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800854c:	2f78      	cmp	r7, #120	; 0x78
 800854e:	4691      	mov	r9, r2
 8008550:	4680      	mov	r8, r0
 8008552:	460c      	mov	r4, r1
 8008554:	469a      	mov	sl, r3
 8008556:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800855a:	d807      	bhi.n	800856c <_printf_i+0x28>
 800855c:	2f62      	cmp	r7, #98	; 0x62
 800855e:	d80a      	bhi.n	8008576 <_printf_i+0x32>
 8008560:	2f00      	cmp	r7, #0
 8008562:	f000 80d8 	beq.w	8008716 <_printf_i+0x1d2>
 8008566:	2f58      	cmp	r7, #88	; 0x58
 8008568:	f000 80a3 	beq.w	80086b2 <_printf_i+0x16e>
 800856c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008574:	e03a      	b.n	80085ec <_printf_i+0xa8>
 8008576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800857a:	2b15      	cmp	r3, #21
 800857c:	d8f6      	bhi.n	800856c <_printf_i+0x28>
 800857e:	a101      	add	r1, pc, #4	; (adr r1, 8008584 <_printf_i+0x40>)
 8008580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008584:	080085dd 	.word	0x080085dd
 8008588:	080085f1 	.word	0x080085f1
 800858c:	0800856d 	.word	0x0800856d
 8008590:	0800856d 	.word	0x0800856d
 8008594:	0800856d 	.word	0x0800856d
 8008598:	0800856d 	.word	0x0800856d
 800859c:	080085f1 	.word	0x080085f1
 80085a0:	0800856d 	.word	0x0800856d
 80085a4:	0800856d 	.word	0x0800856d
 80085a8:	0800856d 	.word	0x0800856d
 80085ac:	0800856d 	.word	0x0800856d
 80085b0:	080086fd 	.word	0x080086fd
 80085b4:	08008621 	.word	0x08008621
 80085b8:	080086df 	.word	0x080086df
 80085bc:	0800856d 	.word	0x0800856d
 80085c0:	0800856d 	.word	0x0800856d
 80085c4:	0800871f 	.word	0x0800871f
 80085c8:	0800856d 	.word	0x0800856d
 80085cc:	08008621 	.word	0x08008621
 80085d0:	0800856d 	.word	0x0800856d
 80085d4:	0800856d 	.word	0x0800856d
 80085d8:	080086e7 	.word	0x080086e7
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	1d1a      	adds	r2, r3, #4
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	602a      	str	r2, [r5, #0]
 80085e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085ec:	2301      	movs	r3, #1
 80085ee:	e0a3      	b.n	8008738 <_printf_i+0x1f4>
 80085f0:	6820      	ldr	r0, [r4, #0]
 80085f2:	6829      	ldr	r1, [r5, #0]
 80085f4:	0606      	lsls	r6, r0, #24
 80085f6:	f101 0304 	add.w	r3, r1, #4
 80085fa:	d50a      	bpl.n	8008612 <_printf_i+0xce>
 80085fc:	680e      	ldr	r6, [r1, #0]
 80085fe:	602b      	str	r3, [r5, #0]
 8008600:	2e00      	cmp	r6, #0
 8008602:	da03      	bge.n	800860c <_printf_i+0xc8>
 8008604:	232d      	movs	r3, #45	; 0x2d
 8008606:	4276      	negs	r6, r6
 8008608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800860c:	485e      	ldr	r0, [pc, #376]	; (8008788 <_printf_i+0x244>)
 800860e:	230a      	movs	r3, #10
 8008610:	e019      	b.n	8008646 <_printf_i+0x102>
 8008612:	680e      	ldr	r6, [r1, #0]
 8008614:	602b      	str	r3, [r5, #0]
 8008616:	f010 0f40 	tst.w	r0, #64	; 0x40
 800861a:	bf18      	it	ne
 800861c:	b236      	sxthne	r6, r6
 800861e:	e7ef      	b.n	8008600 <_printf_i+0xbc>
 8008620:	682b      	ldr	r3, [r5, #0]
 8008622:	6820      	ldr	r0, [r4, #0]
 8008624:	1d19      	adds	r1, r3, #4
 8008626:	6029      	str	r1, [r5, #0]
 8008628:	0601      	lsls	r1, r0, #24
 800862a:	d501      	bpl.n	8008630 <_printf_i+0xec>
 800862c:	681e      	ldr	r6, [r3, #0]
 800862e:	e002      	b.n	8008636 <_printf_i+0xf2>
 8008630:	0646      	lsls	r6, r0, #25
 8008632:	d5fb      	bpl.n	800862c <_printf_i+0xe8>
 8008634:	881e      	ldrh	r6, [r3, #0]
 8008636:	4854      	ldr	r0, [pc, #336]	; (8008788 <_printf_i+0x244>)
 8008638:	2f6f      	cmp	r7, #111	; 0x6f
 800863a:	bf0c      	ite	eq
 800863c:	2308      	moveq	r3, #8
 800863e:	230a      	movne	r3, #10
 8008640:	2100      	movs	r1, #0
 8008642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008646:	6865      	ldr	r5, [r4, #4]
 8008648:	60a5      	str	r5, [r4, #8]
 800864a:	2d00      	cmp	r5, #0
 800864c:	bfa2      	ittt	ge
 800864e:	6821      	ldrge	r1, [r4, #0]
 8008650:	f021 0104 	bicge.w	r1, r1, #4
 8008654:	6021      	strge	r1, [r4, #0]
 8008656:	b90e      	cbnz	r6, 800865c <_printf_i+0x118>
 8008658:	2d00      	cmp	r5, #0
 800865a:	d04d      	beq.n	80086f8 <_printf_i+0x1b4>
 800865c:	4615      	mov	r5, r2
 800865e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008662:	fb03 6711 	mls	r7, r3, r1, r6
 8008666:	5dc7      	ldrb	r7, [r0, r7]
 8008668:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800866c:	4637      	mov	r7, r6
 800866e:	42bb      	cmp	r3, r7
 8008670:	460e      	mov	r6, r1
 8008672:	d9f4      	bls.n	800865e <_printf_i+0x11a>
 8008674:	2b08      	cmp	r3, #8
 8008676:	d10b      	bne.n	8008690 <_printf_i+0x14c>
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	07de      	lsls	r6, r3, #31
 800867c:	d508      	bpl.n	8008690 <_printf_i+0x14c>
 800867e:	6923      	ldr	r3, [r4, #16]
 8008680:	6861      	ldr	r1, [r4, #4]
 8008682:	4299      	cmp	r1, r3
 8008684:	bfde      	ittt	le
 8008686:	2330      	movle	r3, #48	; 0x30
 8008688:	f805 3c01 	strble.w	r3, [r5, #-1]
 800868c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008690:	1b52      	subs	r2, r2, r5
 8008692:	6122      	str	r2, [r4, #16]
 8008694:	f8cd a000 	str.w	sl, [sp]
 8008698:	464b      	mov	r3, r9
 800869a:	aa03      	add	r2, sp, #12
 800869c:	4621      	mov	r1, r4
 800869e:	4640      	mov	r0, r8
 80086a0:	f7ff fee2 	bl	8008468 <_printf_common>
 80086a4:	3001      	adds	r0, #1
 80086a6:	d14c      	bne.n	8008742 <_printf_i+0x1fe>
 80086a8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ac:	b004      	add	sp, #16
 80086ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b2:	4835      	ldr	r0, [pc, #212]	; (8008788 <_printf_i+0x244>)
 80086b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80086b8:	6829      	ldr	r1, [r5, #0]
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80086c0:	6029      	str	r1, [r5, #0]
 80086c2:	061d      	lsls	r5, r3, #24
 80086c4:	d514      	bpl.n	80086f0 <_printf_i+0x1ac>
 80086c6:	07df      	lsls	r7, r3, #31
 80086c8:	bf44      	itt	mi
 80086ca:	f043 0320 	orrmi.w	r3, r3, #32
 80086ce:	6023      	strmi	r3, [r4, #0]
 80086d0:	b91e      	cbnz	r6, 80086da <_printf_i+0x196>
 80086d2:	6823      	ldr	r3, [r4, #0]
 80086d4:	f023 0320 	bic.w	r3, r3, #32
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	2310      	movs	r3, #16
 80086dc:	e7b0      	b.n	8008640 <_printf_i+0xfc>
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	f043 0320 	orr.w	r3, r3, #32
 80086e4:	6023      	str	r3, [r4, #0]
 80086e6:	2378      	movs	r3, #120	; 0x78
 80086e8:	4828      	ldr	r0, [pc, #160]	; (800878c <_printf_i+0x248>)
 80086ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086ee:	e7e3      	b.n	80086b8 <_printf_i+0x174>
 80086f0:	0659      	lsls	r1, r3, #25
 80086f2:	bf48      	it	mi
 80086f4:	b2b6      	uxthmi	r6, r6
 80086f6:	e7e6      	b.n	80086c6 <_printf_i+0x182>
 80086f8:	4615      	mov	r5, r2
 80086fa:	e7bb      	b.n	8008674 <_printf_i+0x130>
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	6826      	ldr	r6, [r4, #0]
 8008700:	6961      	ldr	r1, [r4, #20]
 8008702:	1d18      	adds	r0, r3, #4
 8008704:	6028      	str	r0, [r5, #0]
 8008706:	0635      	lsls	r5, r6, #24
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	d501      	bpl.n	8008710 <_printf_i+0x1cc>
 800870c:	6019      	str	r1, [r3, #0]
 800870e:	e002      	b.n	8008716 <_printf_i+0x1d2>
 8008710:	0670      	lsls	r0, r6, #25
 8008712:	d5fb      	bpl.n	800870c <_printf_i+0x1c8>
 8008714:	8019      	strh	r1, [r3, #0]
 8008716:	2300      	movs	r3, #0
 8008718:	6123      	str	r3, [r4, #16]
 800871a:	4615      	mov	r5, r2
 800871c:	e7ba      	b.n	8008694 <_printf_i+0x150>
 800871e:	682b      	ldr	r3, [r5, #0]
 8008720:	1d1a      	adds	r2, r3, #4
 8008722:	602a      	str	r2, [r5, #0]
 8008724:	681d      	ldr	r5, [r3, #0]
 8008726:	6862      	ldr	r2, [r4, #4]
 8008728:	2100      	movs	r1, #0
 800872a:	4628      	mov	r0, r5
 800872c:	f7f7 fd60 	bl	80001f0 <memchr>
 8008730:	b108      	cbz	r0, 8008736 <_printf_i+0x1f2>
 8008732:	1b40      	subs	r0, r0, r5
 8008734:	6060      	str	r0, [r4, #4]
 8008736:	6863      	ldr	r3, [r4, #4]
 8008738:	6123      	str	r3, [r4, #16]
 800873a:	2300      	movs	r3, #0
 800873c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008740:	e7a8      	b.n	8008694 <_printf_i+0x150>
 8008742:	6923      	ldr	r3, [r4, #16]
 8008744:	462a      	mov	r2, r5
 8008746:	4649      	mov	r1, r9
 8008748:	4640      	mov	r0, r8
 800874a:	47d0      	blx	sl
 800874c:	3001      	adds	r0, #1
 800874e:	d0ab      	beq.n	80086a8 <_printf_i+0x164>
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	079b      	lsls	r3, r3, #30
 8008754:	d413      	bmi.n	800877e <_printf_i+0x23a>
 8008756:	68e0      	ldr	r0, [r4, #12]
 8008758:	9b03      	ldr	r3, [sp, #12]
 800875a:	4298      	cmp	r0, r3
 800875c:	bfb8      	it	lt
 800875e:	4618      	movlt	r0, r3
 8008760:	e7a4      	b.n	80086ac <_printf_i+0x168>
 8008762:	2301      	movs	r3, #1
 8008764:	4632      	mov	r2, r6
 8008766:	4649      	mov	r1, r9
 8008768:	4640      	mov	r0, r8
 800876a:	47d0      	blx	sl
 800876c:	3001      	adds	r0, #1
 800876e:	d09b      	beq.n	80086a8 <_printf_i+0x164>
 8008770:	3501      	adds	r5, #1
 8008772:	68e3      	ldr	r3, [r4, #12]
 8008774:	9903      	ldr	r1, [sp, #12]
 8008776:	1a5b      	subs	r3, r3, r1
 8008778:	42ab      	cmp	r3, r5
 800877a:	dcf2      	bgt.n	8008762 <_printf_i+0x21e>
 800877c:	e7eb      	b.n	8008756 <_printf_i+0x212>
 800877e:	2500      	movs	r5, #0
 8008780:	f104 0619 	add.w	r6, r4, #25
 8008784:	e7f5      	b.n	8008772 <_printf_i+0x22e>
 8008786:	bf00      	nop
 8008788:	08009c65 	.word	0x08009c65
 800878c:	08009c76 	.word	0x08009c76

08008790 <_scanf_chars>:
 8008790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008794:	4615      	mov	r5, r2
 8008796:	688a      	ldr	r2, [r1, #8]
 8008798:	4680      	mov	r8, r0
 800879a:	460c      	mov	r4, r1
 800879c:	b932      	cbnz	r2, 80087ac <_scanf_chars+0x1c>
 800879e:	698a      	ldr	r2, [r1, #24]
 80087a0:	2a00      	cmp	r2, #0
 80087a2:	bf0c      	ite	eq
 80087a4:	2201      	moveq	r2, #1
 80087a6:	f04f 32ff 	movne.w	r2, #4294967295
 80087aa:	608a      	str	r2, [r1, #8]
 80087ac:	6822      	ldr	r2, [r4, #0]
 80087ae:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008840 <_scanf_chars+0xb0>
 80087b2:	06d1      	lsls	r1, r2, #27
 80087b4:	bf5f      	itttt	pl
 80087b6:	681a      	ldrpl	r2, [r3, #0]
 80087b8:	1d11      	addpl	r1, r2, #4
 80087ba:	6019      	strpl	r1, [r3, #0]
 80087bc:	6816      	ldrpl	r6, [r2, #0]
 80087be:	2700      	movs	r7, #0
 80087c0:	69a0      	ldr	r0, [r4, #24]
 80087c2:	b188      	cbz	r0, 80087e8 <_scanf_chars+0x58>
 80087c4:	2801      	cmp	r0, #1
 80087c6:	d107      	bne.n	80087d8 <_scanf_chars+0x48>
 80087c8:	682a      	ldr	r2, [r5, #0]
 80087ca:	7811      	ldrb	r1, [r2, #0]
 80087cc:	6962      	ldr	r2, [r4, #20]
 80087ce:	5c52      	ldrb	r2, [r2, r1]
 80087d0:	b952      	cbnz	r2, 80087e8 <_scanf_chars+0x58>
 80087d2:	2f00      	cmp	r7, #0
 80087d4:	d031      	beq.n	800883a <_scanf_chars+0xaa>
 80087d6:	e022      	b.n	800881e <_scanf_chars+0x8e>
 80087d8:	2802      	cmp	r0, #2
 80087da:	d120      	bne.n	800881e <_scanf_chars+0x8e>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80087e4:	071b      	lsls	r3, r3, #28
 80087e6:	d41a      	bmi.n	800881e <_scanf_chars+0x8e>
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	06da      	lsls	r2, r3, #27
 80087ec:	bf5e      	ittt	pl
 80087ee:	682b      	ldrpl	r3, [r5, #0]
 80087f0:	781b      	ldrbpl	r3, [r3, #0]
 80087f2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80087f6:	682a      	ldr	r2, [r5, #0]
 80087f8:	686b      	ldr	r3, [r5, #4]
 80087fa:	3201      	adds	r2, #1
 80087fc:	602a      	str	r2, [r5, #0]
 80087fe:	68a2      	ldr	r2, [r4, #8]
 8008800:	3b01      	subs	r3, #1
 8008802:	3a01      	subs	r2, #1
 8008804:	606b      	str	r3, [r5, #4]
 8008806:	3701      	adds	r7, #1
 8008808:	60a2      	str	r2, [r4, #8]
 800880a:	b142      	cbz	r2, 800881e <_scanf_chars+0x8e>
 800880c:	2b00      	cmp	r3, #0
 800880e:	dcd7      	bgt.n	80087c0 <_scanf_chars+0x30>
 8008810:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008814:	4629      	mov	r1, r5
 8008816:	4640      	mov	r0, r8
 8008818:	4798      	blx	r3
 800881a:	2800      	cmp	r0, #0
 800881c:	d0d0      	beq.n	80087c0 <_scanf_chars+0x30>
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	f013 0310 	ands.w	r3, r3, #16
 8008824:	d105      	bne.n	8008832 <_scanf_chars+0xa2>
 8008826:	68e2      	ldr	r2, [r4, #12]
 8008828:	3201      	adds	r2, #1
 800882a:	60e2      	str	r2, [r4, #12]
 800882c:	69a2      	ldr	r2, [r4, #24]
 800882e:	b102      	cbz	r2, 8008832 <_scanf_chars+0xa2>
 8008830:	7033      	strb	r3, [r6, #0]
 8008832:	6923      	ldr	r3, [r4, #16]
 8008834:	443b      	add	r3, r7
 8008836:	6123      	str	r3, [r4, #16]
 8008838:	2000      	movs	r0, #0
 800883a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800883e:	bf00      	nop
 8008840:	08009959 	.word	0x08009959

08008844 <_scanf_i>:
 8008844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008848:	4698      	mov	r8, r3
 800884a:	4b76      	ldr	r3, [pc, #472]	; (8008a24 <_scanf_i+0x1e0>)
 800884c:	460c      	mov	r4, r1
 800884e:	4682      	mov	sl, r0
 8008850:	4616      	mov	r6, r2
 8008852:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008856:	b087      	sub	sp, #28
 8008858:	ab03      	add	r3, sp, #12
 800885a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800885e:	4b72      	ldr	r3, [pc, #456]	; (8008a28 <_scanf_i+0x1e4>)
 8008860:	69a1      	ldr	r1, [r4, #24]
 8008862:	4a72      	ldr	r2, [pc, #456]	; (8008a2c <_scanf_i+0x1e8>)
 8008864:	2903      	cmp	r1, #3
 8008866:	bf18      	it	ne
 8008868:	461a      	movne	r2, r3
 800886a:	68a3      	ldr	r3, [r4, #8]
 800886c:	9201      	str	r2, [sp, #4]
 800886e:	1e5a      	subs	r2, r3, #1
 8008870:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008874:	bf88      	it	hi
 8008876:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800887a:	4627      	mov	r7, r4
 800887c:	bf82      	ittt	hi
 800887e:	eb03 0905 	addhi.w	r9, r3, r5
 8008882:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008886:	60a3      	strhi	r3, [r4, #8]
 8008888:	f857 3b1c 	ldr.w	r3, [r7], #28
 800888c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008890:	bf98      	it	ls
 8008892:	f04f 0900 	movls.w	r9, #0
 8008896:	6023      	str	r3, [r4, #0]
 8008898:	463d      	mov	r5, r7
 800889a:	f04f 0b00 	mov.w	fp, #0
 800889e:	6831      	ldr	r1, [r6, #0]
 80088a0:	ab03      	add	r3, sp, #12
 80088a2:	7809      	ldrb	r1, [r1, #0]
 80088a4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80088a8:	2202      	movs	r2, #2
 80088aa:	f7f7 fca1 	bl	80001f0 <memchr>
 80088ae:	b328      	cbz	r0, 80088fc <_scanf_i+0xb8>
 80088b0:	f1bb 0f01 	cmp.w	fp, #1
 80088b4:	d159      	bne.n	800896a <_scanf_i+0x126>
 80088b6:	6862      	ldr	r2, [r4, #4]
 80088b8:	b92a      	cbnz	r2, 80088c6 <_scanf_i+0x82>
 80088ba:	6822      	ldr	r2, [r4, #0]
 80088bc:	2308      	movs	r3, #8
 80088be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088c2:	6063      	str	r3, [r4, #4]
 80088c4:	6022      	str	r2, [r4, #0]
 80088c6:	6822      	ldr	r2, [r4, #0]
 80088c8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80088cc:	6022      	str	r2, [r4, #0]
 80088ce:	68a2      	ldr	r2, [r4, #8]
 80088d0:	1e51      	subs	r1, r2, #1
 80088d2:	60a1      	str	r1, [r4, #8]
 80088d4:	b192      	cbz	r2, 80088fc <_scanf_i+0xb8>
 80088d6:	6832      	ldr	r2, [r6, #0]
 80088d8:	1c51      	adds	r1, r2, #1
 80088da:	6031      	str	r1, [r6, #0]
 80088dc:	7812      	ldrb	r2, [r2, #0]
 80088de:	f805 2b01 	strb.w	r2, [r5], #1
 80088e2:	6872      	ldr	r2, [r6, #4]
 80088e4:	3a01      	subs	r2, #1
 80088e6:	2a00      	cmp	r2, #0
 80088e8:	6072      	str	r2, [r6, #4]
 80088ea:	dc07      	bgt.n	80088fc <_scanf_i+0xb8>
 80088ec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80088f0:	4631      	mov	r1, r6
 80088f2:	4650      	mov	r0, sl
 80088f4:	4790      	blx	r2
 80088f6:	2800      	cmp	r0, #0
 80088f8:	f040 8085 	bne.w	8008a06 <_scanf_i+0x1c2>
 80088fc:	f10b 0b01 	add.w	fp, fp, #1
 8008900:	f1bb 0f03 	cmp.w	fp, #3
 8008904:	d1cb      	bne.n	800889e <_scanf_i+0x5a>
 8008906:	6863      	ldr	r3, [r4, #4]
 8008908:	b90b      	cbnz	r3, 800890e <_scanf_i+0xca>
 800890a:	230a      	movs	r3, #10
 800890c:	6063      	str	r3, [r4, #4]
 800890e:	6863      	ldr	r3, [r4, #4]
 8008910:	4947      	ldr	r1, [pc, #284]	; (8008a30 <_scanf_i+0x1ec>)
 8008912:	6960      	ldr	r0, [r4, #20]
 8008914:	1ac9      	subs	r1, r1, r3
 8008916:	f000 f8b7 	bl	8008a88 <__sccl>
 800891a:	f04f 0b00 	mov.w	fp, #0
 800891e:	68a3      	ldr	r3, [r4, #8]
 8008920:	6822      	ldr	r2, [r4, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d03d      	beq.n	80089a2 <_scanf_i+0x15e>
 8008926:	6831      	ldr	r1, [r6, #0]
 8008928:	6960      	ldr	r0, [r4, #20]
 800892a:	f891 c000 	ldrb.w	ip, [r1]
 800892e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008932:	2800      	cmp	r0, #0
 8008934:	d035      	beq.n	80089a2 <_scanf_i+0x15e>
 8008936:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800893a:	d124      	bne.n	8008986 <_scanf_i+0x142>
 800893c:	0510      	lsls	r0, r2, #20
 800893e:	d522      	bpl.n	8008986 <_scanf_i+0x142>
 8008940:	f10b 0b01 	add.w	fp, fp, #1
 8008944:	f1b9 0f00 	cmp.w	r9, #0
 8008948:	d003      	beq.n	8008952 <_scanf_i+0x10e>
 800894a:	3301      	adds	r3, #1
 800894c:	f109 39ff 	add.w	r9, r9, #4294967295
 8008950:	60a3      	str	r3, [r4, #8]
 8008952:	6873      	ldr	r3, [r6, #4]
 8008954:	3b01      	subs	r3, #1
 8008956:	2b00      	cmp	r3, #0
 8008958:	6073      	str	r3, [r6, #4]
 800895a:	dd1b      	ble.n	8008994 <_scanf_i+0x150>
 800895c:	6833      	ldr	r3, [r6, #0]
 800895e:	3301      	adds	r3, #1
 8008960:	6033      	str	r3, [r6, #0]
 8008962:	68a3      	ldr	r3, [r4, #8]
 8008964:	3b01      	subs	r3, #1
 8008966:	60a3      	str	r3, [r4, #8]
 8008968:	e7d9      	b.n	800891e <_scanf_i+0xda>
 800896a:	f1bb 0f02 	cmp.w	fp, #2
 800896e:	d1ae      	bne.n	80088ce <_scanf_i+0x8a>
 8008970:	6822      	ldr	r2, [r4, #0]
 8008972:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008976:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800897a:	d1bf      	bne.n	80088fc <_scanf_i+0xb8>
 800897c:	2310      	movs	r3, #16
 800897e:	6063      	str	r3, [r4, #4]
 8008980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008984:	e7a2      	b.n	80088cc <_scanf_i+0x88>
 8008986:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800898a:	6022      	str	r2, [r4, #0]
 800898c:	780b      	ldrb	r3, [r1, #0]
 800898e:	f805 3b01 	strb.w	r3, [r5], #1
 8008992:	e7de      	b.n	8008952 <_scanf_i+0x10e>
 8008994:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008998:	4631      	mov	r1, r6
 800899a:	4650      	mov	r0, sl
 800899c:	4798      	blx	r3
 800899e:	2800      	cmp	r0, #0
 80089a0:	d0df      	beq.n	8008962 <_scanf_i+0x11e>
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	05db      	lsls	r3, r3, #23
 80089a6:	d50d      	bpl.n	80089c4 <_scanf_i+0x180>
 80089a8:	42bd      	cmp	r5, r7
 80089aa:	d909      	bls.n	80089c0 <_scanf_i+0x17c>
 80089ac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80089b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80089b4:	4632      	mov	r2, r6
 80089b6:	4650      	mov	r0, sl
 80089b8:	4798      	blx	r3
 80089ba:	f105 39ff 	add.w	r9, r5, #4294967295
 80089be:	464d      	mov	r5, r9
 80089c0:	42bd      	cmp	r5, r7
 80089c2:	d02d      	beq.n	8008a20 <_scanf_i+0x1dc>
 80089c4:	6822      	ldr	r2, [r4, #0]
 80089c6:	f012 0210 	ands.w	r2, r2, #16
 80089ca:	d113      	bne.n	80089f4 <_scanf_i+0x1b0>
 80089cc:	702a      	strb	r2, [r5, #0]
 80089ce:	6863      	ldr	r3, [r4, #4]
 80089d0:	9e01      	ldr	r6, [sp, #4]
 80089d2:	4639      	mov	r1, r7
 80089d4:	4650      	mov	r0, sl
 80089d6:	47b0      	blx	r6
 80089d8:	6821      	ldr	r1, [r4, #0]
 80089da:	f8d8 3000 	ldr.w	r3, [r8]
 80089de:	f011 0f20 	tst.w	r1, #32
 80089e2:	d013      	beq.n	8008a0c <_scanf_i+0x1c8>
 80089e4:	1d1a      	adds	r2, r3, #4
 80089e6:	f8c8 2000 	str.w	r2, [r8]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6018      	str	r0, [r3, #0]
 80089ee:	68e3      	ldr	r3, [r4, #12]
 80089f0:	3301      	adds	r3, #1
 80089f2:	60e3      	str	r3, [r4, #12]
 80089f4:	1bed      	subs	r5, r5, r7
 80089f6:	44ab      	add	fp, r5
 80089f8:	6925      	ldr	r5, [r4, #16]
 80089fa:	445d      	add	r5, fp
 80089fc:	6125      	str	r5, [r4, #16]
 80089fe:	2000      	movs	r0, #0
 8008a00:	b007      	add	sp, #28
 8008a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a06:	f04f 0b00 	mov.w	fp, #0
 8008a0a:	e7ca      	b.n	80089a2 <_scanf_i+0x15e>
 8008a0c:	1d1a      	adds	r2, r3, #4
 8008a0e:	f8c8 2000 	str.w	r2, [r8]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f011 0f01 	tst.w	r1, #1
 8008a18:	bf14      	ite	ne
 8008a1a:	8018      	strhne	r0, [r3, #0]
 8008a1c:	6018      	streq	r0, [r3, #0]
 8008a1e:	e7e6      	b.n	80089ee <_scanf_i+0x1aa>
 8008a20:	2001      	movs	r0, #1
 8008a22:	e7ed      	b.n	8008a00 <_scanf_i+0x1bc>
 8008a24:	08009798 	.word	0x08009798
 8008a28:	08008bdd 	.word	0x08008bdd
 8008a2c:	08006bc5 	.word	0x08006bc5
 8008a30:	08009ca0 	.word	0x08009ca0

08008a34 <_read_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4d07      	ldr	r5, [pc, #28]	; (8008a54 <_read_r+0x20>)
 8008a38:	4604      	mov	r4, r0
 8008a3a:	4608      	mov	r0, r1
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	2200      	movs	r2, #0
 8008a40:	602a      	str	r2, [r5, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	f7f9 fedc 	bl	8002800 <_read>
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	d102      	bne.n	8008a52 <_read_r+0x1e>
 8008a4c:	682b      	ldr	r3, [r5, #0]
 8008a4e:	b103      	cbz	r3, 8008a52 <_read_r+0x1e>
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	bd38      	pop	{r3, r4, r5, pc}
 8008a54:	20000608 	.word	0x20000608

08008a58 <nan>:
 8008a58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008a60 <nan+0x8>
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	00000000 	.word	0x00000000
 8008a64:	7ff80000 	.word	0x7ff80000

08008a68 <_sbrk_r>:
 8008a68:	b538      	push	{r3, r4, r5, lr}
 8008a6a:	4d06      	ldr	r5, [pc, #24]	; (8008a84 <_sbrk_r+0x1c>)
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	4604      	mov	r4, r0
 8008a70:	4608      	mov	r0, r1
 8008a72:	602b      	str	r3, [r5, #0]
 8008a74:	f7f9 feee 	bl	8002854 <_sbrk>
 8008a78:	1c43      	adds	r3, r0, #1
 8008a7a:	d102      	bne.n	8008a82 <_sbrk_r+0x1a>
 8008a7c:	682b      	ldr	r3, [r5, #0]
 8008a7e:	b103      	cbz	r3, 8008a82 <_sbrk_r+0x1a>
 8008a80:	6023      	str	r3, [r4, #0]
 8008a82:	bd38      	pop	{r3, r4, r5, pc}
 8008a84:	20000608 	.word	0x20000608

08008a88 <__sccl>:
 8008a88:	b570      	push	{r4, r5, r6, lr}
 8008a8a:	780b      	ldrb	r3, [r1, #0]
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	2b5e      	cmp	r3, #94	; 0x5e
 8008a90:	bf0b      	itete	eq
 8008a92:	784b      	ldrbeq	r3, [r1, #1]
 8008a94:	1c48      	addne	r0, r1, #1
 8008a96:	1c88      	addeq	r0, r1, #2
 8008a98:	2200      	movne	r2, #0
 8008a9a:	bf08      	it	eq
 8008a9c:	2201      	moveq	r2, #1
 8008a9e:	1e61      	subs	r1, r4, #1
 8008aa0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008aa4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008aa8:	42a9      	cmp	r1, r5
 8008aaa:	d1fb      	bne.n	8008aa4 <__sccl+0x1c>
 8008aac:	b90b      	cbnz	r3, 8008ab2 <__sccl+0x2a>
 8008aae:	3801      	subs	r0, #1
 8008ab0:	bd70      	pop	{r4, r5, r6, pc}
 8008ab2:	f082 0201 	eor.w	r2, r2, #1
 8008ab6:	54e2      	strb	r2, [r4, r3]
 8008ab8:	4605      	mov	r5, r0
 8008aba:	4628      	mov	r0, r5
 8008abc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008ac0:	292d      	cmp	r1, #45	; 0x2d
 8008ac2:	d006      	beq.n	8008ad2 <__sccl+0x4a>
 8008ac4:	295d      	cmp	r1, #93	; 0x5d
 8008ac6:	d0f3      	beq.n	8008ab0 <__sccl+0x28>
 8008ac8:	b909      	cbnz	r1, 8008ace <__sccl+0x46>
 8008aca:	4628      	mov	r0, r5
 8008acc:	e7f0      	b.n	8008ab0 <__sccl+0x28>
 8008ace:	460b      	mov	r3, r1
 8008ad0:	e7f1      	b.n	8008ab6 <__sccl+0x2e>
 8008ad2:	786e      	ldrb	r6, [r5, #1]
 8008ad4:	2e5d      	cmp	r6, #93	; 0x5d
 8008ad6:	d0fa      	beq.n	8008ace <__sccl+0x46>
 8008ad8:	42b3      	cmp	r3, r6
 8008ada:	dcf8      	bgt.n	8008ace <__sccl+0x46>
 8008adc:	3502      	adds	r5, #2
 8008ade:	4619      	mov	r1, r3
 8008ae0:	3101      	adds	r1, #1
 8008ae2:	428e      	cmp	r6, r1
 8008ae4:	5462      	strb	r2, [r4, r1]
 8008ae6:	dcfb      	bgt.n	8008ae0 <__sccl+0x58>
 8008ae8:	1af1      	subs	r1, r6, r3
 8008aea:	3901      	subs	r1, #1
 8008aec:	1c58      	adds	r0, r3, #1
 8008aee:	42b3      	cmp	r3, r6
 8008af0:	bfa8      	it	ge
 8008af2:	2100      	movge	r1, #0
 8008af4:	1843      	adds	r3, r0, r1
 8008af6:	e7e0      	b.n	8008aba <__sccl+0x32>

08008af8 <_strtoul_l.constprop.0>:
 8008af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008afc:	4f36      	ldr	r7, [pc, #216]	; (8008bd8 <_strtoul_l.constprop.0+0xe0>)
 8008afe:	4686      	mov	lr, r0
 8008b00:	460d      	mov	r5, r1
 8008b02:	4628      	mov	r0, r5
 8008b04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b08:	5de6      	ldrb	r6, [r4, r7]
 8008b0a:	f016 0608 	ands.w	r6, r6, #8
 8008b0e:	d1f8      	bne.n	8008b02 <_strtoul_l.constprop.0+0xa>
 8008b10:	2c2d      	cmp	r4, #45	; 0x2d
 8008b12:	d12f      	bne.n	8008b74 <_strtoul_l.constprop.0+0x7c>
 8008b14:	782c      	ldrb	r4, [r5, #0]
 8008b16:	2601      	movs	r6, #1
 8008b18:	1c85      	adds	r5, r0, #2
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d057      	beq.n	8008bce <_strtoul_l.constprop.0+0xd6>
 8008b1e:	2b10      	cmp	r3, #16
 8008b20:	d109      	bne.n	8008b36 <_strtoul_l.constprop.0+0x3e>
 8008b22:	2c30      	cmp	r4, #48	; 0x30
 8008b24:	d107      	bne.n	8008b36 <_strtoul_l.constprop.0+0x3e>
 8008b26:	7828      	ldrb	r0, [r5, #0]
 8008b28:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008b2c:	2858      	cmp	r0, #88	; 0x58
 8008b2e:	d149      	bne.n	8008bc4 <_strtoul_l.constprop.0+0xcc>
 8008b30:	786c      	ldrb	r4, [r5, #1]
 8008b32:	2310      	movs	r3, #16
 8008b34:	3502      	adds	r5, #2
 8008b36:	f04f 38ff 	mov.w	r8, #4294967295
 8008b3a:	2700      	movs	r7, #0
 8008b3c:	fbb8 f8f3 	udiv	r8, r8, r3
 8008b40:	fb03 f908 	mul.w	r9, r3, r8
 8008b44:	ea6f 0909 	mvn.w	r9, r9
 8008b48:	4638      	mov	r0, r7
 8008b4a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008b4e:	f1bc 0f09 	cmp.w	ip, #9
 8008b52:	d814      	bhi.n	8008b7e <_strtoul_l.constprop.0+0x86>
 8008b54:	4664      	mov	r4, ip
 8008b56:	42a3      	cmp	r3, r4
 8008b58:	dd22      	ble.n	8008ba0 <_strtoul_l.constprop.0+0xa8>
 8008b5a:	2f00      	cmp	r7, #0
 8008b5c:	db1d      	blt.n	8008b9a <_strtoul_l.constprop.0+0xa2>
 8008b5e:	4580      	cmp	r8, r0
 8008b60:	d31b      	bcc.n	8008b9a <_strtoul_l.constprop.0+0xa2>
 8008b62:	d101      	bne.n	8008b68 <_strtoul_l.constprop.0+0x70>
 8008b64:	45a1      	cmp	r9, r4
 8008b66:	db18      	blt.n	8008b9a <_strtoul_l.constprop.0+0xa2>
 8008b68:	fb00 4003 	mla	r0, r0, r3, r4
 8008b6c:	2701      	movs	r7, #1
 8008b6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b72:	e7ea      	b.n	8008b4a <_strtoul_l.constprop.0+0x52>
 8008b74:	2c2b      	cmp	r4, #43	; 0x2b
 8008b76:	bf04      	itt	eq
 8008b78:	782c      	ldrbeq	r4, [r5, #0]
 8008b7a:	1c85      	addeq	r5, r0, #2
 8008b7c:	e7cd      	b.n	8008b1a <_strtoul_l.constprop.0+0x22>
 8008b7e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008b82:	f1bc 0f19 	cmp.w	ip, #25
 8008b86:	d801      	bhi.n	8008b8c <_strtoul_l.constprop.0+0x94>
 8008b88:	3c37      	subs	r4, #55	; 0x37
 8008b8a:	e7e4      	b.n	8008b56 <_strtoul_l.constprop.0+0x5e>
 8008b8c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008b90:	f1bc 0f19 	cmp.w	ip, #25
 8008b94:	d804      	bhi.n	8008ba0 <_strtoul_l.constprop.0+0xa8>
 8008b96:	3c57      	subs	r4, #87	; 0x57
 8008b98:	e7dd      	b.n	8008b56 <_strtoul_l.constprop.0+0x5e>
 8008b9a:	f04f 37ff 	mov.w	r7, #4294967295
 8008b9e:	e7e6      	b.n	8008b6e <_strtoul_l.constprop.0+0x76>
 8008ba0:	2f00      	cmp	r7, #0
 8008ba2:	da07      	bge.n	8008bb4 <_strtoul_l.constprop.0+0xbc>
 8008ba4:	2322      	movs	r3, #34	; 0x22
 8008ba6:	f8ce 3000 	str.w	r3, [lr]
 8008baa:	f04f 30ff 	mov.w	r0, #4294967295
 8008bae:	b932      	cbnz	r2, 8008bbe <_strtoul_l.constprop.0+0xc6>
 8008bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bb4:	b106      	cbz	r6, 8008bb8 <_strtoul_l.constprop.0+0xc0>
 8008bb6:	4240      	negs	r0, r0
 8008bb8:	2a00      	cmp	r2, #0
 8008bba:	d0f9      	beq.n	8008bb0 <_strtoul_l.constprop.0+0xb8>
 8008bbc:	b107      	cbz	r7, 8008bc0 <_strtoul_l.constprop.0+0xc8>
 8008bbe:	1e69      	subs	r1, r5, #1
 8008bc0:	6011      	str	r1, [r2, #0]
 8008bc2:	e7f5      	b.n	8008bb0 <_strtoul_l.constprop.0+0xb8>
 8008bc4:	2430      	movs	r4, #48	; 0x30
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1b5      	bne.n	8008b36 <_strtoul_l.constprop.0+0x3e>
 8008bca:	2308      	movs	r3, #8
 8008bcc:	e7b3      	b.n	8008b36 <_strtoul_l.constprop.0+0x3e>
 8008bce:	2c30      	cmp	r4, #48	; 0x30
 8008bd0:	d0a9      	beq.n	8008b26 <_strtoul_l.constprop.0+0x2e>
 8008bd2:	230a      	movs	r3, #10
 8008bd4:	e7af      	b.n	8008b36 <_strtoul_l.constprop.0+0x3e>
 8008bd6:	bf00      	nop
 8008bd8:	08009959 	.word	0x08009959

08008bdc <_strtoul_r>:
 8008bdc:	f7ff bf8c 	b.w	8008af8 <_strtoul_l.constprop.0>

08008be0 <__submore>:
 8008be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be4:	460c      	mov	r4, r1
 8008be6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008be8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bec:	4299      	cmp	r1, r3
 8008bee:	d11d      	bne.n	8008c2c <__submore+0x4c>
 8008bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008bf4:	f7ff f896 	bl	8007d24 <_malloc_r>
 8008bf8:	b918      	cbnz	r0, 8008c02 <__submore+0x22>
 8008bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c06:	63a3      	str	r3, [r4, #56]	; 0x38
 8008c08:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008c0c:	6360      	str	r0, [r4, #52]	; 0x34
 8008c0e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008c12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008c16:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008c1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008c1e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008c22:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008c26:	6020      	str	r0, [r4, #0]
 8008c28:	2000      	movs	r0, #0
 8008c2a:	e7e8      	b.n	8008bfe <__submore+0x1e>
 8008c2c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008c2e:	0077      	lsls	r7, r6, #1
 8008c30:	463a      	mov	r2, r7
 8008c32:	f000 fa81 	bl	8009138 <_realloc_r>
 8008c36:	4605      	mov	r5, r0
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d0de      	beq.n	8008bfa <__submore+0x1a>
 8008c3c:	eb00 0806 	add.w	r8, r0, r6
 8008c40:	4601      	mov	r1, r0
 8008c42:	4632      	mov	r2, r6
 8008c44:	4640      	mov	r0, r8
 8008c46:	f7fc fe3f 	bl	80058c8 <memcpy>
 8008c4a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008c4e:	f8c4 8000 	str.w	r8, [r4]
 8008c52:	e7e9      	b.n	8008c28 <__submore+0x48>

08008c54 <__ascii_wctomb>:
 8008c54:	b149      	cbz	r1, 8008c6a <__ascii_wctomb+0x16>
 8008c56:	2aff      	cmp	r2, #255	; 0xff
 8008c58:	bf85      	ittet	hi
 8008c5a:	238a      	movhi	r3, #138	; 0x8a
 8008c5c:	6003      	strhi	r3, [r0, #0]
 8008c5e:	700a      	strbls	r2, [r1, #0]
 8008c60:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c64:	bf98      	it	ls
 8008c66:	2001      	movls	r0, #1
 8008c68:	4770      	bx	lr
 8008c6a:	4608      	mov	r0, r1
 8008c6c:	4770      	bx	lr
	...

08008c70 <__assert_func>:
 8008c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c72:	4614      	mov	r4, r2
 8008c74:	461a      	mov	r2, r3
 8008c76:	4b09      	ldr	r3, [pc, #36]	; (8008c9c <__assert_func+0x2c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	68d8      	ldr	r0, [r3, #12]
 8008c7e:	b14c      	cbz	r4, 8008c94 <__assert_func+0x24>
 8008c80:	4b07      	ldr	r3, [pc, #28]	; (8008ca0 <__assert_func+0x30>)
 8008c82:	9100      	str	r1, [sp, #0]
 8008c84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c88:	4906      	ldr	r1, [pc, #24]	; (8008ca4 <__assert_func+0x34>)
 8008c8a:	462b      	mov	r3, r5
 8008c8c:	f000 f9a6 	bl	8008fdc <fiprintf>
 8008c90:	f000 fc9a 	bl	80095c8 <abort>
 8008c94:	4b04      	ldr	r3, [pc, #16]	; (8008ca8 <__assert_func+0x38>)
 8008c96:	461c      	mov	r4, r3
 8008c98:	e7f3      	b.n	8008c82 <__assert_func+0x12>
 8008c9a:	bf00      	nop
 8008c9c:	2000000c 	.word	0x2000000c
 8008ca0:	08009ca2 	.word	0x08009ca2
 8008ca4:	08009caf 	.word	0x08009caf
 8008ca8:	08009cdd 	.word	0x08009cdd

08008cac <__sflush_r>:
 8008cac:	898a      	ldrh	r2, [r1, #12]
 8008cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	0710      	lsls	r0, r2, #28
 8008cb6:	460c      	mov	r4, r1
 8008cb8:	d458      	bmi.n	8008d6c <__sflush_r+0xc0>
 8008cba:	684b      	ldr	r3, [r1, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	dc05      	bgt.n	8008ccc <__sflush_r+0x20>
 8008cc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	dc02      	bgt.n	8008ccc <__sflush_r+0x20>
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	d0f9      	beq.n	8008cc6 <__sflush_r+0x1a>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008cd8:	682f      	ldr	r7, [r5, #0]
 8008cda:	602b      	str	r3, [r5, #0]
 8008cdc:	d032      	beq.n	8008d44 <__sflush_r+0x98>
 8008cde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ce0:	89a3      	ldrh	r3, [r4, #12]
 8008ce2:	075a      	lsls	r2, r3, #29
 8008ce4:	d505      	bpl.n	8008cf2 <__sflush_r+0x46>
 8008ce6:	6863      	ldr	r3, [r4, #4]
 8008ce8:	1ac0      	subs	r0, r0, r3
 8008cea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cec:	b10b      	cbz	r3, 8008cf2 <__sflush_r+0x46>
 8008cee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cf0:	1ac0      	subs	r0, r0, r3
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cf8:	6a21      	ldr	r1, [r4, #32]
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	47b0      	blx	r6
 8008cfe:	1c43      	adds	r3, r0, #1
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	d106      	bne.n	8008d12 <__sflush_r+0x66>
 8008d04:	6829      	ldr	r1, [r5, #0]
 8008d06:	291d      	cmp	r1, #29
 8008d08:	d82c      	bhi.n	8008d64 <__sflush_r+0xb8>
 8008d0a:	4a2a      	ldr	r2, [pc, #168]	; (8008db4 <__sflush_r+0x108>)
 8008d0c:	40ca      	lsrs	r2, r1
 8008d0e:	07d6      	lsls	r6, r2, #31
 8008d10:	d528      	bpl.n	8008d64 <__sflush_r+0xb8>
 8008d12:	2200      	movs	r2, #0
 8008d14:	6062      	str	r2, [r4, #4]
 8008d16:	04d9      	lsls	r1, r3, #19
 8008d18:	6922      	ldr	r2, [r4, #16]
 8008d1a:	6022      	str	r2, [r4, #0]
 8008d1c:	d504      	bpl.n	8008d28 <__sflush_r+0x7c>
 8008d1e:	1c42      	adds	r2, r0, #1
 8008d20:	d101      	bne.n	8008d26 <__sflush_r+0x7a>
 8008d22:	682b      	ldr	r3, [r5, #0]
 8008d24:	b903      	cbnz	r3, 8008d28 <__sflush_r+0x7c>
 8008d26:	6560      	str	r0, [r4, #84]	; 0x54
 8008d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d2a:	602f      	str	r7, [r5, #0]
 8008d2c:	2900      	cmp	r1, #0
 8008d2e:	d0ca      	beq.n	8008cc6 <__sflush_r+0x1a>
 8008d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d34:	4299      	cmp	r1, r3
 8008d36:	d002      	beq.n	8008d3e <__sflush_r+0x92>
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f000 f9b1 	bl	80090a0 <_free_r>
 8008d3e:	2000      	movs	r0, #0
 8008d40:	6360      	str	r0, [r4, #52]	; 0x34
 8008d42:	e7c1      	b.n	8008cc8 <__sflush_r+0x1c>
 8008d44:	6a21      	ldr	r1, [r4, #32]
 8008d46:	2301      	movs	r3, #1
 8008d48:	4628      	mov	r0, r5
 8008d4a:	47b0      	blx	r6
 8008d4c:	1c41      	adds	r1, r0, #1
 8008d4e:	d1c7      	bne.n	8008ce0 <__sflush_r+0x34>
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0c4      	beq.n	8008ce0 <__sflush_r+0x34>
 8008d56:	2b1d      	cmp	r3, #29
 8008d58:	d001      	beq.n	8008d5e <__sflush_r+0xb2>
 8008d5a:	2b16      	cmp	r3, #22
 8008d5c:	d101      	bne.n	8008d62 <__sflush_r+0xb6>
 8008d5e:	602f      	str	r7, [r5, #0]
 8008d60:	e7b1      	b.n	8008cc6 <__sflush_r+0x1a>
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d68:	81a3      	strh	r3, [r4, #12]
 8008d6a:	e7ad      	b.n	8008cc8 <__sflush_r+0x1c>
 8008d6c:	690f      	ldr	r7, [r1, #16]
 8008d6e:	2f00      	cmp	r7, #0
 8008d70:	d0a9      	beq.n	8008cc6 <__sflush_r+0x1a>
 8008d72:	0793      	lsls	r3, r2, #30
 8008d74:	680e      	ldr	r6, [r1, #0]
 8008d76:	bf08      	it	eq
 8008d78:	694b      	ldreq	r3, [r1, #20]
 8008d7a:	600f      	str	r7, [r1, #0]
 8008d7c:	bf18      	it	ne
 8008d7e:	2300      	movne	r3, #0
 8008d80:	eba6 0807 	sub.w	r8, r6, r7
 8008d84:	608b      	str	r3, [r1, #8]
 8008d86:	f1b8 0f00 	cmp.w	r8, #0
 8008d8a:	dd9c      	ble.n	8008cc6 <__sflush_r+0x1a>
 8008d8c:	6a21      	ldr	r1, [r4, #32]
 8008d8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d90:	4643      	mov	r3, r8
 8008d92:	463a      	mov	r2, r7
 8008d94:	4628      	mov	r0, r5
 8008d96:	47b0      	blx	r6
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	dc06      	bgt.n	8008daa <__sflush_r+0xfe>
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008da2:	81a3      	strh	r3, [r4, #12]
 8008da4:	f04f 30ff 	mov.w	r0, #4294967295
 8008da8:	e78e      	b.n	8008cc8 <__sflush_r+0x1c>
 8008daa:	4407      	add	r7, r0
 8008dac:	eba8 0800 	sub.w	r8, r8, r0
 8008db0:	e7e9      	b.n	8008d86 <__sflush_r+0xda>
 8008db2:	bf00      	nop
 8008db4:	20400001 	.word	0x20400001

08008db8 <_fflush_r>:
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	690b      	ldr	r3, [r1, #16]
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	b913      	cbnz	r3, 8008dc8 <_fflush_r+0x10>
 8008dc2:	2500      	movs	r5, #0
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}
 8008dc8:	b118      	cbz	r0, 8008dd2 <_fflush_r+0x1a>
 8008dca:	6983      	ldr	r3, [r0, #24]
 8008dcc:	b90b      	cbnz	r3, 8008dd2 <_fflush_r+0x1a>
 8008dce:	f000 f887 	bl	8008ee0 <__sinit>
 8008dd2:	4b14      	ldr	r3, [pc, #80]	; (8008e24 <_fflush_r+0x6c>)
 8008dd4:	429c      	cmp	r4, r3
 8008dd6:	d11b      	bne.n	8008e10 <_fflush_r+0x58>
 8008dd8:	686c      	ldr	r4, [r5, #4]
 8008dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0ef      	beq.n	8008dc2 <_fflush_r+0xa>
 8008de2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008de4:	07d0      	lsls	r0, r2, #31
 8008de6:	d404      	bmi.n	8008df2 <_fflush_r+0x3a>
 8008de8:	0599      	lsls	r1, r3, #22
 8008dea:	d402      	bmi.n	8008df2 <_fflush_r+0x3a>
 8008dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dee:	f000 f927 	bl	8009040 <__retarget_lock_acquire_recursive>
 8008df2:	4628      	mov	r0, r5
 8008df4:	4621      	mov	r1, r4
 8008df6:	f7ff ff59 	bl	8008cac <__sflush_r>
 8008dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dfc:	07da      	lsls	r2, r3, #31
 8008dfe:	4605      	mov	r5, r0
 8008e00:	d4e0      	bmi.n	8008dc4 <_fflush_r+0xc>
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	059b      	lsls	r3, r3, #22
 8008e06:	d4dd      	bmi.n	8008dc4 <_fflush_r+0xc>
 8008e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e0a:	f000 f91a 	bl	8009042 <__retarget_lock_release_recursive>
 8008e0e:	e7d9      	b.n	8008dc4 <_fflush_r+0xc>
 8008e10:	4b05      	ldr	r3, [pc, #20]	; (8008e28 <_fflush_r+0x70>)
 8008e12:	429c      	cmp	r4, r3
 8008e14:	d101      	bne.n	8008e1a <_fflush_r+0x62>
 8008e16:	68ac      	ldr	r4, [r5, #8]
 8008e18:	e7df      	b.n	8008dda <_fflush_r+0x22>
 8008e1a:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <_fflush_r+0x74>)
 8008e1c:	429c      	cmp	r4, r3
 8008e1e:	bf08      	it	eq
 8008e20:	68ec      	ldreq	r4, [r5, #12]
 8008e22:	e7da      	b.n	8008dda <_fflush_r+0x22>
 8008e24:	08009d00 	.word	0x08009d00
 8008e28:	08009d20 	.word	0x08009d20
 8008e2c:	08009ce0 	.word	0x08009ce0

08008e30 <std>:
 8008e30:	2300      	movs	r3, #0
 8008e32:	b510      	push	{r4, lr}
 8008e34:	4604      	mov	r4, r0
 8008e36:	e9c0 3300 	strd	r3, r3, [r0]
 8008e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e3e:	6083      	str	r3, [r0, #8]
 8008e40:	8181      	strh	r1, [r0, #12]
 8008e42:	6643      	str	r3, [r0, #100]	; 0x64
 8008e44:	81c2      	strh	r2, [r0, #14]
 8008e46:	6183      	str	r3, [r0, #24]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	2208      	movs	r2, #8
 8008e4c:	305c      	adds	r0, #92	; 0x5c
 8008e4e:	f7fc fd49 	bl	80058e4 <memset>
 8008e52:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <std+0x38>)
 8008e54:	6263      	str	r3, [r4, #36]	; 0x24
 8008e56:	4b05      	ldr	r3, [pc, #20]	; (8008e6c <std+0x3c>)
 8008e58:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e5a:	4b05      	ldr	r3, [pc, #20]	; (8008e70 <std+0x40>)
 8008e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e5e:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <std+0x44>)
 8008e60:	6224      	str	r4, [r4, #32]
 8008e62:	6323      	str	r3, [r4, #48]	; 0x30
 8008e64:	bd10      	pop	{r4, pc}
 8008e66:	bf00      	nop
 8008e68:	08005db9 	.word	0x08005db9
 8008e6c:	08005ddf 	.word	0x08005ddf
 8008e70:	08005e17 	.word	0x08005e17
 8008e74:	08005e3b 	.word	0x08005e3b

08008e78 <_cleanup_r>:
 8008e78:	4901      	ldr	r1, [pc, #4]	; (8008e80 <_cleanup_r+0x8>)
 8008e7a:	f000 b8c1 	b.w	8009000 <_fwalk_reent>
 8008e7e:	bf00      	nop
 8008e80:	08008db9 	.word	0x08008db9

08008e84 <__sfmoreglue>:
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	2268      	movs	r2, #104	; 0x68
 8008e88:	1e4d      	subs	r5, r1, #1
 8008e8a:	4355      	muls	r5, r2
 8008e8c:	460e      	mov	r6, r1
 8008e8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e92:	f7fe ff47 	bl	8007d24 <_malloc_r>
 8008e96:	4604      	mov	r4, r0
 8008e98:	b140      	cbz	r0, 8008eac <__sfmoreglue+0x28>
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	e9c0 1600 	strd	r1, r6, [r0]
 8008ea0:	300c      	adds	r0, #12
 8008ea2:	60a0      	str	r0, [r4, #8]
 8008ea4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ea8:	f7fc fd1c 	bl	80058e4 <memset>
 8008eac:	4620      	mov	r0, r4
 8008eae:	bd70      	pop	{r4, r5, r6, pc}

08008eb0 <__sfp_lock_acquire>:
 8008eb0:	4801      	ldr	r0, [pc, #4]	; (8008eb8 <__sfp_lock_acquire+0x8>)
 8008eb2:	f000 b8c5 	b.w	8009040 <__retarget_lock_acquire_recursive>
 8008eb6:	bf00      	nop
 8008eb8:	2000060d 	.word	0x2000060d

08008ebc <__sfp_lock_release>:
 8008ebc:	4801      	ldr	r0, [pc, #4]	; (8008ec4 <__sfp_lock_release+0x8>)
 8008ebe:	f000 b8c0 	b.w	8009042 <__retarget_lock_release_recursive>
 8008ec2:	bf00      	nop
 8008ec4:	2000060d 	.word	0x2000060d

08008ec8 <__sinit_lock_acquire>:
 8008ec8:	4801      	ldr	r0, [pc, #4]	; (8008ed0 <__sinit_lock_acquire+0x8>)
 8008eca:	f000 b8b9 	b.w	8009040 <__retarget_lock_acquire_recursive>
 8008ece:	bf00      	nop
 8008ed0:	2000060e 	.word	0x2000060e

08008ed4 <__sinit_lock_release>:
 8008ed4:	4801      	ldr	r0, [pc, #4]	; (8008edc <__sinit_lock_release+0x8>)
 8008ed6:	f000 b8b4 	b.w	8009042 <__retarget_lock_release_recursive>
 8008eda:	bf00      	nop
 8008edc:	2000060e 	.word	0x2000060e

08008ee0 <__sinit>:
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	f7ff fff0 	bl	8008ec8 <__sinit_lock_acquire>
 8008ee8:	69a3      	ldr	r3, [r4, #24]
 8008eea:	b11b      	cbz	r3, 8008ef4 <__sinit+0x14>
 8008eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ef0:	f7ff bff0 	b.w	8008ed4 <__sinit_lock_release>
 8008ef4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ef8:	6523      	str	r3, [r4, #80]	; 0x50
 8008efa:	4b13      	ldr	r3, [pc, #76]	; (8008f48 <__sinit+0x68>)
 8008efc:	4a13      	ldr	r2, [pc, #76]	; (8008f4c <__sinit+0x6c>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f02:	42a3      	cmp	r3, r4
 8008f04:	bf04      	itt	eq
 8008f06:	2301      	moveq	r3, #1
 8008f08:	61a3      	streq	r3, [r4, #24]
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f000 f820 	bl	8008f50 <__sfp>
 8008f10:	6060      	str	r0, [r4, #4]
 8008f12:	4620      	mov	r0, r4
 8008f14:	f000 f81c 	bl	8008f50 <__sfp>
 8008f18:	60a0      	str	r0, [r4, #8]
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 f818 	bl	8008f50 <__sfp>
 8008f20:	2200      	movs	r2, #0
 8008f22:	60e0      	str	r0, [r4, #12]
 8008f24:	2104      	movs	r1, #4
 8008f26:	6860      	ldr	r0, [r4, #4]
 8008f28:	f7ff ff82 	bl	8008e30 <std>
 8008f2c:	68a0      	ldr	r0, [r4, #8]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	2109      	movs	r1, #9
 8008f32:	f7ff ff7d 	bl	8008e30 <std>
 8008f36:	68e0      	ldr	r0, [r4, #12]
 8008f38:	2202      	movs	r2, #2
 8008f3a:	2112      	movs	r1, #18
 8008f3c:	f7ff ff78 	bl	8008e30 <std>
 8008f40:	2301      	movs	r3, #1
 8008f42:	61a3      	str	r3, [r4, #24]
 8008f44:	e7d2      	b.n	8008eec <__sinit+0xc>
 8008f46:	bf00      	nop
 8008f48:	080098ec 	.word	0x080098ec
 8008f4c:	08008e79 	.word	0x08008e79

08008f50 <__sfp>:
 8008f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f52:	4607      	mov	r7, r0
 8008f54:	f7ff ffac 	bl	8008eb0 <__sfp_lock_acquire>
 8008f58:	4b1e      	ldr	r3, [pc, #120]	; (8008fd4 <__sfp+0x84>)
 8008f5a:	681e      	ldr	r6, [r3, #0]
 8008f5c:	69b3      	ldr	r3, [r6, #24]
 8008f5e:	b913      	cbnz	r3, 8008f66 <__sfp+0x16>
 8008f60:	4630      	mov	r0, r6
 8008f62:	f7ff ffbd 	bl	8008ee0 <__sinit>
 8008f66:	3648      	adds	r6, #72	; 0x48
 8008f68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	d503      	bpl.n	8008f78 <__sfp+0x28>
 8008f70:	6833      	ldr	r3, [r6, #0]
 8008f72:	b30b      	cbz	r3, 8008fb8 <__sfp+0x68>
 8008f74:	6836      	ldr	r6, [r6, #0]
 8008f76:	e7f7      	b.n	8008f68 <__sfp+0x18>
 8008f78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f7c:	b9d5      	cbnz	r5, 8008fb4 <__sfp+0x64>
 8008f7e:	4b16      	ldr	r3, [pc, #88]	; (8008fd8 <__sfp+0x88>)
 8008f80:	60e3      	str	r3, [r4, #12]
 8008f82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f86:	6665      	str	r5, [r4, #100]	; 0x64
 8008f88:	f000 f859 	bl	800903e <__retarget_lock_init_recursive>
 8008f8c:	f7ff ff96 	bl	8008ebc <__sfp_lock_release>
 8008f90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f98:	6025      	str	r5, [r4, #0]
 8008f9a:	61a5      	str	r5, [r4, #24]
 8008f9c:	2208      	movs	r2, #8
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008fa4:	f7fc fc9e 	bl	80058e4 <memset>
 8008fa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008fac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fb4:	3468      	adds	r4, #104	; 0x68
 8008fb6:	e7d9      	b.n	8008f6c <__sfp+0x1c>
 8008fb8:	2104      	movs	r1, #4
 8008fba:	4638      	mov	r0, r7
 8008fbc:	f7ff ff62 	bl	8008e84 <__sfmoreglue>
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	6030      	str	r0, [r6, #0]
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d1d5      	bne.n	8008f74 <__sfp+0x24>
 8008fc8:	f7ff ff78 	bl	8008ebc <__sfp_lock_release>
 8008fcc:	230c      	movs	r3, #12
 8008fce:	603b      	str	r3, [r7, #0]
 8008fd0:	e7ee      	b.n	8008fb0 <__sfp+0x60>
 8008fd2:	bf00      	nop
 8008fd4:	080098ec 	.word	0x080098ec
 8008fd8:	ffff0001 	.word	0xffff0001

08008fdc <fiprintf>:
 8008fdc:	b40e      	push	{r1, r2, r3}
 8008fde:	b503      	push	{r0, r1, lr}
 8008fe0:	4601      	mov	r1, r0
 8008fe2:	ab03      	add	r3, sp, #12
 8008fe4:	4805      	ldr	r0, [pc, #20]	; (8008ffc <fiprintf+0x20>)
 8008fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fea:	6800      	ldr	r0, [r0, #0]
 8008fec:	9301      	str	r3, [sp, #4]
 8008fee:	f000 f8fb 	bl	80091e8 <_vfiprintf_r>
 8008ff2:	b002      	add	sp, #8
 8008ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ff8:	b003      	add	sp, #12
 8008ffa:	4770      	bx	lr
 8008ffc:	2000000c 	.word	0x2000000c

08009000 <_fwalk_reent>:
 8009000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009004:	4606      	mov	r6, r0
 8009006:	4688      	mov	r8, r1
 8009008:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800900c:	2700      	movs	r7, #0
 800900e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009012:	f1b9 0901 	subs.w	r9, r9, #1
 8009016:	d505      	bpl.n	8009024 <_fwalk_reent+0x24>
 8009018:	6824      	ldr	r4, [r4, #0]
 800901a:	2c00      	cmp	r4, #0
 800901c:	d1f7      	bne.n	800900e <_fwalk_reent+0xe>
 800901e:	4638      	mov	r0, r7
 8009020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009024:	89ab      	ldrh	r3, [r5, #12]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d907      	bls.n	800903a <_fwalk_reent+0x3a>
 800902a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800902e:	3301      	adds	r3, #1
 8009030:	d003      	beq.n	800903a <_fwalk_reent+0x3a>
 8009032:	4629      	mov	r1, r5
 8009034:	4630      	mov	r0, r6
 8009036:	47c0      	blx	r8
 8009038:	4307      	orrs	r7, r0
 800903a:	3568      	adds	r5, #104	; 0x68
 800903c:	e7e9      	b.n	8009012 <_fwalk_reent+0x12>

0800903e <__retarget_lock_init_recursive>:
 800903e:	4770      	bx	lr

08009040 <__retarget_lock_acquire_recursive>:
 8009040:	4770      	bx	lr

08009042 <__retarget_lock_release_recursive>:
 8009042:	4770      	bx	lr

08009044 <malloc>:
 8009044:	4b02      	ldr	r3, [pc, #8]	; (8009050 <malloc+0xc>)
 8009046:	4601      	mov	r1, r0
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	f7fe be6b 	b.w	8007d24 <_malloc_r>
 800904e:	bf00      	nop
 8009050:	2000000c 	.word	0x2000000c

08009054 <memmove>:
 8009054:	4288      	cmp	r0, r1
 8009056:	b510      	push	{r4, lr}
 8009058:	eb01 0402 	add.w	r4, r1, r2
 800905c:	d902      	bls.n	8009064 <memmove+0x10>
 800905e:	4284      	cmp	r4, r0
 8009060:	4623      	mov	r3, r4
 8009062:	d807      	bhi.n	8009074 <memmove+0x20>
 8009064:	1e43      	subs	r3, r0, #1
 8009066:	42a1      	cmp	r1, r4
 8009068:	d008      	beq.n	800907c <memmove+0x28>
 800906a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800906e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009072:	e7f8      	b.n	8009066 <memmove+0x12>
 8009074:	4402      	add	r2, r0
 8009076:	4601      	mov	r1, r0
 8009078:	428a      	cmp	r2, r1
 800907a:	d100      	bne.n	800907e <memmove+0x2a>
 800907c:	bd10      	pop	{r4, pc}
 800907e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009086:	e7f7      	b.n	8009078 <memmove+0x24>

08009088 <__malloc_lock>:
 8009088:	4801      	ldr	r0, [pc, #4]	; (8009090 <__malloc_lock+0x8>)
 800908a:	f7ff bfd9 	b.w	8009040 <__retarget_lock_acquire_recursive>
 800908e:	bf00      	nop
 8009090:	2000060c 	.word	0x2000060c

08009094 <__malloc_unlock>:
 8009094:	4801      	ldr	r0, [pc, #4]	; (800909c <__malloc_unlock+0x8>)
 8009096:	f7ff bfd4 	b.w	8009042 <__retarget_lock_release_recursive>
 800909a:	bf00      	nop
 800909c:	2000060c 	.word	0x2000060c

080090a0 <_free_r>:
 80090a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090a2:	2900      	cmp	r1, #0
 80090a4:	d044      	beq.n	8009130 <_free_r+0x90>
 80090a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090aa:	9001      	str	r0, [sp, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f1a1 0404 	sub.w	r4, r1, #4
 80090b2:	bfb8      	it	lt
 80090b4:	18e4      	addlt	r4, r4, r3
 80090b6:	f7ff ffe7 	bl	8009088 <__malloc_lock>
 80090ba:	4a1e      	ldr	r2, [pc, #120]	; (8009134 <_free_r+0x94>)
 80090bc:	9801      	ldr	r0, [sp, #4]
 80090be:	6813      	ldr	r3, [r2, #0]
 80090c0:	b933      	cbnz	r3, 80090d0 <_free_r+0x30>
 80090c2:	6063      	str	r3, [r4, #4]
 80090c4:	6014      	str	r4, [r2, #0]
 80090c6:	b003      	add	sp, #12
 80090c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090cc:	f7ff bfe2 	b.w	8009094 <__malloc_unlock>
 80090d0:	42a3      	cmp	r3, r4
 80090d2:	d908      	bls.n	80090e6 <_free_r+0x46>
 80090d4:	6825      	ldr	r5, [r4, #0]
 80090d6:	1961      	adds	r1, r4, r5
 80090d8:	428b      	cmp	r3, r1
 80090da:	bf01      	itttt	eq
 80090dc:	6819      	ldreq	r1, [r3, #0]
 80090de:	685b      	ldreq	r3, [r3, #4]
 80090e0:	1949      	addeq	r1, r1, r5
 80090e2:	6021      	streq	r1, [r4, #0]
 80090e4:	e7ed      	b.n	80090c2 <_free_r+0x22>
 80090e6:	461a      	mov	r2, r3
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	b10b      	cbz	r3, 80090f0 <_free_r+0x50>
 80090ec:	42a3      	cmp	r3, r4
 80090ee:	d9fa      	bls.n	80090e6 <_free_r+0x46>
 80090f0:	6811      	ldr	r1, [r2, #0]
 80090f2:	1855      	adds	r5, r2, r1
 80090f4:	42a5      	cmp	r5, r4
 80090f6:	d10b      	bne.n	8009110 <_free_r+0x70>
 80090f8:	6824      	ldr	r4, [r4, #0]
 80090fa:	4421      	add	r1, r4
 80090fc:	1854      	adds	r4, r2, r1
 80090fe:	42a3      	cmp	r3, r4
 8009100:	6011      	str	r1, [r2, #0]
 8009102:	d1e0      	bne.n	80090c6 <_free_r+0x26>
 8009104:	681c      	ldr	r4, [r3, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	6053      	str	r3, [r2, #4]
 800910a:	4421      	add	r1, r4
 800910c:	6011      	str	r1, [r2, #0]
 800910e:	e7da      	b.n	80090c6 <_free_r+0x26>
 8009110:	d902      	bls.n	8009118 <_free_r+0x78>
 8009112:	230c      	movs	r3, #12
 8009114:	6003      	str	r3, [r0, #0]
 8009116:	e7d6      	b.n	80090c6 <_free_r+0x26>
 8009118:	6825      	ldr	r5, [r4, #0]
 800911a:	1961      	adds	r1, r4, r5
 800911c:	428b      	cmp	r3, r1
 800911e:	bf04      	itt	eq
 8009120:	6819      	ldreq	r1, [r3, #0]
 8009122:	685b      	ldreq	r3, [r3, #4]
 8009124:	6063      	str	r3, [r4, #4]
 8009126:	bf04      	itt	eq
 8009128:	1949      	addeq	r1, r1, r5
 800912a:	6021      	streq	r1, [r4, #0]
 800912c:	6054      	str	r4, [r2, #4]
 800912e:	e7ca      	b.n	80090c6 <_free_r+0x26>
 8009130:	b003      	add	sp, #12
 8009132:	bd30      	pop	{r4, r5, pc}
 8009134:	20000600 	.word	0x20000600

08009138 <_realloc_r>:
 8009138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800913c:	4680      	mov	r8, r0
 800913e:	4614      	mov	r4, r2
 8009140:	460e      	mov	r6, r1
 8009142:	b921      	cbnz	r1, 800914e <_realloc_r+0x16>
 8009144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009148:	4611      	mov	r1, r2
 800914a:	f7fe bdeb 	b.w	8007d24 <_malloc_r>
 800914e:	b92a      	cbnz	r2, 800915c <_realloc_r+0x24>
 8009150:	f7ff ffa6 	bl	80090a0 <_free_r>
 8009154:	4625      	mov	r5, r4
 8009156:	4628      	mov	r0, r5
 8009158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800915c:	f000 faa0 	bl	80096a0 <_malloc_usable_size_r>
 8009160:	4284      	cmp	r4, r0
 8009162:	4607      	mov	r7, r0
 8009164:	d802      	bhi.n	800916c <_realloc_r+0x34>
 8009166:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800916a:	d812      	bhi.n	8009192 <_realloc_r+0x5a>
 800916c:	4621      	mov	r1, r4
 800916e:	4640      	mov	r0, r8
 8009170:	f7fe fdd8 	bl	8007d24 <_malloc_r>
 8009174:	4605      	mov	r5, r0
 8009176:	2800      	cmp	r0, #0
 8009178:	d0ed      	beq.n	8009156 <_realloc_r+0x1e>
 800917a:	42bc      	cmp	r4, r7
 800917c:	4622      	mov	r2, r4
 800917e:	4631      	mov	r1, r6
 8009180:	bf28      	it	cs
 8009182:	463a      	movcs	r2, r7
 8009184:	f7fc fba0 	bl	80058c8 <memcpy>
 8009188:	4631      	mov	r1, r6
 800918a:	4640      	mov	r0, r8
 800918c:	f7ff ff88 	bl	80090a0 <_free_r>
 8009190:	e7e1      	b.n	8009156 <_realloc_r+0x1e>
 8009192:	4635      	mov	r5, r6
 8009194:	e7df      	b.n	8009156 <_realloc_r+0x1e>

08009196 <__sfputc_r>:
 8009196:	6893      	ldr	r3, [r2, #8]
 8009198:	3b01      	subs	r3, #1
 800919a:	2b00      	cmp	r3, #0
 800919c:	b410      	push	{r4}
 800919e:	6093      	str	r3, [r2, #8]
 80091a0:	da08      	bge.n	80091b4 <__sfputc_r+0x1e>
 80091a2:	6994      	ldr	r4, [r2, #24]
 80091a4:	42a3      	cmp	r3, r4
 80091a6:	db01      	blt.n	80091ac <__sfputc_r+0x16>
 80091a8:	290a      	cmp	r1, #10
 80091aa:	d103      	bne.n	80091b4 <__sfputc_r+0x1e>
 80091ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091b0:	f000 b94a 	b.w	8009448 <__swbuf_r>
 80091b4:	6813      	ldr	r3, [r2, #0]
 80091b6:	1c58      	adds	r0, r3, #1
 80091b8:	6010      	str	r0, [r2, #0]
 80091ba:	7019      	strb	r1, [r3, #0]
 80091bc:	4608      	mov	r0, r1
 80091be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <__sfputs_r>:
 80091c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c6:	4606      	mov	r6, r0
 80091c8:	460f      	mov	r7, r1
 80091ca:	4614      	mov	r4, r2
 80091cc:	18d5      	adds	r5, r2, r3
 80091ce:	42ac      	cmp	r4, r5
 80091d0:	d101      	bne.n	80091d6 <__sfputs_r+0x12>
 80091d2:	2000      	movs	r0, #0
 80091d4:	e007      	b.n	80091e6 <__sfputs_r+0x22>
 80091d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091da:	463a      	mov	r2, r7
 80091dc:	4630      	mov	r0, r6
 80091de:	f7ff ffda 	bl	8009196 <__sfputc_r>
 80091e2:	1c43      	adds	r3, r0, #1
 80091e4:	d1f3      	bne.n	80091ce <__sfputs_r+0xa>
 80091e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091e8 <_vfiprintf_r>:
 80091e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	460d      	mov	r5, r1
 80091ee:	b09d      	sub	sp, #116	; 0x74
 80091f0:	4614      	mov	r4, r2
 80091f2:	4698      	mov	r8, r3
 80091f4:	4606      	mov	r6, r0
 80091f6:	b118      	cbz	r0, 8009200 <_vfiprintf_r+0x18>
 80091f8:	6983      	ldr	r3, [r0, #24]
 80091fa:	b90b      	cbnz	r3, 8009200 <_vfiprintf_r+0x18>
 80091fc:	f7ff fe70 	bl	8008ee0 <__sinit>
 8009200:	4b89      	ldr	r3, [pc, #548]	; (8009428 <_vfiprintf_r+0x240>)
 8009202:	429d      	cmp	r5, r3
 8009204:	d11b      	bne.n	800923e <_vfiprintf_r+0x56>
 8009206:	6875      	ldr	r5, [r6, #4]
 8009208:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800920a:	07d9      	lsls	r1, r3, #31
 800920c:	d405      	bmi.n	800921a <_vfiprintf_r+0x32>
 800920e:	89ab      	ldrh	r3, [r5, #12]
 8009210:	059a      	lsls	r2, r3, #22
 8009212:	d402      	bmi.n	800921a <_vfiprintf_r+0x32>
 8009214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009216:	f7ff ff13 	bl	8009040 <__retarget_lock_acquire_recursive>
 800921a:	89ab      	ldrh	r3, [r5, #12]
 800921c:	071b      	lsls	r3, r3, #28
 800921e:	d501      	bpl.n	8009224 <_vfiprintf_r+0x3c>
 8009220:	692b      	ldr	r3, [r5, #16]
 8009222:	b9eb      	cbnz	r3, 8009260 <_vfiprintf_r+0x78>
 8009224:	4629      	mov	r1, r5
 8009226:	4630      	mov	r0, r6
 8009228:	f000 f960 	bl	80094ec <__swsetup_r>
 800922c:	b1c0      	cbz	r0, 8009260 <_vfiprintf_r+0x78>
 800922e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009230:	07dc      	lsls	r4, r3, #31
 8009232:	d50e      	bpl.n	8009252 <_vfiprintf_r+0x6a>
 8009234:	f04f 30ff 	mov.w	r0, #4294967295
 8009238:	b01d      	add	sp, #116	; 0x74
 800923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923e:	4b7b      	ldr	r3, [pc, #492]	; (800942c <_vfiprintf_r+0x244>)
 8009240:	429d      	cmp	r5, r3
 8009242:	d101      	bne.n	8009248 <_vfiprintf_r+0x60>
 8009244:	68b5      	ldr	r5, [r6, #8]
 8009246:	e7df      	b.n	8009208 <_vfiprintf_r+0x20>
 8009248:	4b79      	ldr	r3, [pc, #484]	; (8009430 <_vfiprintf_r+0x248>)
 800924a:	429d      	cmp	r5, r3
 800924c:	bf08      	it	eq
 800924e:	68f5      	ldreq	r5, [r6, #12]
 8009250:	e7da      	b.n	8009208 <_vfiprintf_r+0x20>
 8009252:	89ab      	ldrh	r3, [r5, #12]
 8009254:	0598      	lsls	r0, r3, #22
 8009256:	d4ed      	bmi.n	8009234 <_vfiprintf_r+0x4c>
 8009258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800925a:	f7ff fef2 	bl	8009042 <__retarget_lock_release_recursive>
 800925e:	e7e9      	b.n	8009234 <_vfiprintf_r+0x4c>
 8009260:	2300      	movs	r3, #0
 8009262:	9309      	str	r3, [sp, #36]	; 0x24
 8009264:	2320      	movs	r3, #32
 8009266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800926a:	f8cd 800c 	str.w	r8, [sp, #12]
 800926e:	2330      	movs	r3, #48	; 0x30
 8009270:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009434 <_vfiprintf_r+0x24c>
 8009274:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009278:	f04f 0901 	mov.w	r9, #1
 800927c:	4623      	mov	r3, r4
 800927e:	469a      	mov	sl, r3
 8009280:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009284:	b10a      	cbz	r2, 800928a <_vfiprintf_r+0xa2>
 8009286:	2a25      	cmp	r2, #37	; 0x25
 8009288:	d1f9      	bne.n	800927e <_vfiprintf_r+0x96>
 800928a:	ebba 0b04 	subs.w	fp, sl, r4
 800928e:	d00b      	beq.n	80092a8 <_vfiprintf_r+0xc0>
 8009290:	465b      	mov	r3, fp
 8009292:	4622      	mov	r2, r4
 8009294:	4629      	mov	r1, r5
 8009296:	4630      	mov	r0, r6
 8009298:	f7ff ff94 	bl	80091c4 <__sfputs_r>
 800929c:	3001      	adds	r0, #1
 800929e:	f000 80aa 	beq.w	80093f6 <_vfiprintf_r+0x20e>
 80092a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092a4:	445a      	add	r2, fp
 80092a6:	9209      	str	r2, [sp, #36]	; 0x24
 80092a8:	f89a 3000 	ldrb.w	r3, [sl]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 80a2 	beq.w	80093f6 <_vfiprintf_r+0x20e>
 80092b2:	2300      	movs	r3, #0
 80092b4:	f04f 32ff 	mov.w	r2, #4294967295
 80092b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092bc:	f10a 0a01 	add.w	sl, sl, #1
 80092c0:	9304      	str	r3, [sp, #16]
 80092c2:	9307      	str	r3, [sp, #28]
 80092c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092c8:	931a      	str	r3, [sp, #104]	; 0x68
 80092ca:	4654      	mov	r4, sl
 80092cc:	2205      	movs	r2, #5
 80092ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d2:	4858      	ldr	r0, [pc, #352]	; (8009434 <_vfiprintf_r+0x24c>)
 80092d4:	f7f6 ff8c 	bl	80001f0 <memchr>
 80092d8:	9a04      	ldr	r2, [sp, #16]
 80092da:	b9d8      	cbnz	r0, 8009314 <_vfiprintf_r+0x12c>
 80092dc:	06d1      	lsls	r1, r2, #27
 80092de:	bf44      	itt	mi
 80092e0:	2320      	movmi	r3, #32
 80092e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092e6:	0713      	lsls	r3, r2, #28
 80092e8:	bf44      	itt	mi
 80092ea:	232b      	movmi	r3, #43	; 0x2b
 80092ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092f0:	f89a 3000 	ldrb.w	r3, [sl]
 80092f4:	2b2a      	cmp	r3, #42	; 0x2a
 80092f6:	d015      	beq.n	8009324 <_vfiprintf_r+0x13c>
 80092f8:	9a07      	ldr	r2, [sp, #28]
 80092fa:	4654      	mov	r4, sl
 80092fc:	2000      	movs	r0, #0
 80092fe:	f04f 0c0a 	mov.w	ip, #10
 8009302:	4621      	mov	r1, r4
 8009304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009308:	3b30      	subs	r3, #48	; 0x30
 800930a:	2b09      	cmp	r3, #9
 800930c:	d94e      	bls.n	80093ac <_vfiprintf_r+0x1c4>
 800930e:	b1b0      	cbz	r0, 800933e <_vfiprintf_r+0x156>
 8009310:	9207      	str	r2, [sp, #28]
 8009312:	e014      	b.n	800933e <_vfiprintf_r+0x156>
 8009314:	eba0 0308 	sub.w	r3, r0, r8
 8009318:	fa09 f303 	lsl.w	r3, r9, r3
 800931c:	4313      	orrs	r3, r2
 800931e:	9304      	str	r3, [sp, #16]
 8009320:	46a2      	mov	sl, r4
 8009322:	e7d2      	b.n	80092ca <_vfiprintf_r+0xe2>
 8009324:	9b03      	ldr	r3, [sp, #12]
 8009326:	1d19      	adds	r1, r3, #4
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	9103      	str	r1, [sp, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	bfbb      	ittet	lt
 8009330:	425b      	neglt	r3, r3
 8009332:	f042 0202 	orrlt.w	r2, r2, #2
 8009336:	9307      	strge	r3, [sp, #28]
 8009338:	9307      	strlt	r3, [sp, #28]
 800933a:	bfb8      	it	lt
 800933c:	9204      	strlt	r2, [sp, #16]
 800933e:	7823      	ldrb	r3, [r4, #0]
 8009340:	2b2e      	cmp	r3, #46	; 0x2e
 8009342:	d10c      	bne.n	800935e <_vfiprintf_r+0x176>
 8009344:	7863      	ldrb	r3, [r4, #1]
 8009346:	2b2a      	cmp	r3, #42	; 0x2a
 8009348:	d135      	bne.n	80093b6 <_vfiprintf_r+0x1ce>
 800934a:	9b03      	ldr	r3, [sp, #12]
 800934c:	1d1a      	adds	r2, r3, #4
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	9203      	str	r2, [sp, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	bfb8      	it	lt
 8009356:	f04f 33ff 	movlt.w	r3, #4294967295
 800935a:	3402      	adds	r4, #2
 800935c:	9305      	str	r3, [sp, #20]
 800935e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009444 <_vfiprintf_r+0x25c>
 8009362:	7821      	ldrb	r1, [r4, #0]
 8009364:	2203      	movs	r2, #3
 8009366:	4650      	mov	r0, sl
 8009368:	f7f6 ff42 	bl	80001f0 <memchr>
 800936c:	b140      	cbz	r0, 8009380 <_vfiprintf_r+0x198>
 800936e:	2340      	movs	r3, #64	; 0x40
 8009370:	eba0 000a 	sub.w	r0, r0, sl
 8009374:	fa03 f000 	lsl.w	r0, r3, r0
 8009378:	9b04      	ldr	r3, [sp, #16]
 800937a:	4303      	orrs	r3, r0
 800937c:	3401      	adds	r4, #1
 800937e:	9304      	str	r3, [sp, #16]
 8009380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009384:	482c      	ldr	r0, [pc, #176]	; (8009438 <_vfiprintf_r+0x250>)
 8009386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800938a:	2206      	movs	r2, #6
 800938c:	f7f6 ff30 	bl	80001f0 <memchr>
 8009390:	2800      	cmp	r0, #0
 8009392:	d03f      	beq.n	8009414 <_vfiprintf_r+0x22c>
 8009394:	4b29      	ldr	r3, [pc, #164]	; (800943c <_vfiprintf_r+0x254>)
 8009396:	bb1b      	cbnz	r3, 80093e0 <_vfiprintf_r+0x1f8>
 8009398:	9b03      	ldr	r3, [sp, #12]
 800939a:	3307      	adds	r3, #7
 800939c:	f023 0307 	bic.w	r3, r3, #7
 80093a0:	3308      	adds	r3, #8
 80093a2:	9303      	str	r3, [sp, #12]
 80093a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a6:	443b      	add	r3, r7
 80093a8:	9309      	str	r3, [sp, #36]	; 0x24
 80093aa:	e767      	b.n	800927c <_vfiprintf_r+0x94>
 80093ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80093b0:	460c      	mov	r4, r1
 80093b2:	2001      	movs	r0, #1
 80093b4:	e7a5      	b.n	8009302 <_vfiprintf_r+0x11a>
 80093b6:	2300      	movs	r3, #0
 80093b8:	3401      	adds	r4, #1
 80093ba:	9305      	str	r3, [sp, #20]
 80093bc:	4619      	mov	r1, r3
 80093be:	f04f 0c0a 	mov.w	ip, #10
 80093c2:	4620      	mov	r0, r4
 80093c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093c8:	3a30      	subs	r2, #48	; 0x30
 80093ca:	2a09      	cmp	r2, #9
 80093cc:	d903      	bls.n	80093d6 <_vfiprintf_r+0x1ee>
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0c5      	beq.n	800935e <_vfiprintf_r+0x176>
 80093d2:	9105      	str	r1, [sp, #20]
 80093d4:	e7c3      	b.n	800935e <_vfiprintf_r+0x176>
 80093d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80093da:	4604      	mov	r4, r0
 80093dc:	2301      	movs	r3, #1
 80093de:	e7f0      	b.n	80093c2 <_vfiprintf_r+0x1da>
 80093e0:	ab03      	add	r3, sp, #12
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	462a      	mov	r2, r5
 80093e6:	4b16      	ldr	r3, [pc, #88]	; (8009440 <_vfiprintf_r+0x258>)
 80093e8:	a904      	add	r1, sp, #16
 80093ea:	4630      	mov	r0, r6
 80093ec:	f3af 8000 	nop.w
 80093f0:	4607      	mov	r7, r0
 80093f2:	1c78      	adds	r0, r7, #1
 80093f4:	d1d6      	bne.n	80093a4 <_vfiprintf_r+0x1bc>
 80093f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093f8:	07d9      	lsls	r1, r3, #31
 80093fa:	d405      	bmi.n	8009408 <_vfiprintf_r+0x220>
 80093fc:	89ab      	ldrh	r3, [r5, #12]
 80093fe:	059a      	lsls	r2, r3, #22
 8009400:	d402      	bmi.n	8009408 <_vfiprintf_r+0x220>
 8009402:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009404:	f7ff fe1d 	bl	8009042 <__retarget_lock_release_recursive>
 8009408:	89ab      	ldrh	r3, [r5, #12]
 800940a:	065b      	lsls	r3, r3, #25
 800940c:	f53f af12 	bmi.w	8009234 <_vfiprintf_r+0x4c>
 8009410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009412:	e711      	b.n	8009238 <_vfiprintf_r+0x50>
 8009414:	ab03      	add	r3, sp, #12
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	462a      	mov	r2, r5
 800941a:	4b09      	ldr	r3, [pc, #36]	; (8009440 <_vfiprintf_r+0x258>)
 800941c:	a904      	add	r1, sp, #16
 800941e:	4630      	mov	r0, r6
 8009420:	f7ff f890 	bl	8008544 <_printf_i>
 8009424:	e7e4      	b.n	80093f0 <_vfiprintf_r+0x208>
 8009426:	bf00      	nop
 8009428:	08009d00 	.word	0x08009d00
 800942c:	08009d20 	.word	0x08009d20
 8009430:	08009ce0 	.word	0x08009ce0
 8009434:	08009c54 	.word	0x08009c54
 8009438:	08009c5e 	.word	0x08009c5e
 800943c:	00000000 	.word	0x00000000
 8009440:	080091c5 	.word	0x080091c5
 8009444:	08009c5a 	.word	0x08009c5a

08009448 <__swbuf_r>:
 8009448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944a:	460e      	mov	r6, r1
 800944c:	4614      	mov	r4, r2
 800944e:	4605      	mov	r5, r0
 8009450:	b118      	cbz	r0, 800945a <__swbuf_r+0x12>
 8009452:	6983      	ldr	r3, [r0, #24]
 8009454:	b90b      	cbnz	r3, 800945a <__swbuf_r+0x12>
 8009456:	f7ff fd43 	bl	8008ee0 <__sinit>
 800945a:	4b21      	ldr	r3, [pc, #132]	; (80094e0 <__swbuf_r+0x98>)
 800945c:	429c      	cmp	r4, r3
 800945e:	d12b      	bne.n	80094b8 <__swbuf_r+0x70>
 8009460:	686c      	ldr	r4, [r5, #4]
 8009462:	69a3      	ldr	r3, [r4, #24]
 8009464:	60a3      	str	r3, [r4, #8]
 8009466:	89a3      	ldrh	r3, [r4, #12]
 8009468:	071a      	lsls	r2, r3, #28
 800946a:	d52f      	bpl.n	80094cc <__swbuf_r+0x84>
 800946c:	6923      	ldr	r3, [r4, #16]
 800946e:	b36b      	cbz	r3, 80094cc <__swbuf_r+0x84>
 8009470:	6923      	ldr	r3, [r4, #16]
 8009472:	6820      	ldr	r0, [r4, #0]
 8009474:	1ac0      	subs	r0, r0, r3
 8009476:	6963      	ldr	r3, [r4, #20]
 8009478:	b2f6      	uxtb	r6, r6
 800947a:	4283      	cmp	r3, r0
 800947c:	4637      	mov	r7, r6
 800947e:	dc04      	bgt.n	800948a <__swbuf_r+0x42>
 8009480:	4621      	mov	r1, r4
 8009482:	4628      	mov	r0, r5
 8009484:	f7ff fc98 	bl	8008db8 <_fflush_r>
 8009488:	bb30      	cbnz	r0, 80094d8 <__swbuf_r+0x90>
 800948a:	68a3      	ldr	r3, [r4, #8]
 800948c:	3b01      	subs	r3, #1
 800948e:	60a3      	str	r3, [r4, #8]
 8009490:	6823      	ldr	r3, [r4, #0]
 8009492:	1c5a      	adds	r2, r3, #1
 8009494:	6022      	str	r2, [r4, #0]
 8009496:	701e      	strb	r6, [r3, #0]
 8009498:	6963      	ldr	r3, [r4, #20]
 800949a:	3001      	adds	r0, #1
 800949c:	4283      	cmp	r3, r0
 800949e:	d004      	beq.n	80094aa <__swbuf_r+0x62>
 80094a0:	89a3      	ldrh	r3, [r4, #12]
 80094a2:	07db      	lsls	r3, r3, #31
 80094a4:	d506      	bpl.n	80094b4 <__swbuf_r+0x6c>
 80094a6:	2e0a      	cmp	r6, #10
 80094a8:	d104      	bne.n	80094b4 <__swbuf_r+0x6c>
 80094aa:	4621      	mov	r1, r4
 80094ac:	4628      	mov	r0, r5
 80094ae:	f7ff fc83 	bl	8008db8 <_fflush_r>
 80094b2:	b988      	cbnz	r0, 80094d8 <__swbuf_r+0x90>
 80094b4:	4638      	mov	r0, r7
 80094b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094b8:	4b0a      	ldr	r3, [pc, #40]	; (80094e4 <__swbuf_r+0x9c>)
 80094ba:	429c      	cmp	r4, r3
 80094bc:	d101      	bne.n	80094c2 <__swbuf_r+0x7a>
 80094be:	68ac      	ldr	r4, [r5, #8]
 80094c0:	e7cf      	b.n	8009462 <__swbuf_r+0x1a>
 80094c2:	4b09      	ldr	r3, [pc, #36]	; (80094e8 <__swbuf_r+0xa0>)
 80094c4:	429c      	cmp	r4, r3
 80094c6:	bf08      	it	eq
 80094c8:	68ec      	ldreq	r4, [r5, #12]
 80094ca:	e7ca      	b.n	8009462 <__swbuf_r+0x1a>
 80094cc:	4621      	mov	r1, r4
 80094ce:	4628      	mov	r0, r5
 80094d0:	f000 f80c 	bl	80094ec <__swsetup_r>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d0cb      	beq.n	8009470 <__swbuf_r+0x28>
 80094d8:	f04f 37ff 	mov.w	r7, #4294967295
 80094dc:	e7ea      	b.n	80094b4 <__swbuf_r+0x6c>
 80094de:	bf00      	nop
 80094e0:	08009d00 	.word	0x08009d00
 80094e4:	08009d20 	.word	0x08009d20
 80094e8:	08009ce0 	.word	0x08009ce0

080094ec <__swsetup_r>:
 80094ec:	4b32      	ldr	r3, [pc, #200]	; (80095b8 <__swsetup_r+0xcc>)
 80094ee:	b570      	push	{r4, r5, r6, lr}
 80094f0:	681d      	ldr	r5, [r3, #0]
 80094f2:	4606      	mov	r6, r0
 80094f4:	460c      	mov	r4, r1
 80094f6:	b125      	cbz	r5, 8009502 <__swsetup_r+0x16>
 80094f8:	69ab      	ldr	r3, [r5, #24]
 80094fa:	b913      	cbnz	r3, 8009502 <__swsetup_r+0x16>
 80094fc:	4628      	mov	r0, r5
 80094fe:	f7ff fcef 	bl	8008ee0 <__sinit>
 8009502:	4b2e      	ldr	r3, [pc, #184]	; (80095bc <__swsetup_r+0xd0>)
 8009504:	429c      	cmp	r4, r3
 8009506:	d10f      	bne.n	8009528 <__swsetup_r+0x3c>
 8009508:	686c      	ldr	r4, [r5, #4]
 800950a:	89a3      	ldrh	r3, [r4, #12]
 800950c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009510:	0719      	lsls	r1, r3, #28
 8009512:	d42c      	bmi.n	800956e <__swsetup_r+0x82>
 8009514:	06dd      	lsls	r5, r3, #27
 8009516:	d411      	bmi.n	800953c <__swsetup_r+0x50>
 8009518:	2309      	movs	r3, #9
 800951a:	6033      	str	r3, [r6, #0]
 800951c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009520:	81a3      	strh	r3, [r4, #12]
 8009522:	f04f 30ff 	mov.w	r0, #4294967295
 8009526:	e03e      	b.n	80095a6 <__swsetup_r+0xba>
 8009528:	4b25      	ldr	r3, [pc, #148]	; (80095c0 <__swsetup_r+0xd4>)
 800952a:	429c      	cmp	r4, r3
 800952c:	d101      	bne.n	8009532 <__swsetup_r+0x46>
 800952e:	68ac      	ldr	r4, [r5, #8]
 8009530:	e7eb      	b.n	800950a <__swsetup_r+0x1e>
 8009532:	4b24      	ldr	r3, [pc, #144]	; (80095c4 <__swsetup_r+0xd8>)
 8009534:	429c      	cmp	r4, r3
 8009536:	bf08      	it	eq
 8009538:	68ec      	ldreq	r4, [r5, #12]
 800953a:	e7e6      	b.n	800950a <__swsetup_r+0x1e>
 800953c:	0758      	lsls	r0, r3, #29
 800953e:	d512      	bpl.n	8009566 <__swsetup_r+0x7a>
 8009540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009542:	b141      	cbz	r1, 8009556 <__swsetup_r+0x6a>
 8009544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009548:	4299      	cmp	r1, r3
 800954a:	d002      	beq.n	8009552 <__swsetup_r+0x66>
 800954c:	4630      	mov	r0, r6
 800954e:	f7ff fda7 	bl	80090a0 <_free_r>
 8009552:	2300      	movs	r3, #0
 8009554:	6363      	str	r3, [r4, #52]	; 0x34
 8009556:	89a3      	ldrh	r3, [r4, #12]
 8009558:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800955c:	81a3      	strh	r3, [r4, #12]
 800955e:	2300      	movs	r3, #0
 8009560:	6063      	str	r3, [r4, #4]
 8009562:	6923      	ldr	r3, [r4, #16]
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	f043 0308 	orr.w	r3, r3, #8
 800956c:	81a3      	strh	r3, [r4, #12]
 800956e:	6923      	ldr	r3, [r4, #16]
 8009570:	b94b      	cbnz	r3, 8009586 <__swsetup_r+0x9a>
 8009572:	89a3      	ldrh	r3, [r4, #12]
 8009574:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800957c:	d003      	beq.n	8009586 <__swsetup_r+0x9a>
 800957e:	4621      	mov	r1, r4
 8009580:	4630      	mov	r0, r6
 8009582:	f000 f84d 	bl	8009620 <__smakebuf_r>
 8009586:	89a0      	ldrh	r0, [r4, #12]
 8009588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800958c:	f010 0301 	ands.w	r3, r0, #1
 8009590:	d00a      	beq.n	80095a8 <__swsetup_r+0xbc>
 8009592:	2300      	movs	r3, #0
 8009594:	60a3      	str	r3, [r4, #8]
 8009596:	6963      	ldr	r3, [r4, #20]
 8009598:	425b      	negs	r3, r3
 800959a:	61a3      	str	r3, [r4, #24]
 800959c:	6923      	ldr	r3, [r4, #16]
 800959e:	b943      	cbnz	r3, 80095b2 <__swsetup_r+0xc6>
 80095a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095a4:	d1ba      	bne.n	800951c <__swsetup_r+0x30>
 80095a6:	bd70      	pop	{r4, r5, r6, pc}
 80095a8:	0781      	lsls	r1, r0, #30
 80095aa:	bf58      	it	pl
 80095ac:	6963      	ldrpl	r3, [r4, #20]
 80095ae:	60a3      	str	r3, [r4, #8]
 80095b0:	e7f4      	b.n	800959c <__swsetup_r+0xb0>
 80095b2:	2000      	movs	r0, #0
 80095b4:	e7f7      	b.n	80095a6 <__swsetup_r+0xba>
 80095b6:	bf00      	nop
 80095b8:	2000000c 	.word	0x2000000c
 80095bc:	08009d00 	.word	0x08009d00
 80095c0:	08009d20 	.word	0x08009d20
 80095c4:	08009ce0 	.word	0x08009ce0

080095c8 <abort>:
 80095c8:	b508      	push	{r3, lr}
 80095ca:	2006      	movs	r0, #6
 80095cc:	f000 f898 	bl	8009700 <raise>
 80095d0:	2001      	movs	r0, #1
 80095d2:	f7f9 f90f 	bl	80027f4 <_exit>

080095d6 <__swhatbuf_r>:
 80095d6:	b570      	push	{r4, r5, r6, lr}
 80095d8:	460e      	mov	r6, r1
 80095da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095de:	2900      	cmp	r1, #0
 80095e0:	b096      	sub	sp, #88	; 0x58
 80095e2:	4614      	mov	r4, r2
 80095e4:	461d      	mov	r5, r3
 80095e6:	da08      	bge.n	80095fa <__swhatbuf_r+0x24>
 80095e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	602a      	str	r2, [r5, #0]
 80095f0:	061a      	lsls	r2, r3, #24
 80095f2:	d410      	bmi.n	8009616 <__swhatbuf_r+0x40>
 80095f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095f8:	e00e      	b.n	8009618 <__swhatbuf_r+0x42>
 80095fa:	466a      	mov	r2, sp
 80095fc:	f000 f89c 	bl	8009738 <_fstat_r>
 8009600:	2800      	cmp	r0, #0
 8009602:	dbf1      	blt.n	80095e8 <__swhatbuf_r+0x12>
 8009604:	9a01      	ldr	r2, [sp, #4]
 8009606:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800960a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800960e:	425a      	negs	r2, r3
 8009610:	415a      	adcs	r2, r3
 8009612:	602a      	str	r2, [r5, #0]
 8009614:	e7ee      	b.n	80095f4 <__swhatbuf_r+0x1e>
 8009616:	2340      	movs	r3, #64	; 0x40
 8009618:	2000      	movs	r0, #0
 800961a:	6023      	str	r3, [r4, #0]
 800961c:	b016      	add	sp, #88	; 0x58
 800961e:	bd70      	pop	{r4, r5, r6, pc}

08009620 <__smakebuf_r>:
 8009620:	898b      	ldrh	r3, [r1, #12]
 8009622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009624:	079d      	lsls	r5, r3, #30
 8009626:	4606      	mov	r6, r0
 8009628:	460c      	mov	r4, r1
 800962a:	d507      	bpl.n	800963c <__smakebuf_r+0x1c>
 800962c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009630:	6023      	str	r3, [r4, #0]
 8009632:	6123      	str	r3, [r4, #16]
 8009634:	2301      	movs	r3, #1
 8009636:	6163      	str	r3, [r4, #20]
 8009638:	b002      	add	sp, #8
 800963a:	bd70      	pop	{r4, r5, r6, pc}
 800963c:	ab01      	add	r3, sp, #4
 800963e:	466a      	mov	r2, sp
 8009640:	f7ff ffc9 	bl	80095d6 <__swhatbuf_r>
 8009644:	9900      	ldr	r1, [sp, #0]
 8009646:	4605      	mov	r5, r0
 8009648:	4630      	mov	r0, r6
 800964a:	f7fe fb6b 	bl	8007d24 <_malloc_r>
 800964e:	b948      	cbnz	r0, 8009664 <__smakebuf_r+0x44>
 8009650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009654:	059a      	lsls	r2, r3, #22
 8009656:	d4ef      	bmi.n	8009638 <__smakebuf_r+0x18>
 8009658:	f023 0303 	bic.w	r3, r3, #3
 800965c:	f043 0302 	orr.w	r3, r3, #2
 8009660:	81a3      	strh	r3, [r4, #12]
 8009662:	e7e3      	b.n	800962c <__smakebuf_r+0xc>
 8009664:	4b0d      	ldr	r3, [pc, #52]	; (800969c <__smakebuf_r+0x7c>)
 8009666:	62b3      	str	r3, [r6, #40]	; 0x28
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	6020      	str	r0, [r4, #0]
 800966c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	9b00      	ldr	r3, [sp, #0]
 8009674:	6163      	str	r3, [r4, #20]
 8009676:	9b01      	ldr	r3, [sp, #4]
 8009678:	6120      	str	r0, [r4, #16]
 800967a:	b15b      	cbz	r3, 8009694 <__smakebuf_r+0x74>
 800967c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009680:	4630      	mov	r0, r6
 8009682:	f000 f86b 	bl	800975c <_isatty_r>
 8009686:	b128      	cbz	r0, 8009694 <__smakebuf_r+0x74>
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	f023 0303 	bic.w	r3, r3, #3
 800968e:	f043 0301 	orr.w	r3, r3, #1
 8009692:	81a3      	strh	r3, [r4, #12]
 8009694:	89a0      	ldrh	r0, [r4, #12]
 8009696:	4305      	orrs	r5, r0
 8009698:	81a5      	strh	r5, [r4, #12]
 800969a:	e7cd      	b.n	8009638 <__smakebuf_r+0x18>
 800969c:	08008e79 	.word	0x08008e79

080096a0 <_malloc_usable_size_r>:
 80096a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096a4:	1f18      	subs	r0, r3, #4
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	bfbc      	itt	lt
 80096aa:	580b      	ldrlt	r3, [r1, r0]
 80096ac:	18c0      	addlt	r0, r0, r3
 80096ae:	4770      	bx	lr

080096b0 <_raise_r>:
 80096b0:	291f      	cmp	r1, #31
 80096b2:	b538      	push	{r3, r4, r5, lr}
 80096b4:	4604      	mov	r4, r0
 80096b6:	460d      	mov	r5, r1
 80096b8:	d904      	bls.n	80096c4 <_raise_r+0x14>
 80096ba:	2316      	movs	r3, #22
 80096bc:	6003      	str	r3, [r0, #0]
 80096be:	f04f 30ff 	mov.w	r0, #4294967295
 80096c2:	bd38      	pop	{r3, r4, r5, pc}
 80096c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80096c6:	b112      	cbz	r2, 80096ce <_raise_r+0x1e>
 80096c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096cc:	b94b      	cbnz	r3, 80096e2 <_raise_r+0x32>
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 f830 	bl	8009734 <_getpid_r>
 80096d4:	462a      	mov	r2, r5
 80096d6:	4601      	mov	r1, r0
 80096d8:	4620      	mov	r0, r4
 80096da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096de:	f000 b817 	b.w	8009710 <_kill_r>
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d00a      	beq.n	80096fc <_raise_r+0x4c>
 80096e6:	1c59      	adds	r1, r3, #1
 80096e8:	d103      	bne.n	80096f2 <_raise_r+0x42>
 80096ea:	2316      	movs	r3, #22
 80096ec:	6003      	str	r3, [r0, #0]
 80096ee:	2001      	movs	r0, #1
 80096f0:	e7e7      	b.n	80096c2 <_raise_r+0x12>
 80096f2:	2400      	movs	r4, #0
 80096f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80096f8:	4628      	mov	r0, r5
 80096fa:	4798      	blx	r3
 80096fc:	2000      	movs	r0, #0
 80096fe:	e7e0      	b.n	80096c2 <_raise_r+0x12>

08009700 <raise>:
 8009700:	4b02      	ldr	r3, [pc, #8]	; (800970c <raise+0xc>)
 8009702:	4601      	mov	r1, r0
 8009704:	6818      	ldr	r0, [r3, #0]
 8009706:	f7ff bfd3 	b.w	80096b0 <_raise_r>
 800970a:	bf00      	nop
 800970c:	2000000c 	.word	0x2000000c

08009710 <_kill_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4d07      	ldr	r5, [pc, #28]	; (8009730 <_kill_r+0x20>)
 8009714:	2300      	movs	r3, #0
 8009716:	4604      	mov	r4, r0
 8009718:	4608      	mov	r0, r1
 800971a:	4611      	mov	r1, r2
 800971c:	602b      	str	r3, [r5, #0]
 800971e:	f7f9 f861 	bl	80027e4 <_kill>
 8009722:	1c43      	adds	r3, r0, #1
 8009724:	d102      	bne.n	800972c <_kill_r+0x1c>
 8009726:	682b      	ldr	r3, [r5, #0]
 8009728:	b103      	cbz	r3, 800972c <_kill_r+0x1c>
 800972a:	6023      	str	r3, [r4, #0]
 800972c:	bd38      	pop	{r3, r4, r5, pc}
 800972e:	bf00      	nop
 8009730:	20000608 	.word	0x20000608

08009734 <_getpid_r>:
 8009734:	f7f9 b854 	b.w	80027e0 <_getpid>

08009738 <_fstat_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	4d07      	ldr	r5, [pc, #28]	; (8009758 <_fstat_r+0x20>)
 800973c:	2300      	movs	r3, #0
 800973e:	4604      	mov	r4, r0
 8009740:	4608      	mov	r0, r1
 8009742:	4611      	mov	r1, r2
 8009744:	602b      	str	r3, [r5, #0]
 8009746:	f7f9 f87b 	bl	8002840 <_fstat>
 800974a:	1c43      	adds	r3, r0, #1
 800974c:	d102      	bne.n	8009754 <_fstat_r+0x1c>
 800974e:	682b      	ldr	r3, [r5, #0]
 8009750:	b103      	cbz	r3, 8009754 <_fstat_r+0x1c>
 8009752:	6023      	str	r3, [r4, #0]
 8009754:	bd38      	pop	{r3, r4, r5, pc}
 8009756:	bf00      	nop
 8009758:	20000608 	.word	0x20000608

0800975c <_isatty_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	4d06      	ldr	r5, [pc, #24]	; (8009778 <_isatty_r+0x1c>)
 8009760:	2300      	movs	r3, #0
 8009762:	4604      	mov	r4, r0
 8009764:	4608      	mov	r0, r1
 8009766:	602b      	str	r3, [r5, #0]
 8009768:	f7f9 f870 	bl	800284c <_isatty>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_isatty_r+0x1a>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_isatty_r+0x1a>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	20000608 	.word	0x20000608

0800977c <_init>:
 800977c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977e:	bf00      	nop
 8009780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009782:	bc08      	pop	{r3}
 8009784:	469e      	mov	lr, r3
 8009786:	4770      	bx	lr

08009788 <_fini>:
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	bf00      	nop
 800978c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978e:	bc08      	pop	{r3}
 8009790:	469e      	mov	lr, r3
 8009792:	4770      	bx	lr
